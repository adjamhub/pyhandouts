{"config":{"lang":["it"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Corso Python <p>Le dispense per le lezioni di programmazione del prof.</p> Python: le basi!!! <p>In questo gruppo trovate le dispense di base sulla programmazione Python per iniziare il percorso di apprendimento</p> Python: OOP <p>La base di tutta la programmazione moderna: impariamo a programmare in Python secondo il paradigma della OOP!</p> Approfondimenti <p>L'ultima sezione del sito, dedicata allo studio e agli approfondimenti di argomenti spesso \"tangenti\" al corso di programmazione Python</p> wxPython GUI <p>Una semplice libreria Python, basata su wxWidgets per la programmazione grafica e l'implementazione di programmi basati su GUI</p>"},{"location":"OOP/000_intro/","title":"Object Oriented Programming","text":"<p>OOP \u00e8 l'acronimo di Object Oriented Programming, programmazione orientata agli oggetti. Python \u00e8 un linguaggio di programmazione completamente basato sulla OOP, ovvero tutti i tipi di dato che abbiamo incontrato (interi, reali, stringhe, liste, etc...) sono in realt\u00e0 oggetti che  condividono caratteristiche comuni.</p> <p>In questo capitolo cercheremo prima di capire cosa \u00e8 un oggetto e come si definisce in Python e poi vedremo tutte quelle peculiarit\u00e0 che fanno della OOP il punto di svolta della programmazione fino a renderla in grado di produrre il software della qualit\u00e0 odierna.</p> <p>Sar\u00e0 bellissimo! </p> <p> </p>"},{"location":"OOP/001_classes_objects/","title":"Classi e Oggetti","text":"<p>La prima cosa da fare \u00e8 cercare di capire cosa si intende quando si utilizzano i termini <code>Classe</code> e <code>Oggetto</code>: vediamo se si riesce al primo colpo!!!</p> <p>Partiamo da un concetto qualsiasi, ad esempio... la sedia!</p> <p>Le classi servono per descrivere i concetti: parlando delle sedie, potremmo citare ad esempio: </p> <ul> <li>il materiale</li> <li>il colore</li> <li>l'altezza</li> <li>l'ampiezza della seduta</li> <li>etc...</li> </ul> <p>Una classe descrive il concetto attraverso una serie di informazioni (ad esempio, quelle che abbiamo citato prima) che saranno dello stesso tipo per tutte le sedie  (cio\u00e8, tutte le sedie sono fatte di un materiale, hanno un colore, etc...) ma che chiaramente possono avere valori diversi (sedie di legno o di ferro, bianche oppure blu, etc...).</p> <p>Gli oggetti rappresentano le istanze dei concetti descritti dalle classi. Ad esempio, se state leggendo seduti, la vostra sedia \u00e8 un oggetto,  mentre un'altra sedia \u00e8 un altro oggetto.</p> <p>Se in cucina avete sei sedie significa che avete sei oggetti (diversi) della (stessa) classe Sedia. </p> <p>Classi e Oggetti</p> <p>Le Classi sono un concetto analogo ai tipi di variabile, ad esempio il tipo intero, che descrive tutti i numeri che sono interi.</p> <p>Gli Oggetti sono un concetto analogo alle variabili, che possono contenere un unico valore! Quello \u00e8 l'oggetto!</p> <p>Spero di essere stato chiaro... pi\u00f9 di cos\u00ec non riesco!!!</p>"},{"location":"OOP/001_classes_objects/#le-classi","title":"Le Classi","text":"<p>Partiamo sempre da un concetto, ad esempio l'Automobile.</p> <p>Per implementare la classe <code>Automobile</code> potremmo definire caratteristiche come la marca, il modello, il colore, la cilindrata. </p> <p>Un'automobile \u00e8 per\u00f2 un concetto in grado anche di alcuni comportamenti: ad esempio avvia, spegni, accelera, frena, curva, ecc...</p> <p>Attributi e Metodi di un oggetto</p> <p>Le caratteristiche, o <code>attributi</code> di un oggetto, sono quegli elementi utili a descriverne le propriet\u00e0 e lo stato. Sono solitamente individuate tramite dei sostantivi. </p> <p>I comportamenti, o <code>metodi</code> di un oggetto sono quelle funzionalit\u00e0 che mette a disposizione per interagire con esso. Sono solitamente individuati tramite dei verbi.</p> <p>Attributi e metodi definiti all'interno di un oggetto vengono comunemente definiti i membri dell'oggetto.</p> <p>Per provare a scrivere il nostro primo esempio in codice, partiamo da una classe semplicissima, come la classe Cerchio.</p> <p>I suoi attributi sono semplicemente il raggio, mentre come metodi metteremo quelli per il calcolo di Area e Circonferenza.</p> Definizione della classe Cerchio<pre><code># File \"cerchio.py\"\nimport math\n\nclass Cerchio:\n    # inizializza gli attributi della classe\n    def __init__(self, raggioInserito):\n        # aggiunge l\u2019attributo \"raggio\" alla classe e lo inizializza\n        self.raggio = raggioInserito\n\n    def calcolaArea(self):\n        a = math.pi * self.raggio * self.raggio\n        return a\n\n    def calcolaCirconferenza(self):\n        c = 2* math.pi * self.raggio\n        return c\n\n# -------------------------------------------\n\nif __name__ == \"__main__\":\n    cx = Cerchio(4)   # crea un oggetto della classe Cerchio con raggio 4\n    print(\"Cerchio\")\n    print(\"raggio:\", cx.raggio)\n    print(\"area:\", cx.calcolaArea())\n    print(\"circonferenza:\", cx.calcolaCirconferenza())\n</code></pre> <p>che dovrebbe visualizzare:</p> <pre><code>Cerchio\nraggio: 4\narea: 50.26548245743669\ncirconferenza: 25.132741228718345\n</code></pre> <p>A questo punto i concetti dovrebbero essere chiari, mentre la sintassi utilizzata ancora no!!!</p> <p>Cerchiamo di chiarire spiegando il codice nei punti pi\u00f9 oscuri:</p>"},{"location":"OOP/001_classes_objects/#terminologia","title":"Terminologia","text":"<p>Chiariamo bene i termini che andremo ad utilizzare per definire una classe manualmente e che sono utilizzati da Python.</p> <p><code>class Cerchio:</code></p> <p>Questo si capisce: come per dichiarare una funzione si utilizza la clausola def, per definire una classe utilizziamo la clausola class.</p> <p>Ricordate?</p> <p>Per evitare confusione fra i concetti mi piace utilizzare i termini classe e oggetto. In OOP solitamente si usa il termine classe per la definizione dell'oggetto, mentre oggetto \u00e8 l'istanza del tipo classe definito. Prima abbiamo scritto:</p> <p><code>cx = Cerchio(4)</code></p> <p>Bene: <code>cx</code> \u00e8 un oggetto di tipo Cerchio, un'istanza della classe, mentre <code>Cerchio</code> \u00e8 la classe.</p> <p><code>self</code> </p> <p>Avrete notato questo parametro predefinito nelle funzioni della classe e per inizializzare la variabile membro.  Questo parametro viene automaticamente istanziato da Python in questo modo:</p> <p><code>cx.area()</code> diventa <code>Cerchio.area(cx)</code></p> <p>In questo modo il parametro self permette accesso alla classe, ma l'utente della classe non ha bisogno di occuparsene. Spero sia chiaro, pi\u00f9 facile di cos\u00ec non riesco. In pratica, la variabile self va messa come primo membro di ogni metodo di una classe, in modo da poter collegare il metodo alla classe stessa.</p> <p>Metodi che iniziano (e finiscono) con doppio underscore <code>__</code> Ce ne sono parecchi in ogni classe e hanno ognuno un compito specifico. Vengono definite Funzioni Speciali. Ne introdurremo molte altre pi\u00f9 avanti. La cosa importante da capire su di esse \u00e8 che questi metodi non vanno eseguiti \"volontariamente\" (ad esempio come fareste con il metodo \"area()\" della classe Cerchio se voleste calcolarne l'area) ma vengono eseguiti automaticamente in determinate situazioni. Quindi ogni volta che incontrate una funzione speciale dovete farvi sempre due domande:</p> <ol> <li>In quale momento particolare questa funzione speciale viene     eseguita automaticamente?</li> <li>Voglio modificare il comportamento della classe in quel caso     particolare? Bene, se la risposta a questa domanda \u00e8 s\u00ec significa     che dovete re-implementare quella funzione. Man mano vedremo come.</li> </ol> <p>Per adesso vediamo le 2 funzioni speciali pi\u00f9 comuni in assoluto:</p> <code>def __init__( self , . . . )</code> <p>Questa particolare funzione speciale viene eseguita automaticamente quando si definisce un oggetto di una classe. La sua implementazione serve per dare un valore iniziale agli attributi della classe, siano essi inseriti come parametri della stessa o inizializzati ad un valore scelto dal programmatore.</p> <p>Vediamo un esempio per chiarirci al meglio le idee. Definiamo la classe Quadrato. L'utente potr\u00e0 scegliere il lato del Quadrato, ma inizialmente esso sar\u00e0 disegnato con sfondo bianco e lati neri.</p> Classe Quadrato<pre><code>class Quadrato:\n    def __init__(self, lato):\n        self.lato = lato\n        self.coloreSfondo = \"bianco\"\n        self.coloreBordo = \"nero\"\n\n# ...\n\n# nella riga sotto viene eseguita automaticamente la funzione __init__\nobj = Quadrato(4)\n\n# si definisce cos\u00ec un oggetto della classe Quadrato, di lato 4\n# con colore di sfondo bianco e colore del bordo nero.\n</code></pre> <code>def __str__ (self)</code> <p>La funzione <code>__str__</code> serve per visualizzare in maniera semplice informazioni sulla classe (praticamente per visualizzare il valore dei suoi attributi). Questa funzione viene eseguita automaticamente quando si esegue la funzione print() con parametro un oggetto della classe.</p> <p>La funzione <code>__str__</code> non prende MAI parametri e ritorna sempre una stringa, ricordatelo! Ad esempio, definiamo la funzione <code>__str__</code> per la classe Quadrato definita sopra:</p> <pre><code>def __str__(self):\n    s = \"\"\n    s += \"Quadrato di lato \" + str(self.lato)\n    s += \", sfondo \" + self.coloreSfondo\n    s += \", bordo \" + self.coloreBordo\n    return s\n\n...\n# riferito all\u2019oggetto obj definito prima\nprint(obj)\n# visualizzer\u00e0 \"Quadrato di lato 4, sfondo bianco, bordo nero\"\n</code></pre>"},{"location":"OOP/001_classes_objects/#esercizio-svolto-la-classe-rettangolo","title":"Esercizio svolto: la classe Rettangolo","text":"<p>Definire un oggetto Rettangolo, tramite i parametri base e altezza e implementare i metodi per il calcolo dell'area e del perimetro. Fornire un test per un Rettangolo di base = 5 cm e altezza = 3 cm, visualizzando i parametri e calcolando area e perimetro dello stesso.</p> <pre><code>class Rettangolo:\n    def __init__(self, b = 0, h = 0):\n        self.base = b\n        self.altezza = h\n\n    def __str__(self):\n        s = \"Rettangolo: \" + str(self.__dict__)\n        return s\n\n    def calcolaArea(self):\n        a = self.base * self.altezza\n        return a\n\n    def calcolaPerimetro(self):\n        p = 2*(self.base + self.altezza)\n        return p\n\nif __name__ == \"__main__\":\n    ret = Rettangolo(5,3)\n    print(ret)\n    print(\"Base:\", ret.base)\n    print(\"Altezza:\", ret.altezza)\n    print(\"Area:\", ret.calcolaArea())\n    print(\"Perimetro:\", ret.calcolaPerimetro())    \n</code></pre> <p><code>self.__dict__</code></p> <p><code>self.__dict__</code> \u00e8 una variabile automatica degli oggetti Python che contiene il dizionario delle variabili membro!</p> <p>Per ogni attributo, il nome dello stesso diventa una chiave del dizionario, mentre il suo valore diventa il valore associato!</p>"},{"location":"OOP/001_classes_objects/#esercizi-di-comprensione","title":"Esercizi di comprensione","text":"<p>Prima di andare avanti, proviamo a definire alcune classi e proporre con esse qualche test in cui inserire e modificare i valori degli attributi definiti e visualizzare i risultati delle chiamate ai metodi definiti.</p> <p>Per ognuna ricordate che \u00e8 obbligatorio definire sempre la funzione <code>__init__</code> e la funzione <code>__str__</code> e verificarne il funzionamento, definendo un oggetto della classe e visualizzandone i valori con la print().</p> <p>Esercizio 1101</p> <p>Definire la classe Persona con attributi nome, cognome, data e luogo di nascita, sesso (M/F). La funzione di <code>__init__</code> della classe deve prevedere tutti i parametri necessari per l'inizializzazione degli oggetti.</p> <p>Definite un maschio e una femmina della classe a libera scelta.</p> <p>Esercizio 1101 bis</p> <p>Definire la classe Persona con attributi nome, cognome, data e luogo di nascita, sesso (M/F). La funzione di <code>__init__</code> della classe non deve avere argomenti. </p> <p>Definite un maschio e una femmina della classe a libera scelta.</p> <p>Esercizio 1101 ter</p> <p>Definire la classe Persona con attributi nome, cognome, data e luogo di nascita, sesso (M/F). La funzione di <code>__init__</code> della classe deve prevedere parametri e valori di default per tutti i parametri tranne nome e cognome.</p> <p>Definite un maschio e una femmina della classe a libera scelta.</p> <p>Esercizio 1102</p> <p>Definire la classe TriangoloRettangolo inserendo come attributi i due cateti. Aggiungere i metodi per il calcolo dell'ipotenusa, dell'area e del perimetro. </p> <p>Definire un oggetto della classe TriangoloRettangolo con cateti uguali a 4 cm e 3 cm,  visualizzare i suoi attributi e calcolare l'ipotenusa, l'area e il perimetro.</p> <p>Esercizio 1103</p> <p>Definire la classe Animale con attributi nome e specie. Aggiungere il metodo \"corri\" (ritorna la stringa \"sto correndo...\") e \"mangia\" (ritorna la stringa \"sto mangiando\"). </p> <p>Definire un cane di nome \"Piero\" e farlo correre e mangiare. Visualizzare i suoi attributi.</p> <p>Esercizio 1104</p> <p>Definire la classe Persona con attributi nome, et\u00e0 e sesso (M/F). La funzione di <code>__init__</code> della classe deve prendere come argomento solo il nome della persona, mentre l'et\u00e0 va impostata automaticamente a ZERO e il sesso a \"M\" (o \"F\", scegliete voi). </p> <p>Aggiungere i metodi <code>invecchia</code> (aggiunge un anno di et\u00e0) e <code>saluta</code> (restituisce \"signore\" o \"signora\" a seconda del sesso della persona). </p> <p>Definire 2 persone: \"Augusto\", maschio di 47 anni e \"Marianna\", femmina di 44 anni. Utilizzare i metodi <code>invecchia</code> e <code>saluta</code> per entrambi, procedere poi a visualizzare gli attributi di entrambi.</p> <p>Esercizio 1105</p> <p>Definire la classe ContoCorrente con attributi proprietario e capitale; il proprietario va definito tramite parametro della funzione <code>__init__</code> mentre il capitale va inizializzato a ZERO. </p> <p>Definire il metodo <code>deposita</code>, che prende un parametro reale, controlla che sia positivo ed eventualmente lo aggiunge al capitale e il metodo <code>preleva</code>, che prende anch'esso un parametro reale, verifica che il parametro sia positivo, verifica che sia minore del capitale ed eventualmente lo sottrae da esso (il metodo ritorna True se possibile, False altrimenti). </p> <p>Definire il Conto Corrente di \"Gigetto\". Depositare in esso 1000 euro. Prelevare 600 euro per 2 volte. La seconda volta l'operazione dovrebbe fallire. Visualizzare dopo ogni operazione i valori dell'oggetto con la funzione print().</p> <p>Esercizio 1106</p> <p>Definire la classe Crittografia con attributo un numero intero che indica lo spiazzamento dei caratteri. Questo numero sar\u00e0 utilizzato per criptare le stringhe traslando i caratteri di <code>numero</code> posti sull'alfabeto: ad esempio se il numero \u00e8 3 e vuoi criptare la stringa \"ale\", prendi la \"a\" e vai avanti di 3 sull'alfabeto (\"d\"), prendi la \"l\" e vai avanti di 3 sull'alfabeto (\"o\") e lo stesso con la \"e\": la stringa criptata ottenuta \u00e8 \"doh\".</p> <p>La classe contiene due funzioni: </p> <ul> <li> <p><code>cripta</code>, che prende una stringa come parametro e restituisce la stessa trasformata (criptata) secondo la regola descritta sopra; </p> </li> <li> <p><code>decripta</code>, che prende una stringa come parametro e la rimette \"a posto\" (la decripta). </p> </li> </ul> <p>Definire due oggetti della classe Crittografia con parametro a piacere e provare a \"criptare\" e \"decriptare\" una stringa, verificando che la stringa decriptata sia uguale a quella inserita prima di essere criptata.</p> <p>Esercizio 1107</p> <p>Definire la classe Automobile con attributi marca, modello, velocit\u00e0 e numero di persone trasportate. La funzione init prende come parametri la marca e il modello e imposta a ZERO gli altri attributi. Implementare i seguenti metodi:</p> <ul> <li><code>faiSalirePersona</code>: se l'auto \u00e8 ferma, aggiunge una persona al numero di persone      trasportate fino ad un massimo di 5. Ritorna True se \u00e8 stato     possibile aggiungere una persona, False altrimenti.</li> <li><code>faiScenderePersona</code>: se l'auto \u00e8 ferma, toglie una persona al numero di persone     trasportate (Se possibile ovviamente). Ritorna True se \u00e8 stato     possibile togliere una persona, False altrimenti.</li> <li><code>accelera</code>: se \u00e8 presente almeno una persona (l'autista) aggiunge 20 kmh alla velocit\u00e0 di marcia,      fino ad un massimo di 120 kmh. Ritorna True se \u00e8 stato possibile aumentare     la velocit\u00e0, False altrimenti.</li> <li><code>rallenta</code>: se \u00e8 presente almeno una persona (l'autista), toglie 20 kmh alla velocit\u00e0 di marcia,      ovviamente fino a fermarsi. Ritorna True se \u00e8 stato possibile diminuire la velocit\u00e0,     False altrimenti.</li> <li><code>frena</code>: azzera la velocit\u00e0 di marcia. Ritorna True se \u00e8 stato     possibile frenare, False altrimenti.</li> </ul> <p>Definire un oggetto della classe Automobile e progettare un test in modo che ognuna delle funzioni venga eseguita almeno 2 volte, una ritornando True, una ritornando False.</p> <p>Esercizio 1108</p> <p>Definire la classe TrapezioRettangolo, che prende come parametri la base minore, la base maggiore e l'altezza del Trapezio. </p> <p>Definire i metodi <code>calcolLatoObliquo</code>, <code>calcolaArea</code>, <code>calcolaPerimetro</code>. Dichiarare un oggetto TrapezioRettangolo e procedere a visualizzare i suoi parametri, la sua area e il suo perimetro.</p> <p>Esercizio 1109</p> <p>Definire la classe \"Orario\", con parametri i tre interi per ore, minuti e secondi. Implementare inoltre le seguenti funzioni:</p> <ul> <li><code>contaSecondiDaMezzanotte()</code>: restituisce l'intero che rappresenta il numero di secondi trascorsi dalla mezzanotte. </li> <li><code>aggiungiTempo(ore, minuti, secondi)</code>: aggiunge tempo all'orario corrente. Ad esempio, se l'oggetto della classe Orario segna     le 03:14:22 e si esegue su di esso la funzione aggiungoTempo(1,2,3) l'orario diventa le 04:16:25. Attenzione a quando \"il giro ricomincia\"...</li> <li><code>verificaMomento()</code>: ritorna la stringa \"mattina\" se orario \u00e8 fra le 8 e le 13, \"pomeriggio\" se fra 13 e 20, \"sera\" fra 20 e 23, \"notte\" altrimenti</li> </ul> <p>Esercizio 1110</p> <p>Definire la classe CartaFedelt\u00e0, per la gestione degli utenti di un grande magazzino. La carta fedelt\u00e0 \u00e8 nominativa (appartiene ad un solo cliente) e consente l'accumulo dei punti (attraverso il metodo <code>accumulaPunti(soldiSpesi)</code>) calcolati sulla base della spesa effettuata: ogni 12\u20ac di spesa si aggiunga un punto. All'inizio ovviamente il numero di punti \u00e8 ZERO. Il cliente pu\u00f2 decidere, in ogni momento, di usufruire di una parte dei punti accumulati per l'ottenimento di un premio (implementare un opportuno metodo <code>utilizzaPunti(quantita)</code>: il metodo ritorna True... False altrimenti). </p> <p>Definire le carte fedelt\u00e0 per 2 clienti. Il primo cliente fa una spesa pari a 150\u20ac.  Il secondo cliente fa una spesa di 300\u20ac. In seguito, il primo cliente fa una spesa pari a 1500\u20ac e, dopo aver pagato, decide di utilizzare 100 dei punti accumulati per ritirare un premio. Il secondo cliente chiede di utilizzare 50 dei punti accumulati.</p> <p>Esercizio 1111</p> <p>Definire la classe Giocatore con nome, numero di maglia e ruolo ricoperto. Il nome del giocatore va impostato tramite parametro, mentre il numero va impostato inizialmente a ZERO e il ruolo a \"X\".</p> <p>Definire la funzione <code>impostaRuolo(stringa)</code> che prende una stringa come parametro e imposta il ruolo del giocatore. Fare in modo che i ruoli accettabili siano solo \"P\" (per portiere), \"D\" (per difensore), \"C\" (per centrocampista), \"A\" (per attaccante). La funzione ritorna True o False a seconda del fatto se il ruolo viene effettivamente modificato oppure no.</p> <p>Definire la funzione <code>cambiaNumero(intero)</code> che modifica il numero di maglia solo se esso varia fra 1 e 99. Anche qui, la funzione ritorna True o False...</p> <p>DIFFICILE E OPZIONALE: \u00e8 possibile fare in modo anche che i numeri di maglia dei vari giocatori siano tutti diversi fra loro? Proponi una soluzione al problema. Definire un giocatore di nome \"Edoardo\". Tramite la funzione impostaRuolo, impostare il suo ruolo ad attaccante (con \"A\") e poi modificarlo a terzino (\"T\"). La seconda modifica dovrebbe fallire. Utilizzare la funzione cambiaNumero per modificare il suo numero a 103 e poi a 7. Definire un giocatore di nome \"Alessandro\". Tramite la funzione impostaRuolo, impostare il suo ruolo a centrocampista (con \"C\"). Utilizzare la funzione cambiaNumero per modificare il suo numero a 7 (se avete implementato la parte opzionale, dovrebbe fallire) e poi a 11.</p> <p>Esercizio 1112</p> <p>Definire la classe EstrazioneLotto. La classe contiene una lista, inizialmente vuota, di stringhe che rappresentano le citt\u00e0 ove ci sono le ruote di estrazione. Prevedere un metodo <code>aggiungiRuota(stringa)</code> che verifica se il nome della citt\u00e0 da inserire sia gi\u00e0 presente nelle ruote e in caso negativo la aggiunge alla lista. Definire una funzioni estrai(stringa) che verifica se il nome della citt\u00e0 passata come parametro \u00e8 presente nelle ruote. In caso negativo, ritorna una tupla vuota. In caso positivo, ritorna una tupla di 5 numeri casuali, diversi fra loro, fra 1 e 90.</p> <p>ULTERIORE DIFFICOLTA' (opzionale): fare in modo che i numeri della tupla siano ordinati in senso crescente.</p> <p>Definire una funzione <code>eseguiEstrazioniDellaSettimana()</code> che permette a tutte le ruote presenti di estrarre i numeri del lotto. La funzione ritorna un dizionario che ha come chiavi i nomi delle ruote in cui avvengono le estrazioni e come valori le tuple dei 5 numeri estratti.</p> <p>Definire un oggetto della classe EstrazioneLotto.</p> <p>Inserire tramite il metodo aggiungiRuota le seguenti citt\u00e0: Jesi, Senigallia, Ancona, Jesi (dovrebbe fallire, gi\u00e0 presente), Monsano, Moie, Ancona (err). Visualizzare il risultato della funzione estrai(\"Jesi\"), estrai(\"Ancona\"), estrai(\"Milano\"). L'ultima dovrebbe ritornare una tupla vuota. Eseguire la funzione estrazioniDellaSettimana e visualizzare ordinatamente il dizionario ottenuto, con una visualizzazione simile a questa:</p> <ul> <li>Jesi: (1,5,9,23,89)</li> <li>Senigallia: (23,34,45,67,88)</li> <li>Ancona: (39, 43, 44, 78, 81)</li> </ul> <p>Esercizio 1113: Agenda</p> <p>Una agenda contiene una serie di impegni identificati con una descrizione generica e con il giorno in cui questo impegno \u00e8 preso.  Esempi di impegni potrebbero essere:</p> <ul> <li>Calcetto, Luned\u00ec</li> <li>Parrucchiere, Mercoled\u00ec</li> <li>Pizza con gli amici, Venerd\u00ec</li> </ul> <p>Quando si crea un oggetto della classe Agenda si parte (ovviamente) con una lista di impegni vuota!  La classe presenta inoltre le seguenti funzioni:</p> <ul> <li><code>inserisciImpegno ( descrizione, giorno )</code> : prende i dati dai parametri della funzione e inserisce il nuovo impegno in agenda. Non ritorna nulla.</li> <li><code>elencaImpegniDi ( giorno )</code> : prende come parametro un giorno della settimana e ritorna la lista delle descrizioni degli impegni per quel giorno.</li> <li><code>rimuoviImpegno ( descrizione )</code> : prende come parametro la descrizione di un impegno e, se lo trova in agenda, rimuove l\u2019impegno corrispondente.    Ritorna True se viene rimosso un impegno, False altrimenti.</li> <li><code>trovaImpegno ( descrizione )</code> : prende come parametro la descrizione di un impegno e, se lo trova in agenda, ritorna il giorno in cui quell\u2019impegno \u00e8 stato preso.    Se non trova nulla, ritorna la stringa \"NON TROVATO\".</li> </ul> <p>Definire la classe Agenda, un oggetto della classe stessa, inserire in essa almeno 4 impegni (tramite la funzione inserisciImpegno)  e fare un test di utilizzo di tutte le altre funzioni</p> <p>Esercizio 1114: Rubrica</p> <p>Una rubrica contiene una lista di contatti. Ogni contatto comprende un nome ed un numero di telefono (memorizzabile comunque come una stringa).  Esempi di contatti potrebbero essere:</p> <ul> <li>prof , 555-12345</li> <li>tizio di Dallas, 214-748-3647</li> <li>casa, 0731-24680</li> </ul> <p>Quando si crea un oggetto della classe Rubrica, si parte con un elenco di contatti vuoto. La classe presenta inoltre le seguenti funzioni:</p> <ul> <li><code>inserisciContatto ( nome , numero )</code> : prende i dati dai parametri della funzione e inserisce il nuovo contatto in rubrica. Non ritorna nulla.</li> <li><code>modificaContatto ( nome , nuovoNumero )</code> : modifica il contatto identificato dal parametro nome, aggiornando il suo numero con il parametro nuovoNumero.    Ritorna True se il numero viene aggiornato, False altrimenti.</li> <li><code>rimuoviContatto ( nome )</code> : rimuove dalla rubrica il contatto identificato dal parametro nome.    Ritorna True se \u00e8 stato possibile rimuovere il contatto, false altrimenti.</li> <li><code>trovaNumero ( nome )</code> : ritorna il numero del contatto con nome la stringa riportata nel parametro.    Se non si trova nessun contatto, ritorna la stringa \"NESSUN CONTATTO\".</li> </ul> <p>Definire la classe Rubrica, un oggetto della stessa, inserirvi almeno 4 contatti (tramite la funzione inserisciContatto) e fare un test di utilizzo di tutte le altre funzioni.</p>"},{"location":"OOP/001_classes_objects/#accesso-agli-attributi-incapsulamento","title":"Accesso agli attributi (incapsulamento)","text":"<p>Nei linguaggi di programmazione pi\u00f9 antichi e strutturati (come C++ e Java) esiste il concetto di visibilit\u00e0 di un membro (un attributo o un metodo) della classe. Ogni membro pu\u00f2 essere specificato come:</p> <p>Nei linguaggi (molto) strutturati:</p> <ul> <li><code>public</code>, ovvero ereditabile e visibile a chiunque utilizzi la classe e le sue istanze;</li> <li><code>protected</code>, ovvero visibile solo all'interno della propria classe di appartenenza e dall'interno di ogni sua classe derivata;</li> <li><code>private</code>, ovvero non ereditabile e visibile solo all'interno della propria classe di appartenenza. Questa \u00e8 la visibilit\u00e0 di default.</li> </ul> <p>Questi concetti in Python (che \u00e8 un linguaggio molto pi\u00f9... moderno. Non so quanto in questo caso sia un bene...) sono stati tradotto in maniera molto particolare.</p> <p>In Python:</p> <ul> <li><code>public</code>, ovvero ereditabile e visibile a chiunque utilizzi la classe e le sue istanze; Questa \u00e8 la visibilit\u00e0 di default in Python</li> <li><code>protected</code>, ogni variabile membro che inizia con underscore <code>_</code>. Funziona come pubblico. Il livello protetto \u00e8 sociale (ovvero i programmatori per educazione, dovrebbero evitare l'utilizzo esterno alla classe)</li> <li><code>private</code>, ogni variabile membro che inizia con doppio underscore <code>__</code>. Non ereditabile e Visibile solo all'interno della propria classe di appartenenza.</li> </ul> <p>La visibilit\u00e0 di default \u00e8 diventata quella <code>public</code> per eliminare alla radice qualunque problema di accesso. Di sicuro una mossa a favore di chi \u00e8 poco esperto.</p> <p>Per ottenere la visibilit\u00e0 <code>protected</code> basta iniziare il nome della variabile con un underscore <code>_</code>. Una roba tipo:</p> <pre><code>class Persona:\n    def __init__(self, name):\n        self._nome = name\n</code></pre> <p>Attenzione per\u00f2! Il livello di visibilit\u00e0 che si introduce con un underscore \u00e8 puramente sociale!!! Questo significa che se qualcuno volesse accedere alla vostra variabile dall'esterno, potr\u00e0 sempre farlo e l'interprete Python non si lamenter\u00e0! Qualunque programmatore Python per\u00f2... lo considererebbe alquanto scortese!</p> <pre><code>p = Persona(\"Ciccio\")\nprint(p._nome) # ecco... adesso sono un programmatore maleducato. Corretto, ma maleducato!!!\n</code></pre> <p>La visibilit\u00e0 <code>private</code> si ottiene iniziando il nome di una variabile (o di una funzione membro) con 2 underscore. Stavolta per\u00f2 le cose cambiano... l'interprete custodisce eccome i membri privati e riporta un AttributeError. Insisto col mio esempio:</p> <pre><code>class Persona:\n    def __init__(self, name):\n        self.__nome = name\n\np = Persona(\"Ciccio\")\nprint(p.__nome)      # ERRORE!!! Adesso sono anche un somaro...\n</code></pre> <p>Capito come Python rende la visibilit\u00e0 dei membri delle classi, passiamo alla domanda di concetto: che cosa pu\u00f2 interessarci tutto ci\u00f2? Risposta: a proteggere le variabili! Dall'esterno. Da un uso libero. Da chi vuole visualizzarle senza permesso. Da chi vuole modificarne il valore come crede.</p> <p>Inserisco un pezzo di codice di linguaggio C++ nella speranza di rendere evidente il concetto:</p> Esempio di classe in linguaggio C++<pre><code>class Persona\n{\n// attributi privati (in C gli attributi si segnano con un solo underscore)\n    string _nome;\n\n// metodi pubblici\npublic:\n    // setter method: permette di impostare il valore dell'attributo _nome\n    bool setNome(string n) {\n        if (n == \"\")\n            return False;\n        _nome = n;\n        return True;\n    };\n\n    // getter method: ritorna il valore dell'attributo _nome\n    string nome() const {\n        return _nome;\n    }; \n};\n</code></pre> <p>Anche se non conosciamo il linguaggio C++, quello che vediamo \u00e8 molto semplice da comprendere: l'attributo <code>_nome</code> \u00e8 privato e quindi  NON modificabile direttamente dall'esterno della classe <code>Persona</code>. Questo significa che un codice del genere da errore:</p> <pre><code>Persona pers;\npers._nome = \"Andrea\"; // ERRORE! L'attributo \u00e8 PRIVATO!!!\n</code></pre> <p>Questa sovrastruttura, tipica dei linguaggi compilati come C e Java,  fornisce un livello di protezione aggiuntivo ai valori delle variabili membro!</p> <p>Se il programmatore vuole che all'esterno venga visualizzato il nome della Persona, inserisce nella classe un metodo getter (tipicamente <code>nome()</code>) cio\u00e8 un metodo che ritorna il valore di <code>_nome</code>.</p> <p>Se il programmatore vuole che dall'esterno sia possibile modificare il nome della Persona, inserisce nella classe un metodo setter (tipicamente <code>setNome(string n)</code>), cio\u00e8 un metodo che permette di impostare un nuovo valore per <code>_nome</code> (se il valore  accettabile!)</p> <p>Privato o protetto?</p> <p>Adesso che abbiamo capito il concetto di visibilit\u00e0 (a grandi linee, mi rendo conto...) facciamo una semplificazione: per ora utilizzeremo solo le visibilit\u00e0:</p> <ul> <li>pubbliche (cio\u00e8 lasceremo tutto identico a prima...)</li> <li>private (quindi metteremo DUE underscore e...)</li> </ul> <p>La visibilit\u00e0 protetta sar\u00e0 reintrodotta nel prossimo capitolo!!!</p> <p>Nel linguaggio Python esiste uno strumento che permette una implementazione analoga (ovvero... simile, NON uguale) a questo livello di protezione delle variabili che si definisce il Python @property decorator.</p> <p>Un codice funzionalmente analogo a quello sopra in <code>C++</code>, che scriviamo in <code>Python</code>, potrebbe essere fatto cos\u00ec:</p> <pre><code>class Persona:\n    def __init__(self, name):\n        # il ragionamento \u00e8 identico con la visibilit\u00e0 protetta!!!\n        self.__nome = name\n\n    @property\n    def nome(self):\n        \"\"\" DOCUMENTA QUI LA TUA PROPRIETA': il nome della persona \"\"\"\n        return self.__nome\n\n    @nome.setter\n    def nome(self, name):\n        if name == \"\":\n            raise ValueError(\"Tutte le persone hanno un nome...\")\n        self.__nome = name\n        return\n</code></pre> <p>Mamma mia, quante cose da spiegare... Cominciamo!</p> <pre><code>def __init__(self, name):\n    self.__nome = name\n</code></pre> <p>Secondo la convenzione gi\u00e0 esposta, si intende mantenere <code>nascosta</code> la variabile membro <code>__nome</code>.</p> <pre><code>@property\ndef nome(self):\n    \"\"\" DOCUMENTA QUI LA TUA PROPRIETA': il nome della persona \"\"\"\n    return self.__nome\n</code></pre> <p>Questo decoratore (<code>@property</code> con la chiocciolina davanti si dice decoratore in Python) fa in modo che <code>nome</code> (in questo caso, il nome della funzione)  diventi una <code>Python property</code>. La <code>docstring</code> interna specifica la descrizione della propriet\u00e0.</p> <p>Una propriet\u00e0 \u00e8 una caratteristica tipica di un oggetto,  a cui possono essere aggiunti funzioni <code>getter</code> , <code>setter</code> e... un'altra che non studieremo!!!.</p> <p>La definizione della propriet\u00e0 implica automaticamente l'esistenza della funzione <code>getter</code>, quella che ritorna il valore. Se vogliamo inserire anche la funzione <code>setter</code>, che permette i modificare il valore della propriet\u00e0, allora scriviamo:</p> <pre><code>@nome.setter\ndef nome(self, name):\n    if name == \"\":\n        # questa la ignoriamo??? La scriviamo cos\u00ec e basta :D\n        raise ValueError(\"Tutte le persone hanno un nome...\")\n    self.__nome = name\n    return\n</code></pre> <p>A questo punto, la propriet\u00e0 <code>nome</code> diventa una sorta di nuova variabile membro della classe, che invoca automaticamente le funzioni getter e setter ad essa collegate:</p> <pre><code>pers = Persona()\npers.nome = \"Andrea\"        # esegue la funzione \"setter\" automaticamente\nprint(\"Nome:\", pers.nome)   # esegue la funzione \"getter\" automaticamente\n</code></pre> <p>Questo modo di implementare le variabili membro di una classe \u00e8 la via scelta dai programmatori Python per gestire i valori delle stesse.</p>"},{"location":"OOP/001_classes_objects/#read-only-properties","title":"Read-Only Properties","text":"<p>Capire il concetto di propriet\u00e0 di sola lettura \u00e8 molto semplice: basta dimenticarsi di aggiungere ad una proriet\u00e0  la funzione setter... ed ecco che diventa impossibile modificarla al di fuori della classe!!!</p> <pre><code>class Oggetto:\n    def __init__(self):\n        self.__valore = 0\n\n    @property\n    def valore(self):\n        return self.__valore\n\nobj = Oggetto()\nobj.valore = 5 # ERRORE!!!! NO setter!!!\n</code></pre> <p>Questa caratteristica delle propriet\u00e0 ritorna utile quando abbiamo delle caratteristiche derivate da altre: ad esempio, l'area di un rettangolo pu\u00f2 essere definita come propriet\u00e0 read-only, in modo che essa venga calcolata automaticamente a partire dai valori attuali di base e altezza, ma non possa essere impostata da codice. Proviamo:</p> <pre><code>class Rettangolo:\n    def __init__(self, b, h):\n        self.base = b\n        self.altezza = h\n\n    @property\n    def area(self):\n        return self.base * self.altezza\n\nret = Rettangolo(5,4)\nprint(\"Area:\", ret.area)    # scrive \"Area: 20\"\nret.area = 30               # ERRORE!!! Quali sono base e altezza di un rettangolo di area 30? Boh...\n</code></pre> <p>Provate a verificare la vostra comprensione coi seguenti esercizi.</p>"},{"location":"OOP/001_classes_objects/#esercizi-sulle-proprieta","title":"Esercizi sulle propriet\u00e0","text":"<p>Esercizio 1120: SVOLTO</p> <p>(Ri)definire la classe Rettangolo, facendo in modo che base e altezza siano numeri comunque positivi e che area e perimetro siano calcolate automaticamente come propriet\u00e0 in sola lettura.</p> <p>Il codice che segue mi sembra alquanto chiaro. Provate a leggerlo con calma, a copiarlo sul vostro computer e a provare alcune modifiche  per essere sicuri di aver capito tutto!</p> <pre><code>class Rettangolo:\n    def __init__(self, b, h):\n        # i valori passati nella init NON sono sottoposti al controllo\n        # imposto dai decoratori sotto, quindi...\n        self.__base = abs(b)\n        self.__altezza = abs(h)\n\n    def __str__(self):\n        return \"Rettangolo: \" + str(self.__dict__)\n\n    @property\n    def base(self):\n        return self.__base\n\n    @base.setter\n    def base(self, value):\n        if value &lt; 0:\n            raise ValueError(\"La base di un rettangolo non pu\u00f2 essere negativa\")\n        self.__base = value\n        return\n\n    @property\n    def altezza(self):\n        return self.__altezza\n\n    @altezza.setter\n    def altezza(self, value):\n        if value &lt; 0:\n            raise ValueError(\"L'altezza di un rettangolo non pu\u00f2 essere negativa\")\n        self.__altezza = value\n        return\n\n    @property\n    def area(self):\n        return self.__base * self.__altezza\n\n    @property\n    def perimetro(self):\n        return (self.__base + self.__altezza) * 2\n\nif __name__ == \"__main__\":\n    r1 = Rettangolo(5,3)\n    print(r1)\n    # se decommenti sotto vedi il ValueError con la nostra spiegazione\n    #r1.base = -12\n    r1.base = 12\n    print(\"base:\", r1.base)\n    print(\"altezza:\", r1.altezza)\n    # area e perimetro sono propriet\u00e0 NON funzioni, quindi vanno SENZA parentesi\n    print(\"area:\", r1.area)\n    print(\"perimetro:\", r1.perimetro) \n    # se decommenti sotto, vedi l'interprete lamentarsi per l'assegnazione\n    #r1.area = 23\n</code></pre> <p>E adesso sotto con un esercizio analogo!</p> <p>Esercizio 1121</p> <p>(Ri)definire la classe Cerchio, facendo in modo che il raggio sia un numero sempre positivo e che il diametro, l'area e la circonferenza  siano calcolate automaticamente come propriet\u00e0 in sola lettura.</p> <p>Esercizio 1122</p> <p>Definire una classe Temperatura, che NON prende parametri in fase di inizializzazione. Ha una sola variabile membro, la temperatura in gradi Kelvin, che (come sapete) deve essere non negativa. Presenta inoltre due propriet\u00e0 in sola lettura per visualizzare la temperatura in gradi Celsius e in gradi Farheneit.</p> <p>Kelvin, Celsius, Farheneit</p> <pre><code>temp:K \nC = temp - 273.15\nF = temp * 9 / 5 - 459.67\n</code></pre> <p>Esercizio 1123</p> <p>Definire la classe Data con giorno, mese, anno che NON possono essere modificati (capito come fanno le classi Datetime???)</p> <p>Esercizio 1124</p> <p>Definire la classe Contatore. Essa ha un solo valore membro (la conta, appunto). La conta parte da zero, non pu\u00f2 essere modificata e viene incrementata ogni volta che viene visualizzata.</p> <p> </p>"},{"location":"OOP/002_inheritance/","title":"Ereditariet\u00e0","text":"<p>L'ereditariet\u00e0 \u00e8 un concetto tipico della programmazione orientata agli oggetti che ovviamente qui sar\u00e0 declinato in salsa Python :) Essa \u00e8 la capacit\u00e0 di definire una classe (la classe derivata) a partire da una gi\u00e0 esistente (la classe base), facendo in modo che  la nuova classe erediti tutte le caratteristiche della classe iniziale.</p> <pre><code>class Persona:\n    def __init__(self, name):\n        self.nome = name\n\n    def saluta(self):\n        return f\"buongiorno, mi chiamo {self.nome}\"\n\nclass Studente(Persona):        # la classe Studente \"deriva\" dalla classe Persona\n    pass\n\n# ------------------------------------ \nif __name__ == \"__main__\":\n    p = Studente(\"Gino\")\n    print(p.saluta())        # la classe Studente \"eredita\" il metodo saluta()\n\n# scrive: buongiorno, mi chiamo gino\n</code></pre> <p>Fin qui, mi sembra molto semplice... La classe Studente deriva dalla classe Persona e quindi eredita tutte le sue caratteristiche, in particolare, le sue funzioni! Quindi pu\u00f2 usare la funzione saluta() ereditata.</p> <p>Adesso pensate che uno studente voglia comportarsi in modo diverso da una generica Persona... salutando in maniera pi\u00f9 sciolta, pi\u00f9 informale, </p> <p>E' possibile modificare il comportamente di una funzione ereditata semplicemente riscrivendola da capo nella classe derivata:  questo comportamento si definisce OVERRIDING, cio\u00e8 la nuova funzione implementata va a sovrapporsi alla funzione ereditata nascondendola dall'esecuzione.</p> <pre><code>class Persona:\n    def __init__(self, name):\n        self.nome = name\n\n    def saluta(self):\n        return f\"buongiorno, mi chiamo {self.nome}\"\n\nclass Studente(Persona):        # la classe Studente \"deriva\" dalla classe Persona\n    def saluta(self):\n        return f\"bella raga, io sono {self.nome}!!!\"\n\n# ------------------------------------ \nif __name__ == \"__main__\":\n    p = Studente(\"Gino\")\n    print(p.saluta())        # la classe Studente utilizza il metodo saluta() reimplementato\n\n# scrive: bella raga, io sono gino!!!\n</code></pre> <p>Visti questi due esempi, possiamo azzardare a dare una definizione del comportamento dell'ereditariet\u00e0 in Python.</p> <p>In Python il meccanismo dell'ereditariet\u00e0 si abilita semplicemente scrivendo:</p> <p><pre><code>class Derivata(Base):\n    ...\n</code></pre> il che significa che la nuova classe Derivata eredita tutte le caratteristiche della classe Base, da cui deriva.</p> <p>Ok, ma... quali sono queste caratteristiche che vengono ereditate??? E qui, la risposta mi sembra abbastanza evidente: le funzioni!!!</p> <p>In Python, dal punto di vista pratico, l'ereditariet\u00e0 permette il passaggio di tutte le funzioni  presenti nella classe Base alla classe Derivata</p> <p>Quando attivi l'ereditariet\u00e0, tutte le funzioni definite nella classe Base passano automaticamente nella classe Derivata.</p> <p>Attenzione!</p> <p>Se pensate alle semplici classi che scriviamo adesso, l'ereditariet\u00e0 \u00e8 solo una inutile complicazione.</p> <p>Se pensate per\u00f2 al prossimo step, in cui importeremo librerie di classi fighissime (fatte da altri!!!) e con funzionalit\u00e0 incredibili, capite bene che programmare in OOP diventer\u00e0 una sciccheria!</p> <p>Con una riga di codice avrete gi\u00e0 implementato il mondo  E funziona tutto!!!</p> <p>Se vuoi modificare il comportamento di una funzione devi agire tramite overriding reimplementando la funzione nella classe Derivata.</p> <p>I metodi ereditati dalla classe Base, ma reimplementati tramite overriding non vengono cancellati, ma sono semplicemente nascosti dal metodo reimplementato (overriding si potrebbe tradurre con prevalente, nel senso che il metodo reimplementato \u00e8 prevalente rispetto a quello ereditato: non lo cancella, lo prevarica).</p> <p>Per accedere ai metodi ereditati dalla classe Base, ma nascosti tramite overriding, Python mette a disposizione la funzione <code>super()</code>.  Vediamo un esempio di utilizzo:</p> <pre><code>class Persona:\n    def __init__(self, name):\n        self.nome = name\n\n    def saluta(self):\n        return f\"buongiorno, mi chiamo {self.nome}\"\n\nclass Studente(Persona):        # la classe Studente \"deriva\" dalla classe Persona\n    def saluta(self):\n        s = super().saluta()\n        return s + \" e sono uno studente\"\n\n# ------------------------------------ \nif __name__ == \"__main__\":\n    p = Studente(\"Gino\")\n    print(p.saluta())        # la classe Studente utilizza il metodo saluta() reimplementato\n\n# scrive: buongiorno, mi chiamo Gino e sono uno studente\n</code></pre> <p>La funzione <code>super()</code> permette di accedere a tutti i metodi ereditati dalla classe Base (la classe Persona, nel caso della classe Studente). Capisco che l'esempio sopra \u00e8 un p\u00f2 sempliciotto, per\u00f2 rende l'idea: prima ottengo l'output della funzione <code>saluta()</code> ereditata e poi ci aggiungo qualcosa (leggi: ci faccio quello che mi pare).</p> <p>In programmazione OOP la funzione <code>super()</code> \u00e8 clamorosamente utile nel caso di overriding della funzione <code>__init__</code>: vediamo perch\u00e9.</p> <p>Nel seguente esempio proveremo ad aggiungere una variabile membro alla classe Studente relativa alla scuola frequentata dallo studente. Per farlo dobbiamo forzatamente reimplementare la funzione <code>__init__</code> della classe, modificando cos\u00ec anche il numero dei parametri. Questa cosa mi forza (poich\u00e9 facendo overriding, la funzione <code>__init__</code> ereditata viene nascosta) a reimplementare tutto quanto viene definito  nella funzione <code>__init__</code> della classe Base.</p> Implementazione banale (NON va bene)<pre><code>class Persona:\n    def __init__(self, name):\n        self.nome = name\n\nclass Studente(Persona):\n    def __init__(self,name,school):\n        self.nome = name\n        self.scuola = school\n\n# ------------------------------------ \nif __name__ == \"__main__\":\n    p = Studente(\"Gino\", \"Liceo\")    \n</code></pre> <p>Questo modo di fare pu\u00f2 funzionare per classi banali come la classe Persona e la classe Studente... NON pu\u00f2 funzionare quando si eredita da classi complesse: bisogna usufruire della funzione <code>__init__</code> ereditata grazie alla funzione <code>super()</code>:</p> Implementazione corretta<pre><code>class Persona:\n    def __init__(self, name):\n        self.nome = name\n\nclass Studente(Persona):\n    def __init__(self,name,school):\n        super().__init__(name)\n        self.scuola = school\n\n# ------------------------------------ \nif __name__ == \"__main__\":\n    p = Studente(\"Gino\", \"Liceo\")    \n</code></pre> <p>La funzione <code>super()</code> che richiama la funzione <code>__init__</code> ereditata deve essere eseguita per prima cosa, fornendole tutti i parametri necessari (nel nostro caso, solo il nome), mentre l'attributo aggiunto (self.scuola) si definisce subito dopo.</p>"},{"location":"OOP/002_inheritance/#python-object-class","title":"Python Object class","text":"<p>L'ereditariet\u00e0 \u00e8 un meccanismo talmente comodo che tutto il linguaggio Python \u00e8 basato su di esso.</p> <p>In Python 3 esiste una classe predefinita, chiamata <code>object</code>, da cui automaticamente tutte le classi derivano, secondo una sorta di eredit\u00e0 forzata. Significa che tutte le classi che dichiariamo in Python 3 automaticamente derivano dalla classe <code>object</code>. </p> <p>Questo concetto di avere una unica classe base da cui per ereditariet\u00e0 derivano tutte le altre non \u00e8 una idea partorita  in seno alla comunit\u00e0 Python ma una \"genialata\" che le comunit\u00e0 Java e Qt/C++ sperimentano gi\u00e0 da decenni.</p> <p>L'idea alla base di questa \"moda\" \u00e8 quella di sfruttare l'ereditariet\u00e0 per condividere con tutti gli oggetti una serie di propriet\u00e0 comuni che possano facilitare la gestione del codice e potenziare con semplicit\u00e0 e in maniera automatica tutto il sistema OOP Python.</p> <p>Per verificare la struttura di ereditariet\u00e0 che vi ho prospettato potete utilizzare le funzioni predefinite:</p> <ul> <li><code>isinstance()</code></li> <li><code>issubclass()</code></li> </ul> <p>La funzione <code>isinstance()</code> prende due parametri, un oggetto e una classe (ricordate questi termini? Controllate nella terminologia) e ritorna True se l'oggetto \u00e8 una istanza della classe, False altrimenti. Come al solito, con un esempio \u00e8 pi\u00f9 facile capire:</p> <pre><code>class Prova:\n    pass\n\na = Prova()\nb = 2\nisinstance(a, Prova)        # ritorna True\nisinstance(b, Prova)        # ritorna False\nisinstance(a, object)       # ritorna True\n</code></pre> <p>La funzione <code>issubclass()</code> prende due parametri, due classi e ritorna True se la prima classe \u00e8 una sottoclasse della seconda.</p> <pre><code>issubclass(Prova, object)   # ritorna True\nissubclass(int, Prova)      # ritorna False\nissubclass(int, object)     # ritorna True, tutto deriva da object. Ricordate?\n</code></pre> <p>Come avete visto, porta tutto :)</p>"},{"location":"OOP/002_inheritance/#esercizi-su-ereditarieta","title":"Esercizi su ereditariet\u00e0","text":"<p>Esercizio 1241</p> <p>Definire la classe Quadrato con attributo il lato e metodi \"area\" e \"perimetro\". Da quella derivare la classe Cubo, in cui va aggiunto il metodo \"volume\" e ridefinito il metodo \"area\" in modo che esso restituisca l'area delle 6 facce del cubo.</p> <p>Dichiarare un oggetto Quadrato di lato 4, visualizzando i suoi attributi e il risultato dei metodi area e perimetro.</p> <p>Dichiarare un oggetto Cubo di lato 4, visualizzando i suoi attributi e il risultato dei metodi area e volume.</p> <p>Esercizio 1242</p> <p>Definire la classe Persona, con attributi nome ed et\u00e0 e metodi saluta() (restituisce la stringa \"ciao, sono + nome\") e invecchia() (aggiunge un anno all'et\u00e0).</p> <p>Derivare da questa la classe Docente, che aggiunge l'attributo materia, inizialmente vuoto.</p> <p>Un docente invecchia pi\u00f9 velocemente di una persona normale... ridefinire la funzione invecchia() che aggiunge ad ogni chiamata 2 anni al docente.</p> <p>Aggiungere alla classe Docente il metodo insegna(materia), che prende una stringa per il nome della materia da insegnare. Se la materia \u00e8 una fra \"matematica\", \"italiano\", \"inglese\" la funzione imposta l'attributo materia e ritorna True. Altrimenti ritorna False.</p> <p>Definire la persona \"Giacomo\", di anni 28. Testare i metodi saluta, invecchia e poi visualizzare gli attributi della classe.</p> <p>Definire il docente \"Francesca\", di anni 31. Testare i metodi saluta, invecchia (ridefinito) e il metodo insegna con le materie \"diritto\" e \"inglese\". Visualizzare infine gli attributi della classe.</p> <p>Esercizio 1243</p> <p>Definire la classe Punto2D, con attributi le coordinate del punto nel piano cartesiano e le funzioni \"distanzaDalCentro\" e \"distanzaDalPunto\". Questa seconda funzione prende come parametro un ulteriore Punto2D da cui calcolare la distanza nel piano.</p> <p>Derivare dalla classe Punto2D la classe Punto3D.</p> <p>Definire il Punto2D di coordinate (3,4), visualizzare i suoi attributi ed eseguire le funzioni distanzaDalCentro e distanzaDalPunto. Per quest'ultima funzione definire il Punto2D di coordinate (6,8).</p> <p>Definire il Punto3D di coordinate (4,5,6), visualizzare i suoi attributi ed eseguire le funzioni distanzaDalCentro e distanzaDalPunto. Per quest'ultima funzione definire il Punto3D di coordinate (1,1,2).</p> <p>Esercizio 1244</p> <p>Definire la classe Cerchio con gli attributi e i metodi che ritenete opportuni.</p> <p>Derivare da essa la classe Sfera.</p> <p>Definire un cerchio di raggio 5, di cui calcolare area e circonferenza. Definire una sfera di raggio 3, di cui calcolare area e volume.</p> <p>Esercizio 1245</p> <p>Definire la classe Contatto con nome, nick, numero, mail. In fase di definizione la classe prende solo nome e numero e imposta gli altri alla stringa vuota.</p> <p>Definire i seguenti contatti:</p> <ul> <li>Giacomo (detto \"Jack\"), numero +39-340-1234567, mail jack@mail.com.</li> <li>Giovanni (detto \"John\"), numero +39-333-4567890, mail john@mail.com.</li> </ul> <p>La classe ContattoLavoro deriva dalla classe Contatto, ma aggiunge le informazioni fax e partitaIVA. Il costruttore prende ancora una volta solo nome e numero, impostando le restanti variabili alla stringa vuota.</p> <p>Definire il seguente contatto di lavoro:</p> <ul> <li>Alessandro (detto \"Alex\"), numero +39-345-6789012, mail alex@mail.com,    fax +39-0721-098765, partitaIVA 1234567890A</li> </ul> <p>Esercizio 1246</p> <p>Definire una classe Persona con attributi nome e anno di nascita, forniti tramite parametri e indirizzo, inizialmente impostato alla stringa vuota. Derivare da essa una classe Abbonato, che comprenda il numero di noleggi effettuati e la percentuale di sconto a cui l'utente ha diritto. Ovviamente il numero di noleggi all'inizio \u00e8 zero, mentre lo sconto iniziale \u00e8 del 5% per tutti gli adulti fino a 50 anni e del 10% per i pi\u00f9 grandi (da 50 in su). Ogni 2 noleggi lo sconto aumenta del 5% fino ad un massimo del 50% di sconto sul prezzo di noleggio. Definire una funzione \"noleggiaFilm\" che aggiunge un noleggio all'abbonato, eventualmente aggiornando le informazioni dell'abbonato.</p> <p>Esercizio 1247</p> <p>Definire una classe Veicolo, che contempli fra le sue caratteristiche la possibilit\u00e0 di indicare la velocit\u00e0 massima (in km/h) e che in fase di definizione imposta il numero dei chilometri percorsi a ZERO.</p> <p>Implementare in essa, oltre alle funzioni che ritenete opportune, una funzione chiamata \"faiStrada\" che richiede la velocit\u00e0 da tenere (che dovr\u00e0 essere minore della velocit\u00e0 massima) e il tempo per cui tenerla: la funzione dovr\u00e0 aggiornare il numero di chilometri percorsi.</p> <p>Derivare da questa una classe Autobus, che comprende, oltre alle caratteristiche ereditate, il numero massimo di posti all'interno e il numero di persone attualmente all'interno, da inizializzare a ZERO.</p> <p>Modificare la funzione di <code>__init__</code> in modo tale che il bus non possa avere una velocit\u00e0 massima superiore ai 100 km/h.</p> <p>Implementare una funzione chiamata \"eseguiFermata\" che prende come parametro il numero di persone che salgono e il numero di persone che scendono e aggiorna il numero di persone attualmente presenti nell'autobus.</p> <p> </p>"},{"location":"OOP/003_advanced/","title":"OOP: Caratteristiche avanzate","text":"<p>Vengono descritte qua di seguito alcune caratteristiche avanzate tipiche della OOP che ritroviamo anche in Python.</p>"},{"location":"OOP/003_advanced/#funzioni-operatori","title":"Funzioni operatori","text":"<p>La classe object introduce tutta una serie di funzioni (che ovviamente, tutte le classi ereditano) per standardizzare una serie di comportamenti Partiamo da un esempio per chiarire l'utilit\u00e0 del concetto: definiamo la classe Punto2D che descrive un punto nel piano cartesiano</p> <pre><code>class Punto2D:\n    def __init__ (self, x, y):\n        self.x = x\n        self.y = y\n</code></pre> <p>Definiamo due oggetti della classe Punto2D e proviamo a sommarli</p> <pre><code>a = Punto2D (2, 3)\nb = Punto2D (1, 1)\nc = a + b           # ERRORE!!!\n</code></pre> <p>Per poter definire l'operazione di addizione all'interno della nuova classe basta reimplementare la funzione abbinata <code>__add__</code> : faremo in modo che la somma di due punti crei un nuovo punto con le coordinate uguali alla somma delle coordinate dei punti sommati.</p> <pre><code># nella classe Punto2D\ndef __add__ (self, other):\n    xS = self.x + other.x\n    yS = self.y + other.y\n    return Punto2D( xS, yS )\n</code></pre> <p>Quindi da ora in poi...</p> <pre><code># c diventa un Punto2D di coordinate x = 2 + 1 = 3 e y = 3 + 1 = 4\nc = a + b\n</code></pre> <p>Per definire altri tipi di operazioni basta consultare la tabella qua sotto.</p> Operatore Espressione Funzione interna per l'overloading print print ( a ) <code>a.__str__()</code> Addizione a + b <code>a.__add__(b)</code> Sottrazione a - b <code>a.__sub__(b)</code> Moltiplicazione a * b <code>a.__mul__(b)</code> Divisione a / b <code>a.__truediv__(b)</code> Divisione Intera a // b <code>a.__floordiv__(b)</code> Potenza a ** b <code>a.__pow__(b)</code> Modulo a % b <code>a.__mod__(b)</code> Minore a &lt; b <code>a.__lt__(b)</code> Minore o uguale a &lt;= b <code>a.__le__(b)</code> Uguale a == b <code>a.__eq__(b)</code> Diverso a != b <code>a.__ne__(b)</code> Maggiore a &gt; b <code>a.__gt__(b)</code> Maggiore o uguale a &gt;= b <code>a.__ge__(b)</code> <p>La funzione <code>__str__</code> permette ad un oggetto della classe di essere utilizzato nella funzione <code>print()</code>. Questa cosa dovremmo gi\u00e0 averla capita...</p> <p>Le funzioni aritmetiche (addizione, sottrazione, etc...) prendono come parametro 2 oggetti di una classe (tipicamente coi 2 parametri <code>self</code> , <code>other</code>)  e ritornano sempre un oggetto della classe stessa!</p> <p>Ripropongo la funzione <code>__add__</code> della classe <code>Punto2D</code> implementata poche righe fa:</p> <pre><code># come vedete la funzione prende 2 parametri, che rappresentano\n# altrettanti oggetti\ndef __add__ (self, other):\n    xS = self.x + other.x\n    yS = self.y + other.y\n    # poich\u00e9 questa funzione implementa la somma fra 2 Punto2D, ritorna\n    # un oggetto Punto2D che rappresenta la somma dei 2 punti identificati\n    # da self e other\n    return Punto2D( xS, yS )\n</code></pre> <p>Le funzioni di confronto (minore, maggiore, diverso, etc...) prendono come parametro i 2 oggetti da confrontare e ritornano un booleano.</p> <p>Ad esempio per implementare l'operatore minore bisogna definire la funzione <code>__lt__</code>. Essa prende i 2 parametri <code>self</code>, <code>other</code> che rappresentano i 2 oggetti.  Se la funzione ritorna <code>True</code> significa che il primo oggetto \u00e8 minore del secondo, altrimenti, se ritorna <code>False</code> significa che il primo oggetto NON \u00e8 minore del secondo.</p> <pre><code># dati 2 punti, uno \u00e8 minore dell\u2019altro \n# se la sua distanza dal centro \u00e8 minore.\ndef __lt__ ( self , other ):\n    if self.distanzaDalCentro() &lt; other.distanzaDalCentro():\n        return True\n    return False\n</code></pre> <p>Spero sia chiaro! Come al solito... per capire meglio ci sono gli esercizi :)</p>"},{"location":"OOP/003_advanced/#esercizi-sulle-funzioni-operatori","title":"Esercizi sulle funzioni operatori","text":"<p>Esercizio 1361</p> <p>Definire la classe Frazione, con parametri numeratore e denominatore.</p> <p>Definire in essa le funzioni:</p> <ul> <li> <p><code>valuta()</code>: ritorna il valore reale che la frazione rappresenta. Ad   esempio se il numeratore \u00e8 39 e il denominatore \u00e8 10, allora la   funzione valuta() ritorna 3.9.</p> </li> <li> <p><code>semplifica()</code>: riduce ai minimi termini i generatori (numeratore e   denominatore) della frazione. Ad esempio se il numeratore \u00e8 25 e il   denominatore \u00e8 30, allora si possono entrambe dividere per 5 ( il MCD   fra 25 e 30) ottenendo 5 e 6.</p> </li> </ul> <p>Definire inoltre le funzioni operatori per somma, moltiplicazione, diverso e minore o uguale.</p> <p>Dichiarare almeno 3 frazioni con cui testare le funzioni implementate.</p> <p>Esercizio 1362</p> <p>Definire la classe Rettangolo, con attributi base e altezza e metodi area e perimetro. Implementare in essa le funzioni aritmetiche, che operano sugli attributi della classe e le funzioni di confronto, che confrontano i rettangoli in base alle aree. In pratica la somma di 2 rettangoli crea un rettangolo che ha base la somma delle basi e altezza la somma delle altezze. Per quanto riguarda il confronto un rettangolo \u00e8 minore di un altro se la sua area \u00e8 minore. Dichiarare 2 rettangoli e procedete a testare le operazioni aritmetiche e di confronto implementate.</p> <p>Esercizio 1363</p> <p>Definire la classe Reale (che rappresenta un numero reale) con l'unico attributo float che rappresenta il suo valore. Definire in essa le funzioni operatore per somma, sottrazione, divisione, maggiore, uguale.</p> <p>Derivare da essa la classe Complesso, che rappresenta un numero complesso. Reimplementare le funzioni ereditate secondo necessit\u00e0. Definire inoltre la funzione modulo(), che calcola il modulo del numero e la funzione coniugato() che ritorna un oggetto Complesso che rappresenta il complesso coniugato del numero iniziale.</p> <p>Definire i numeri reali: 4.5 , -7.2 , 9.1 Testare le funzioni implementate. Definire i numeri complessi: 4 + 5i , -7 + 3i Testare le funzioni implementate.</p> <p>Esercizio 1364</p> <p>Definire la classe DataSemplice, con i due attributi interi che rappresentano i giorni e i mesi. Nella classe DataSemplice i mesi hanno la lunghezza normale (Gennaio ne ha 31, Febbraio 28, etc...) ma non ci sono gli anni e quindi non esistono gli anni bisestili.</p> <p>Presenta una funzione \"isValid()\" che ritorna True se la data rappresentata \u00e8 valida, ovvero la coppia di numeri rappresenta una combinazione giorno/mese esistente, False altrimenti.</p> <p>Presenta una funzione \"contaGiorni()\" che restituisce il numero di giorni trascorsi dal 1 Gennaio alla data rappresentata, se valida. -1 altrimenti. Implementare le funzioni operatori per l'addizione, la sottrazione, il minore e il diverso. Due date si sommano sommando il numero di giorni trascorsi dall'inizio dell'anno (e analogamente si sottraggono). Ad esempio \"01 gen\" + \"02 gen\" fa \"03 gen\".</p> <p>Una data \u00e8 minore di un'altra se \u00e8 precedente all'interno di un anno. Diverso \u00e8 facile...</p> <p>Definire una data per il 3 marzo e una per il 45 settembre. Verificare che la prima \u00e8 valida e la seconda no. Utilizzare la funzione contaGiorni. La seconda dovrebbe restituire -1.</p> <p>Testare le seguenti operazioni:</p> <ul> <li>03 mar + 05 lug</li> <li>03 mar -- 2 feb</li> <li>03 mar &lt; 2 feb</li> <li>05 lug != 2 feb</li> </ul> <p> </p>"},{"location":"basics/000_first/","title":"Introduzione a Python","text":"<p>Python \u00e8 un linguaggio di programmazione moderno, con una sintassi volutamente semplice e facile da imparare, utilizzabile in vari contesti anche molto diversi fra loro:</p> <ul> <li>sviluppo di applicazioni desktop,</li> <li>generazione siti e applicazioni Web,</li> <li>scripting per l'amministrazione di sistema,</li> <li>calcolo scientifico e numerico,</li> <li>gestione database,</li> <li>giochi,</li> <li>grafica 3D,</li> <li>etc...</li> </ul> <p>Se controllate sul sito di riferimento potrete trovare una sezione quotes con le citazioni famose su Python da parte di personaggi famosi delle aziende pi\u00f9 in vista  e una sezione Success Stories che appunto elenca le maggiori  storie di successo ove Python ha contribuito in maniera determinante.</p> <p>Python \u00e8 un linguaggio ideato da Guido van Rossum all'inizio degli anni novanta. Il nome fu scelto (tenetevi alla sedia) per via della sua passione per i Monty Python, un gruppo comico britannico attivo negli anni settanta.  Per rendervi conto della incredibile comicit\u00e0 del gruppo... ecco uno dei primi video su YouTube ottenuto cercando Monty Python ita.  Dura 84 minuti. Noi non supereremo il minuto 4...</p> <p> </p> <p></p>"},{"location":"basics/000_first/#breve-storia","title":"Breve Storia","text":"<p> Come gi\u00e0 citato, Python nasce negli anni novanta, grazie al suo Benevolent Dictator For Life Guido van Rossum.  La storia racconta che durante le vacanze di Natale del 1989, Guido progett\u00f2 questo nuovo linguaggio, cercando di mettere in esso tutte le caratteristiche positive  che aveva trovato negli altri linguaggi di programmazione, provando ad evitare forzature o strutture non lineari.</p> <p>Subito Python diventa uno strumento imprescindibile per l'azienda in cui Guido lavora. Questo fatto e la licenza opensource con cui van Rossum distribuisce la sua creatura determinano la sua fortuna: Python diventa brevemente uno dei linguaggi pi\u00f9 utilizzati e seguiti da una comunit\u00e0 attiva di sviluppatori.</p> <p>Python ha avuto il suo momento di massima espansione con la versione 2.x del linguaggio, rilasciata nel 2000, momento in cui \u00e8 passato  da \"linguaggio di programmazione settoriale\" a \"linguaggio tra i pi\u00f9 utilizzati e conosciuti\".</p> <p>Pochi anni dopo, ci si rende conto che per fare un passo definitivo, il linguaggio deve essere sistemato per funzionare bene in tutte le lingue (e in tutti i set di caratteri), avere una sintassi consistente e facile da dedurre e indovinare ed essere facile da potenziare tramite librerie di supporto.</p> <p>Nel 2008 nasce Python 3.0.</p> <p>Il tempo ha fatto il resto... la versione 2.x di Python ha fatto la storia, ma ormai deve anche rimanerci... Python 3.x \u00e8 attualmente il presente di uno  dei migliori linguaggi di programmazione della seppur breve storia dell'Informatica.</p>"},{"location":"basics/000_first/#linguaggi-compilati-vs-interpretati","title":"Linguaggi compilati vs interpretati","text":"<p>Prima di passare all'installare vera e propria dell'interprete e dell'ambiente di sviluppo Python, concediamoci una breve introduzione generica e generale sui linguaggi di programmazione.</p> <p>Suggerimento</p> <p>Le cose che spiego in questo capitolo non sono banali per chi non ha (ancora) mai programmato con alcun linguaggio. </p> <p>Sentitevi liberi di leggere velocemente questa parte, ma ricordatevi di riguardare queste righe almeno una volta all'anno, per meglio apprezzare il livello di comprensione del linguaggio che avete raggiunto!</p> <p>I linguaggi di programmazione si dividono in:</p> <ul> <li>linguaggi compilati</li> <li>linguaggi interpretati</li> </ul> <p>Vi dico subito che Python \u00e8 un linguaggio interpretato. Nelle prossime righe cercheremo di capire cosa questo significhi e quale differenza faccia con i linguaggi compilati.</p> <p>Nei linguaggi compilati si scrive il codice sorgente, un file di testo semplice, nel linguaggio proprio (ad esempio nel linguaggio C, che \u00e8 un linguaggio compilato). Quando si \u00e8 pronti con il codice si passa alla compilazione.  Banalmente ogni linguaggio compilato \u00e8 fornito di un compilatore, che \u00e8 in grado di tradurre il codice dal linguaggio di partenza al linguaggio macchina, creando un file eseguibile ovvero un file contenente una sequenza di istruzioni direttamente eseguibili dalla macchina (in linguaggio macchina appunto).</p> <p></p> <p>Creato l'eseguibile, il compilatore non serve pi\u00f9. Possiamo eseguire il nostro programma semplicemente invocando l'eseguibile.</p> <p>Nei linguaggi interpretati si scrive il codice sorgente, sempre un file di testo semplice, nel linguaggio proprio (ad esempio nel linguaggio Python). Quando si \u00e8 pronti con il codice, la preparazione del programma \u00e8 terminata. Quando si vuole eseguire il programma si invoca l'interprete, che legge il codice del programma e sa esattamente eseguire ogni istruzione scritta, in modo tale da interpretare il programma da eseguire.</p> <p></p> <p>Ogni volta che si vuole rieseguire il programma, riparte l'interpretazione del codice.</p> <p>Questa importante caratteristica porta inevitabilmente importanti differenze insite nei linguaggi. Ne elenco alcune:</p> <ul> <li>in fase di esecuzione, i programmi generati da linguaggi compilati     sono generalmente pi\u00f9 veloci. Infatti eseguono direttamente codice     nativo (pronto per essere eseguito dal compilatore) invece di     doverlo interpretare al volo;</li> <li>in fase di produzione, i programmi interpretati sono subito pronti     per l'interpretazione e il testing, senza dover ad ogni minima     modifica ricompilare.</li> <li>in fase di esecuzione, i programmi generati da linguaggi compilati     utilizzano meno memoria. Infatti per eseguire un programma generato     da compilazione serve solo il programma stesso, mentre per eseguire     un programma interpretato serve il programma e l'interprete;</li> <li>in fase di esecuzione, i programmi interpretati gestiscono la     memoria in maniera pi\u00f9 semplice e (spesso) efficiente perch\u00e9     l'interprete si occupa di filtrare le (sciocchezze) richieste del     programma.</li> <li>per ogni sistema operativo supportato \u00e8 necessario procedere ad una     ricompilazione del codice sorgente. Infatti gli eseguibili generati     dalla compilazione dipendono dal sistema operativo ove essi sono     compilati;</li> <li>il codice di un programma interpretato va bene cos\u00ec com'\u00e8 per ogni     sistema operativo per cui esiste un interprete del linguaggio;</li> <li>i programmi compilati vengono eseguiti direttamente dal dispositivo     ospite e quindi possono fare grandi danni</li> <li>i programmi interpretati vengono eseguiti tramite l'interprete del     linguaggio che pu\u00f2 controllare che essi non facciano danni     all'hardware o alla memoria del dispositivo.</li> </ul> <p>Insomma, come si vede, ci sono luci e ombre in entrambi gli approcci. Di certo l'approccio dei linguaggi interpretati \u00e8 quello pi\u00f9 semplice e sicuro.</p> <p>Python, per massimizzare i punti a favore e ottenere il miglior comportamento possibile, pu\u00f2 utilizzare un approccio misto, sbilanciato dalla parte dell'interpretazione:</p> <p>Note</p> <p>L'interprete Python, alla prima esecuzione del codice, fa una sorta di compilazione, generando un programma (bytecode, estensione .pyc) non direttamente eseguibile dal dispositivo, ma direttamente eseguibile dalla parte dell'interprete preposta allo scopo: la macchina virtuale.</p> <p>In questo modo, dalla seconda esecuzione in poi, la velocit\u00e0 della stessa sar\u00e0 paragonabile (in molti casi identica) a quella dei linguaggi compilati.</p> <p></p> <p>Tutto il processo descritto \u00e8 completamente automatico: il programmatore non deve far altro che scrivere codice e testarne l'esecuzione nell'ambiente adatto.</p> <p> </p>"},{"location":"basics/001_install/","title":"Installazione","text":"<p>Per lavorare con Python basta avere l'interprete Python con tutte le sue librerie pi\u00f9 importanti installato nel proprio sistema, utilizzare il blocco note (o un altro editor di testo semplice) per scrivere il codice e infine richiederne l'esecuzione all'interprete Python tramite riga di comando.</p> <p>Capite che questa modalit\u00e0 di lavoro, bench\u00e9 funzionante e sufficiente, risulti complicata e inadatta a chi deve concentrarsi sull'imparare il linguaggio piuttosto che far funzionare tutto il sistema solo per eseguire la prova di un semplice programma.</p> <p>Per risolvere questo problema e favorire lo sviluppo semplice e veloce delle applicazioni  (RAD: Rapid Application Development) si \u00e8 addirittura inventata una nuova categoria di software, denominata IDE (Integrated Development Environment).</p> <p>Gli IDE sono software che contengono pi\u00f9 o meno tutto quanto necessario per sviluppare una applicazione in uno o pi\u00f9 linguaggi di programmazione: un editor di testo per la scrittura del codice, il compilatore e/o l'interprete del linguaggio (o dei linguaggi, se l'IDE ne supporta pi\u00f9 di uno),  gli strumenti per il debug, ovvero per la correzione degli errori del software,  e... tutto quello che serve!</p> <p>Gli IDE pi\u00f9 utilizzati per sviluppare in Python sono:</p> <ul> <li>PyCharm     (multipiattaforma e multilinguaggio), molto completo, ma anche molto pesante;     sviluppato specificatamente per lo sviluppo in Python.</li> <li>Visual Studio Code     (multipiattaforma e multilinguaggio), sviluppato da Microsoft per sviluppare su tutti i     linguaggi che essa supporta e utilizza (tra cui, ovviamente, Python!)</li> <li>XCode     (Specifico per MacOS, multilinguaggio) l'IDE di casa Apple, pu\u00f2 essere configurato per lavorare     con Python. </li> <li>IDLE, il pi\u00f9 semplice IDE per     Python, scritto in Python, multipiattaforma, disponibile     nell'installer ufficiale di Python.</li> <li>Thonny, (multipiattaforma, specifico per Python), un IDE     progettato specificatamente per imparare a programmare in Python. Semplice, leggero,     con supporto per MicroPython (Python per piccoli dispositivi).</li> </ul> <p>Non la facciamo lunga: noi utilizzeremo Thonny! E lo faremo per i seguenti motivi:</p> <ul> <li>Thonny \u00e8 scritto in Python e disponibile per Windows, MacOS, Linux,     Raspberry. Tutti sistemi operativi che potenzialmente useremo.</li> <li>Thonny \u00e8 scritto non da una azienda o da una comunit\u00e0, ma     direttamente dal dipartimento di informatica dell'universit\u00e0 di     Tartu (Estonia)</li> <li>Thonny \u00e8 stato scritto specificatamente per la didattica con Python.</li> <li>Thonny installa una copia di Python, rendendo semplicissima     l'installazione dell'ambiente completo per tutti gli utenti.</li> <li>Thonny fornisce una interfaccia semplice anche per l'interazione     con pip, il gestore di pacchetti Python (ne parleremo in seguito)</li> </ul> <p>Insomma, un IDE a misura degli studenti! </p> <p>Le istruzioni che seguono spiegano come installare Thonny sui vari sistemi operativi (in rigoroso ordine alfabetico)!</p>"},{"location":"basics/001_install/#installare-thonny-su-linux","title":"Installare Thonny su Linux","text":"<p>Installare software su Linux \u00e8 affare allo stesso momento semplicissimo e complicatissimo. Semplicissimo perch\u00e9 con il comando giusto, i sistemi operativi basati su Linux eseguono download, installazione e prima configurazione del software in pochissimo tempo. Complicatissimo perch\u00e9 scegliere il comando giusto richiede una minima conoscenza del sistema che non sempre tutti gli utenti hanno e che varia da sistema a sistema.</p> <p>In generale, ho schematizzato i comandi da terminale per tutte le distribuzioni pi\u00f9 famose. Se pensate di non rientrare in nessuna di queste, contattatemi e vedremo insieme cosa fare:</p> <pre><code># Debian, Rasbian, Ubuntu, Mint e altre\n$ sudo apt install python3 thonny\n\n# Fedora, Red Hat, Mandriva, OpenSuse e altre\n$ sudo dnf install python3 thonny\n\n# Arch Linux, Manjaro, Chakra, Parabola e altre\n$ sudo pacman -S python3 thonny\n</code></pre> <p>Questo installer\u00e0 l'ultima versione di Python 3.x e Thonny sul vostro sistema, rendendolo pronto all'uso! Tutto qui! Passate a testare l'installazione con l'Hello World Test in fondo!</p>"},{"location":"basics/001_install/#installare-thonny-su-macos","title":"Installare Thonny su MacOS","text":"<p>Per installare Thonny su Mac, andate sul sito di Thonny (https://thonny.org/), scaricate il pacchetto di installazione per Mac e installatelo sul vostro sistema. Se avete gi\u00e0 installato sul vostro Mac un pacchetto .pkg non avrete alcuna difficolt\u00e0!</p> <p></p> <p>Terminata l'installazione verificate che tutto funzioni con gli Hello World Test  del prossimo capitolo.</p>"},{"location":"basics/001_install/#installare-thonny-su-windows","title":"Installare Thonny su Windows","text":"<p>Per installare Thonny su Windows, andate sul sito di Thonny (https://thonny.org/), scaricate il pacchetto di installazione per Windows e installatelo sul vostro sistema.</p> <p></p> <p>C'\u00e8 qualcuno che pensa evidentemente che gli utenti di Windows siano tutti tonti: non avete idea di quanti tutorial si trovano su YouTube per installare Thonny. Nel dubbio ne aggiungo qui uno...</p> <p> </p> <p></p>"},{"location":"basics/001_install/#thonny-impostazioni-di-base","title":"Thonny, impostazioni di base","text":"<p>Per accedere al men\u00f9 delle impostazioni di Thonny, selezionate la voce STRUMENTI ---&gt; OPZIONI.</p> <p>Nella scheda GENERALE vi invio a selezionare la voce evidenziata. Le altre sono a vostro piacimento:</p> <p></p> <p>Nella scheda EDITOR ci sono le opzioni pi\u00f9 importanti per lavorare bene durante la scrittura del software.  Nel laboratorio sono impostate cos\u00ec. Quelle sottolineate sono quelle assolutamente necessarie!!!</p> <p></p> <p>Nella scheda RUN &amp;&amp; DEBUG c'\u00e8 solo una opzione interessante per noi: forza il salvataggio automatico dei programmi da eseguire!</p> <p></p> <p>Nella scheda ASSISTANT abbiamo disabilitato tutto! Durante l'esecuzione andremo a leggere i suggerimenti direttamente dall'interprete nella shell!</p> <p></p> <p></p> <p>Spero tutto questo sia sufficiente. Altrimenti contattatemi per avere aiuto. Appena avete finito procedete gli Hello World Test  del prossimo capitolo.</p> <p> </p>"},{"location":"basics/100_basics/","title":"Prime cose","text":"<p>In questo primo capitolo cercheremo di fare semplicemente i primi passi con il linguaggio di programmazione Python e le prime esperienze con l'IDE Thonny. la cosa pi\u00f9 semplice (e intelligente) per capire \u00e8 provare a fare insieme!</p> <p>Quando si comincia a studiare un nuovo linguaggio, il primo programma che si scrive di solito \u00e8 il cosiddetto \"Hello, World!\".  \u00c8 un semplice programma che scrive semplicemente \"Hello, World!\", ma in realt\u00e0 serve per fare un numero incredibile di cose:</p> <ul> <li>familiarizzare con l'IDE, il nuovo ambiente di programmazione</li> <li>provare a scrivere un primo programma</li> <li>riuscire nella fase di compilazione/interpretazione/esecuzione del codice</li> <li>conoscere l'istruzione principale di output</li> <li>superare psicologicamente...</li> </ul> <p>Hello World Programs</p> <p>Gli Hello World sono programmi che scrivono (o mostrano) semplicemente la scritta \"Hello, World!\".</p> <p>Tutti i linguaggi di programmazione hanno il loro HelloWorld... sembra una cavolata, ma cominciare con il semplice senza sottovalutarlo e assicurandosi di avere tutto chiaro (fino a l\u00ec) \u00e8 sicuramente un'ottima strategia di apprendimento.</p> <p>Noi proveremo a scrivere addirittura due HelloWorld!!! Infatti, essendo Python un linguaggio interpretato, \u00e8 possibile accedere direttamente all'interprete Python ed eseguire codice riga per riga, oppure creare un modulo, ovvero un file di testo  in cui si scrive codice Python e lo si salva con estensione .py.</p> <p>Cominciamo con l'interprete.</p>"},{"location":"basics/100_basics/#linterprete-python","title":"L'interprete Python","text":"<p>Per accedere all'interprete Python, basta aprire Thonny e guardare in basso! Se l'interprete non \u00e8 aperto, attivarlo dal men\u00f9 come da immagine.</p> <p></p> <p>L'interprete si mostra con il suo tipico <code>prompt</code> fatto con i 3 maggiori <code>&gt;&gt;&gt;</code>. Quando vedete il prompt significa che l'interprete \u00e8 pronto a ricevere ed eseguire i vostri comandi. A questo punto basta digitare l'istruzione <code>print(\"Hello, World!\")</code> come nell'immagine seguente:</p> <p></p> <p>Tutto qui! Primo livello superato :)</p> <p>Potete usare il prompt per eseguire una o pi\u00f9 righe di codice e vedere che cosa succede, potete usarlo come calcolatrice, potete... farci tutto quello che Python \u00e8 in grado di fare (tanta roba) in maniera... un p\u00f2 scomoda (ma adatta a fare prove, a valutare comandi, etc...). Ecco alcuni esempi di utilizzo dell'interprete. Le spiegazioni arriveranno (tutte!!!) successivamente. Per adesso... imparate provando!</p> Esempi da eseguire nell'interprete<pre><code>&gt;&gt;&gt; print(\"Ciao\")\nCiao\n\n&gt;&gt;&gt; 3 + 5\n8\n\n&gt;&gt;&gt; 5 / 5\n1.0\n\n&gt;&gt;&gt; type(1.0)\n&lt;class 'float'&gt;\n\n&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n\n&gt;&gt;&gt; numero = 5 * 2\n&gt;&gt;&gt; numero\n10\n\n&gt;&gt;&gt; numero = numero / 4\n&gt;&gt;&gt; print(numero)\n2.5\n</code></pre>"},{"location":"basics/100_basics/#moduli-python-file-py","title":"Moduli Python (file .py)","text":"<p>Praticamente la cosa pi\u00f9 difficile che abbiamo visto finora \u00e8 che Python chiama i suoi file di codice (in programmazione si dicono file sorgente) con il nome di moduli. Per creare un modulo, ovvero un file con estensione .py, basta aprire Thonny, scrivere nell'editor un p\u00f2 di codice e premere SALVA!</p> <p>Noi molto semplicemente proveremo di nuovo con un HelloWorld! Scrivete ancora il seguente codice:</p> <pre><code>print(\"Hello, World!\")\n</code></pre> <p>Poi premete <code>F5</code> per avviare l'esecuzione. Thonny prima di eseguire un modulo, salva su file le modifiche che avete fatto! Se non avete ancora salvato nulla, parte la procedura di salva con nome:</p> <p></p> <p>Tutto qui!</p>"},{"location":"basics/100_basics/#istruzione-print","title":"Istruzione print","text":"<p>La prima istruzione che abbiamo incontrato \u00e8 la classica <code>print()</code>. Serve per visualizzare i suoi argomenti!</p> prove con l'istruzione print nell'interprete<pre><code>&gt;&gt;&gt; print(\"Ciao\")\nCiao\n\n&gt;&gt;&gt; print(\"Ciao\",\"a tutti\")\nCiao a tutti\n\n&gt;&gt;&gt; print(\"Ciao\", 'ciao', \"ne\")\nCiao ciao ne\n</code></pre> <p>Non mi sembra molto complicato...</p> <ul> <li>Potete scrivere quante robe volete</li> <li>Ogni cosa va tra apici, singoli o doppi... basta che ci sia coerenza</li> <li>Per scrivere pi\u00f9 cose basta separarle nella print con una virgola e poi queste verranno scritte con uno spazio di separazione</li> </ul>"},{"location":"basics/100_basics/#commenti-al-codice","title":"Commenti al codice","text":"<p>Se abbiamo paura di dimenticarci qualcosa... oppure vogliamo spiegare una o pi\u00f9 righe di codice in italiano, possiamo utilizzare i commenti!</p> <pre><code># Questo \u00e8 un commento\n# serve a spiegare in italiano alcune cose...\n# ad esempio:\n# l\u2019istruzione print() visualizza sullo schermo il suo contenuto\nprint(\"Hello, World!\")\n</code></pre> <p>Come vedete, ogni commento inizia con un <code>#</code> e fino a fine riga potete scrivere ci\u00f2 che volete.</p> <p>I commenti semplificano il lavoro di rilettura del codice, soprattutto quando le righe di codice si avvicinano pericolosamente alle centinaia. Inoltre, cosa ancora pi\u00f9 importante, piacciono al vostro prof! Quindi scriveteceli! Sempre! Spiegate in ogni porzione di codice l'idea che vi frulla in mente e quello che volete fare per realizzarla!</p>"},{"location":"basics/100_basics/#esercizi","title":"Esercizi","text":"<p>Per ognuno dei seguenti quesiti, creare un modulo (un file .py) per eseguire la richiesta dell'esercizio. Tipicamente i file degli esercizi si chiamano <code>esNUMERO.py</code>, ad esempio <code>es1.py</code> oppure <code>es001.py</code> e nelle prime righe si trova (come commento) il nome di chi lo ha svolto e una descrizione dell'esercizio. Una cosa tipo:</p> <pre><code># Andrea Diamantini\n# Esercizio 1\n\n(...codice...)\n</code></pre> <p></p> <p>Esercizio 1</p> <p>Visualizzare sullo schermo la scritta seguente:</p> <pre><code>Ciao, mi chiamo Pinco Pallino\n</code></pre> <p>Esercizio 2</p> <p>Visualizzare sullo schermo la scritta seguente (andando a capo quando necessario):</p> <pre><code>Ciao, \nmi chiamo \nPinco Pallino\n</code></pre> <p>Esercizio 3</p> <p>Visualizzare sullo schermo il seguente disegno:</p> <pre><code>+ + + +\n+     +\n+     +\n+ + + +\n</code></pre> <p>Esercizio 4</p> <p>Visualizzare sullo schermo il seguente disegno:</p> <pre><code>     +\n    +++\n   +++++\n  +++++++\n +++++++++\n+++++++++++\n     +\n     +\n</code></pre> <p> </p>"},{"location":"basics/101_var/","title":"Variabili e Operatori","text":"<p>In questo capitolo introdurremo due fra i concetti pi\u00f9 importanti della programmazione di base in Python. Attenzione alle definizioni e agli esempi!!!</p> <p>Per rendere semplice e veloce provare i concetti appresi con un p\u00f2 di codice, faremo largo uso dell'interprete. Obbligatorio provare il codice che vedete sul vostro computer. </p>"},{"location":"basics/101_var/#variabili","title":"Variabili","text":"<p>Una variabile \u00e8 una porzione di memoria identificata tramite un identificativo univoco (nome, nell'esempio),  che permette di memorizzare un valore di un qualche tipo. Vediamo alcuni semplici esempi:</p> Semplici esempi di variabili dichiarate nell'interprete<pre><code>&gt;&gt;&gt; nome = \"Pippo\"\n&gt;&gt;&gt; print(nome)\nPippo\n\n&gt;&gt;&gt; # A me non piacciono i nomi di variabile con gli accenti o gli apostrofi...\n&gt;&gt;&gt; eta = 8\n&gt;&gt;&gt; print(eta)\n8\n</code></pre> <p>Come si vede per definire una variabile, bisogna fare 3 cose:</p> <ol> <li>scegliere un nome per la variabile (ad esempio: altezza)</li> <li>decidere un valore da assegnargli (ad esempio: 143)</li> <li>assegnare alla variabile il valore tramite l'operatore =</li> </ol> <p>Scriviamo un esempio:</p> <pre><code>&gt;&gt;&gt; altezza = 143\n</code></pre> <p>I nomi delle variabili sono identificatori univoci e per esserlo devono rispettare le seguenti regole:</p> <ul> <li>essere composto solo da lettere (a-z, A-Z), numeri (0-9) e underscore ( il carattere _ , ad esempio per <code>altezza_rettangolo</code> )</li> <li>non pu\u00f2 iniziare con un numero</li> <li>non contenere spazi o caratteri speciali (ad esempio <code>altezza rettangolo</code> con lo spazio, non va bene!)</li> <li>non essere uguale a nessuna delle parole chiave del linguaggio (ad esempio, non puoi chiamare una variabile <code>print</code>)</li> </ul> <p>Python \u00e8 CASE-SENSITIVE</p> <p>Significa che Python fa differenza fra MAIUSCOLE e minuscole...  <code>var</code> , <code>Var</code> , <code>VAR</code> sono tre nomi diversi</p> <p>Fin qui \u00e8 facile. Occhio adesso per\u00f2: Python \u00e8 un linguaggio Strongly Typed,  il che significa che in ogni istante \u00e8 sempre possibile sapere che tipo di dato c'\u00e8 in una variabile. </p> <p>Faccio un esempio banale, che pu\u00f2 aiutare a capire:</p> <pre><code>&gt;&gt;&gt; # \"7\" \u00e8 una stringa, una parola\n&gt;&gt;&gt; prova = \"7\"\n&gt;&gt;&gt; # Python sa che prova contiene una stringa. Per noi \u00e8 \"7\"\n&gt;&gt;&gt; print(prova)\n7\n\n&gt;&gt;&gt; # 7 senza apici \u00e8 un valore numerico, un numero\n&gt;&gt;&gt; prova = 7\n&gt;&gt;&gt; # Python adesso sa che la variabile prova contiene un numero. Per noi \u00e8 comunque 7\n&gt;&gt;&gt; print(prova)\n7\n</code></pre> <p>Praticamente in Python una variabile esiste solo quando \u00e8 assegnata di un valore, tramite l'operatore <code>=</code> (di cui parleremo fra un attimo). Il nome scelto, con le regole descritte sopra, serve solo da etichetta per ritrovare quel valore (che... \u00e8 la variabile)!!!</p> <p>Se siete curiosi di sapere anche voi il tipo di dato contenuto in una variabile, potete verificarlo utilizzando la funzione predefinita <code>type()</code>.</p> Prove con type<pre><code>&gt;&gt;&gt; var = 5\n&gt;&gt;&gt; type(var)\n&lt;class 'int'&gt;\n\n&gt;&gt;&gt; var = 5.0\n&gt;&gt;&gt; type(var)\n&lt;class 'float'&gt;\n\n&gt;&gt;&gt; var = \"5\"\n&gt;&gt;&gt; type(var)\n&lt;class 'str'&gt;\n</code></pre>"},{"location":"basics/101_var/#operatore-di-assegnazione","title":"Operatore di assegnazione","text":"<p>Adesso dico una cosa che fino a qui io ho dato per scontato e che voi non avevate ancora pensato. </p> <p>In Python l'operatore <code>=</code> non assomiglia neanche un p\u00f2 all'operatore <code>=</code> della matematica.  Anzi... per chi inizia a programmare, forse \u00e8 l'operatore pi\u00f9 complicato.</p> <p>In matematica scrivo tranquillamente <code>5 + 3 = 8</code> e questa cosa significa che la quantit\u00e0 a destra \u00e8 uguale alla quantit\u00e0 a sinistra. Infatti potrei anche scrivere <code>8 = 5 + 3</code> e tutto avrebbe ancora perfettamente senso.</p> <p>In Python qualunque delle espressioni sopra da errore:</p> <pre><code>&gt;&gt;&gt; 5 + 3 = 8\nSyntaxError...\n</code></pre> <p>L'operatore <code>=</code> in Python non serve per fare le uguaglianze ma \u00e8 un operatore di assegnazione, che funziona in un modo molto preciso: prende la quantit\u00e0 scritta a destra dell'operatore, la <code>valuta</code> (ovvero, tiene conto del valore e del tipo presenti) e la assegna al nome di variabile che \u00e8 presente a sinistra.</p> Esempi di assegnazione<pre><code>&gt;&gt;&gt; a = 5  # prendo il valore 5 e lo assegno ad una variabile di nome a\n&gt;&gt;&gt; b = a  # valuto il valore di a (vale 5) e lo assegno ad una variabile di nome b\n&gt;&gt;&gt; b      # Ovviamente, b vale...\n5\n</code></pre> <p>Invece se scrivo...</p> Uso errato dell'operatore di assegnazione<pre><code>&gt;&gt;&gt; 5 = c  # valuto il valore di c (non so quale sia) e vorrei assegnarlo... (no no no no...)\nSyntaxError...\n</code></pre> <p>Spero sia tutto chiaro... Prima di procedere oltre, qualche esercizio di prova.</p>"},{"location":"basics/101_var/#esercizi-semplici","title":"Esercizi semplici","text":"<p>Esercizio 101</p> <p>Definire la variabile <code>nome</code> con valore il proprio nome e la variabile <code>cognome</code> con valore (indovina...). Visualizzare il contenuto delle variabili (con <code>print</code>) ed il tipo contenuto in esse (con <code>type</code>).</p> Esempio con il nome<pre><code>nome = 'Andrea'\nprint(\"Nome:\", nome, type(nome))\n</code></pre> <p>Esercizio 102</p> <p>Definire le seguenti variabili:</p> <ul> <li>sesso (una lettera, 'M' oppure 'F')</li> <li>data di nascita (in realt\u00e0 3 variabili per 3 numeri: giorno, mese, anno)</li> <li>comune di nascita (ad esempio 'Senigallia')</li> <li>la provincia (2 lettere, ad esempio 'AN')</li> </ul> <p>Visualizzare il contenuto delle variabili (con <code>print</code>) ed il tipo contenuto in esse (con <code>type</code>).</p> <p>Esercizio 103</p> <p>yyy</p> <p>Esercizio 104</p> <p>zzz</p>"},{"location":"basics/101_var/#numeri","title":"Numeri","text":"<p>Python considera i seguenti tipi numerici:</p> Tipo Oggetto Descrizione Numeri Interi <code>int</code> I numeri interi (secondo Python).  Il pi\u00f9 grande (o pi\u00f9 piccolo) intero rappresentabile dipende dalla quantit\u00e0 di memoria presente nella macchina. Numeri Reali <code>float</code> I numeri reali (secondo Python), tipicamente definiti a virgola mobile (floating point numbers)  Sono rappresentabili numeri da  <code>-1.797693134862316 e308</code> a <code>1.797693134862316 e308</code> Valori Booleani <code>bool</code> I valori di verit\u00e0 dell'algebra booleana.  Utilizzano i valori <code>True</code> oppure <code>False</code>. <p>Mi sembra facile da capire:  un numero intero \u00e8 un qualsiasi numero, positivo o negativo, senza virgola.  Un numero reale \u00e8 un qualsiasi numero con la virgola, solo che in Python il separatore decimale \u00e8 il punto!!!. </p> <p>Quindi:</p> <pre><code>a = 5     # intero\nb = 5.0   # reale\n# ... e cos\u00ec via...\n</code></pre> <p>I valori booleani sono solo <code>True</code> o <code>False</code>:</p> <pre><code>c = True\nd = False\n</code></pre> <p>Gli operatori abbinati a questi tipi di dati sono elencati, con esempi e spiegazione, sotto.</p>"},{"location":"basics/101_var/#operatori-aritmetici","title":"Operatori Aritmetici","text":"<p>Non credo ci sar\u00e0 molto da spiegare sul funzionamento intrinseco degli operatori seguenti, ma va fatta una importante precisazione! Il risultato di una operazione aritmetica in Python \u00e8 un valore, dunque... una variabile! E Python vuole sempre sapere il tipo (oltrech\u00e9 il valore) delle sue variabili!!! Quindi, banalmente... quando c'\u00e8 un float da qualche parte, il risultato sar\u00e0 comunque float. Occhio agli esempi...</p> <p></p> <p>Addizione (Operatore +)</p> <p>Non credo ci sia molto da spiegare su questo operatore...</p> <pre><code>&gt;&gt;&gt; 2 + 2\n4\n\n&gt;&gt;&gt; a = 3.0\n&gt;&gt;&gt; a + 4\n7.0\n</code></pre> <p></p> <p>Sottrazione (Operatore -)</p> <p>Anche qui.. mi sembra facile...</p> <pre><code>&gt;&gt;&gt; 4 - 5\n-1\n\n&gt;&gt;&gt; b = 7.2\n&gt;&gt;&gt; b - 1\n6.2\n</code></pre> <p></p> <p>Moltiplicazione (Operatore *)</p> <p>Tutto sommato, anche questo (operatore) dovrebbe essere semplice...</p> <pre><code>&gt;&gt;&gt; 6 * 3\n18\n\n&gt;&gt;&gt; c = -4.5\n&gt;&gt;&gt; c * 2\n-9.0\n</code></pre> <p></p> <p>Divisione (Operatore /)</p> <p>E come alle elementari... qui le cose si complicano (un p\u00f2)... Fate attenzione all'operatore divisione, perch\u00e9 in Python il risultato di una divisione \u00e8 sempre un numero reale, un <code>float</code>.</p> <pre><code>&gt;&gt;&gt; 7 / 2\n3.5\n\n&gt;&gt;&gt; 6 / 2\n3.0\n</code></pre> <p></p> <p>Divisione Intera (Operatore //)</p> <p>Avendo un operatore con risultato reale, ne esiste anche uno con risultato intero. Di regola questo dovrebbe essere utilizzato con due numeri interi. Il risultato di una divisione intera \u00e8 sempre un intero.</p> <p>Attenzione!</p> <p>I risultati di una divisione intera sono sempre interi e vengono sempre calcolati per troncamento, mai per arrotondamento!!!</p> <pre><code>&gt;&gt;&gt; 7 // 2\n3\n\n&gt;&gt;&gt; 6 // 2\n3\n\n&gt;&gt;&gt; 39 // 10\n3\n</code></pre> <p></p> <p>Modulo (Resto divisione intera, Operatore %)</p> <p>L'operatore modulo, comune a tutti i linguaggi di programmazione, serve per calcolare il resto della divisione intera fra due numeri (interi, ovviamente).</p> <pre><code># 7 diviso 2 fa 3 col resto di 1, quindi...\n&gt;&gt;&gt; 7 % 2\n1\n\n# 6 diviso 2 fa 3 col resto di 0, quindi...\n&gt;&gt;&gt; 6 % 2\n0\n\n# 39 diviso 10 fa 3 col resto di 9, quindi...\n&gt;&gt;&gt; 39 % 10\n9\n</code></pre> <p></p> <p>Elevamento a potenza (Operatore **)</p> <p>Questo operatore, introdotto in Python per mera comodit\u00e0, esegue l'elevamento a potenza di due numeri.</p> <pre><code>&gt;&gt;&gt; 7 ** 2\n49\n\n&gt;&gt;&gt; 6 ** 0\n1\n\n&gt;&gt;&gt; 2 ** 3\n8\n</code></pre> <p></p> <p>La priorit\u00e0 degli operatori aritmetici rispecchia la logica della matematica con moltiplicazione e divisione prima di addizione e sottrazione. Per i raggruppamenti si usano le parentesi tonde <code>(())</code>:</p> <pre><code>7 + 2 * 3           # fa 13\n\n( 7 + 2 ) * 3       # fa 27\n\n( 1 + 8 ) ** 1/2    # fa 4.5!!!! 1 + 8 fa 9, 9 alla 1 fa 1, 9 diviso 2 fa 4.5!!!!!\n\n( 1 + 8 ) ** (1/2)  # fa 3.0!!!!! Okkio...\n</code></pre> <p>Gli esempi, scritti sopra e sotto per semplicit\u00e0 con i numeri interi, funzionano ovviamente con tutti i tipi numerici supportati da Python.</p>"},{"location":"basics/101_var/#operatori-di-confronto","title":"Operatori di confronto","text":"<p>Gli operatori di confronto in Python sono operatori binari il cui risultato \u00e8 sempre un valore booleano!</p> Operatore Descrizione Esempio Risultato <code>==</code> \u00c8 uguale a 5 == 8 False <code>!=</code> \u00c8 diverso da 5 != 8 True <code>&gt;</code> \u00c8 maggiore di 5 &gt; 8 False <code>&lt;</code> \u00c8 minore di 5 &lt; 8 True <code>&gt;=</code> \u00c8 maggiore o uguale a 5 &gt;= 8 False <code>&lt;=</code> \u00c8 minore o uguale a 5 &lt;= 8 True"},{"location":"basics/101_var/#operatori-logici","title":"Operatori Logici","text":"<p>Gli operatori logici in Python sono operatori binari il cui risultato \u00e8 sempre un valore booleano!</p> Operatore Descrizione Esempio Risultato <code>and</code> Congiunzione logica x = 6y = 3x &lt; 10 and y &gt; 1 True <code>or</code> Disgiunzione logica x = 6y = 3x == 5 or y == 5 False <code>not</code> Negazione logica x = 6y = 3not (x == y) True"},{"location":"basics/101_var/#esercizi-sui-numeri","title":"Esercizi sui numeri","text":"<p>Alcuni esercizi semplicissimi per assicurarsi di avere ben compreso la logica dei numeri e degli operatori in Python.</p> <p>Esercizio 121</p> <p>Definire una variabile intera, con un numero a scelta e una variabile reale, anch'essa a piacere. Visualizzare nome, valore e tipo.</p> <p>Esercizio 122</p> <p>Definire le variabili n1,n2 contenenti due nuemri interi a piacere. Calcolare:</p> <ul> <li>n1 + n2</li> <li>n1 - n2</li> <li>n1 * n2</li> <li>n1 / n2</li> <li>n1 // n2</li> <li>n1 % n2</li> <li>n1 ** n2</li> </ul> <p>Verificare il tipo di ognuno dei risultati con la funzione <code>type()</code>.</p> <p>Esercizio 123</p> <p>Definire le variabili r1,r2 contenenti due numeri reali a piacere. Calcolare:</p> <ul> <li>r1 + r2</li> <li>r1 - r2</li> <li>r1 * r2</li> <li>r1 / r2</li> <li>r1 ** r2</li> </ul> <p>Verificare il tipo di ognuno dei risultati con la funzione <code>type()</code>.</p> <p>Esercizio 124</p> <p>Definire le variabili p, q contenenti due numeri interi a piacere. Calcolare:</p> <ul> <li>p &lt; q</li> <li>p == q</li> <li>p != q</li> <li>p &gt;= q</li> </ul> <p>Esercizio 125</p> <p>Definire le variabili a, b, c contenenti tre numeri reali a piacere. Calcolare:</p> <ul> <li>a &lt; b and b &lt; c</li> <li>a == b or a != c</li> <li>not (a != b)</li> </ul>"},{"location":"basics/101_var/#stringhe","title":"Stringhe","text":"<p>Abbiamo gi\u00e0 visto come dichiarare una qualsiasi variabile numerica; per una stringa le cose non sono affatto pi\u00f9 difficili:</p> <pre><code>&gt;&gt;&gt; nome = \"Andrea\"\n&gt;&gt;&gt; print(nome)\nAndrea\n</code></pre> <p>In Python gli oggetti stringa sono definibili tramite l'uso degli apici. Per \"semplificare\" le cose, Python non fa grande differenza fra apici singoli e doppi, ma richiede coerenza nell'utilizzo.</p> <pre><code>&gt;&gt;&gt; primo = \"riso\"\n&gt;&gt;&gt; print(primo)\nriso\n\n&gt;&gt;&gt; secondo = 'carne'\n&gt;&gt;&gt; print(secondo)\ncarne\n</code></pre> <p>l'utilizzo di un tipo di apice permette di inserire con pi\u00f9 semplicit\u00e0 l'altro all'interno della stringa</p> <pre><code>&gt;&gt;&gt; primo = \"penne all'arrabbiata\"\n&gt;&gt;&gt; print(primo)\npenne all'arrabbiata\n\n&gt;&gt;&gt; contorno = 'patate \"duchessa\"'\n&gt;&gt;&gt; print(contorno)\npatate \"duchessa\"\n</code></pre> <p>Nel caso si voglia insistere ad utilizzare un solo tipo di apice, bisogna spiegare a Python quali sono quelli da intendere come semplici caratteri precedendoli con il carattere di escape <code>backslash</code> ( \\ )</p> <pre><code>&gt;&gt;&gt; dessert = \"cornetti con crema \\\"chantilly\\\"\"\n&gt;&gt;&gt; print(dessert)\ncornetti con crema \"chantilly\"\n\n&gt;&gt;&gt; frutta = 'pere \\'abate\\' e prugne secche'\n&gt;&gt;&gt; print(frutta)\npere 'abate' e prugne secche\n</code></pre> <p>Come si vede Python interpreta correttamente le sequenze con apici e caratteri di escape. Gli stessi possono essere utilizzati anche per scrivere caratteri non stampabili, ma utili tipograficamente:</p> Simbolo Descrizione <code>\\n</code> Capo riga <code>\\t</code> tabulazione <p>Vediamo qualche esempio per chiarezza.</p> <pre><code>&gt;&gt;&gt; nome = \"Andrea\\nDiamantini\"\n&gt;&gt;&gt; print(nome)\nAndrea\nDiamantini\n\n&gt;&gt;&gt; scuola = \"Liceo\\tDa Vinci\\nJesi\\t(AN)\"\n&gt;&gt;&gt; print(scuola)\nLiceo Da Vinci\nJesi  (AN)\n</code></pre> <p>Spero sia abbastanza chiaro.</p> <p>Le stringhe supportano l'operatore + per la congiunzione delle stringhe e l'operatore * per la ripetizione delle stesse. Anche qui, un esempio conta pi\u00f9 di mille parole.</p> <pre><code>&gt;&gt;&gt; frutto = \"ba\" + \"na\" * 2\n&gt;&gt;&gt; print(frutto)\nbanana\n\n&gt;&gt;&gt; mitraglia = \"ra\" + \"tta\" * 10\n&gt;&gt;&gt; print(mitraglia) # tutti stecchiti :)\nrattattattattattattattattattatta\n</code></pre> <p>Altra caratteristica delle stringhe in Python \u00e8 che esse supportano la \"concatenazione automatica per vicinanza\". Provo ancora a spiegare con un esempio:</p> <pre><code>&gt;&gt;&gt; gioco = \"cal\" \"cio\"\n&gt;&gt;&gt; print(gioco)\ncalcio\n</code></pre> <p>Se vuoi concatenare una stringa su pi\u00f9 righe, devi usare le parentesi tonde</p> <pre><code>&gt;&gt;&gt; periodoLungo = ( \"Quando uno deve parlare e non ha niente da dire\"\n&gt;&gt;&gt;                  \" dice cose stupide e a volte... le scrive!\" )\n&gt;&gt;&gt; print(periodoLungo)\nQuando uno deve parlare e non ha niente da dire dice cose stupide e a volte... le scrive!\n</code></pre> <p>Ok, pi\u00f9 o meno ci siamo! Qualche esercizio per assicurarsi che sia tutto chiaro e andiamo avanti :)</p>"},{"location":"basics/101_var/#esercizi-sulle-stringhe","title":"Esercizi sulle stringhe","text":"<p>Alcuni semplici esercizi di comprensione sulle stringhe</p> <p>Esercizio 141</p> <p>Definire due variabili contenenti rispettivamente il <code>nome</code> e il <code>cognome</code> di una persona. Definire la variabile <code>NomeCompleto</code> formata dalla sequenza 'sig.' (o 'sig.ra') + uno spazio + il nome + uno spazio + il cognome. Visualizzare le stringhe <code>nome</code>, <code>cognome</code> e <code>NomeCompleto</code> in righe diverse</p> <p>Esercizio 142</p> <p>Definita la stringa </p> <pre><code>es = 'Esercizio 142'\n</code></pre> <p>visualizzare la stringa per 18 volte in 18 righe diverse, una volta per riga (sugg: ricordate che <code>+</code> congiunge, \"\\n\" va a capo e <code>*</code> intero ripete...)</p> <p>Esercizio 143</p> <p>Definire la variabile <code>colore1</code> con un colore a scelta. Ripetere l'operazione per <code>colore2</code>. Definire la stringa <code>bicolore</code> data dal primo colore, uno spazio, la &amp;, un altro spazio e infine il secondo colore.</p> <p>Visualizzare la stringa cos\u00ec definita.</p> <p>Esercizio 144: Nome ed et\u00e0</p> <p>Definire la variabile <code>nome</code> con il proprio nome e la variabile <code>eta</code> con il numero intero che rappresenta la propria et\u00e0. Visualizzare la frase \"Mi chiamo NOME ed ho ETA anni\" ovviamente sostituendo opportunatamente le parole maiuscole con i valori delle variabili definite.</p>"},{"location":"basics/101_var/#f-strings","title":"f-strings","text":"<p>Arrivati a questo punto del corso, siete gi\u00e0 quasi degli espertoni della funzione <code>print()</code> e avrete capito come questa possa visualizzare qualunque tipo di variabile semplicemente per elencazione. Chiarifico subito con un banale esempio:</p> <pre><code>nome = \"Andrea\"\nanni = 18 # ;)\nprint(\"Io mi chiamo\", nome, \"ed ho\", anni, \"anni\")\n</code></pre> <p>Se eseguite questo brillante codice vedrete scritta la frase \"Io mi chiamo Andrea ed ho 18 anni\" con la print che visualizza senza  problemi una stringa e un intero. Se siete a vostro agio con questo tipo di scrittura... saltate questo capitolo </p> <p>In realt\u00e0 questa modalit\u00e0 di visualizzare informazioni risulta un p\u00f2 scomoda:</p> <ul> <li>devi alternare stringhe \"fisse\" con variabili di tutti i tipi</li> <li>devi stare attento agli spazi</li> <li>devi ricordarti le virgole</li> </ul> <p>Insomma, bene... ma non benissimo!</p> <p>Python, nella speranza di fornire uno strumento pi\u00f9 semplice, dalla versione 3.6 ha introdotto il concetto di <code>formatted string literals</code>, abbreviato appunto in <code>f-strings</code>. Qui la documentazione ufficiale.</p> <p>In poche parole, queste sono stringhe precedute da una <code>f</code> (da cui l'abbreviazione del nome), che permettono di visualizzare variabili semplicemente indicando il loro nome dentro parentesi graffe <code>{}</code>. Un esempio e sar\u00e0 chiarissimo:</p> <pre><code>nome = \"Andrea\"\nanni = 28\nprint( f\"Io mi chiamo {nome} ed ho {anni} anni\" )\n</code></pre> <p>Adesso ho corretto l'et\u00e0 </p> <p>Come vedete, la stringa scritta in questo modo risulta pi\u00f9 semplicemente leggibile dal programmatore, non ha le mille virgole di prima e, grazie alle parentesi graffe, evidenzia bene quale parte della stessa espone le variabili da visualizzare.</p> <p>Adesso che le avete viste, sta a voi decidere se utilizzarle oppure no!</p> <p>Suggerimento</p> <p>Perch\u00e8 non provate a togliere la <code>f</code> davanti per vedere cosa succede se scrivo solo:</p> <p><code>print( \"Io mi chiamo {nome} ed ho {anni} anni\" )</code></p> <p>?</p>"},{"location":"basics/101_var/#input-valori","title":"Input valori","text":"<p>La seconda istruzione Python che andiamo a introdurre si chiama <code>input</code> e permette all'utente, ovvero colui che esegue il programma, di inserire un valore. Vediamo un esempio:</p> <pre><code># la funzione input permette a chi utilizza il programma di inserire informazioni\nnome = input(\"Come ti chiami? \")\nprint(\"Ciao\", nome)\n</code></pre> <p>Quando si esegue questo codice vedremo qualcosa tipo:</p> <pre><code>Come ti chiami? Andrea\nCiao Andrea\n</code></pre> <p>Faccio un'altra prova, giusto per essere sicuro che abbiamo capito:</p> <pre><code>age = input(\"Quanti anni hai? \")\nprint(f\"Ho {age} anni\")\n</code></pre> <p>Mi sembra una istruzione davvero semplice... purtroppo l'errore \u00e8 dietro l'angolo...</p> <pre><code>&gt;&gt;&gt; n = input(\"Numero: \") # inserisci 6\n&gt;&gt;&gt; m = input(\"Numero: \") # inserisci 4\n&gt;&gt;&gt; print(n + m)          # Tu pensi che scriver\u00e0 10, invece...\n64\n</code></pre> <p>Python non \u00e8 diventato matto stamattina... la funzione <code>input</code> restituisce sempre e solo stringhe, come possiamo verificare con la funzione <code>type</code>:</p> <pre><code>&gt;&gt;&gt; n = input(\"Numero: \") # inserisci 6\n&gt;&gt;&gt; print(n, type(n))\n6 &lt;class 'str'&gt;\n</code></pre> <p>Capito cosa \u00e8 successo?! Una concatenazione invece di una somma!</p> <p>Per evitare questi errori dobbiamo spesso effettuare delle conversioni di tipo; le funzioni necessarie sono semplici e intuitive.</p> Funzione Descrizione <code>bool()</code> Trasforma, se possibile, il suo argomento in un booleano. (<code>0</code>, <code>0.0</code> e <code>\"\"</code> valgono False, tutto il resto vale True) <code>int()</code> Trasforma, se possibile, il suo argomento in un intero, altrimenti restituisce ERRORE <code>float()</code> Trasforma, se possibile, il suo argomento in un reale, altrimenti restituisce ERRORE <code>str()</code> Trasforma il suo argomento in una stringa.  Funziona sempre  <p>Vediamo alcuni esempi per capire il concetto:</p> <pre><code># Vuoi un intero? Chiedilo esplicitamente e trasforma il valore digitato\n&gt;&gt;&gt; a = int( input(\"Inserisci un numero intero: \") )\n&gt;&gt;&gt; print(\"Hai inserito\", a)\nHai inserito 4\n&gt;&gt;&gt; type(a)\n&lt;class 'int'&gt;\n</code></pre> <p>Certo... se l'utente non digita un numero... la conversione non funziona!!!  L'unica funzione di conversione che funziona sempre \u00e8 <code>str()</code>: Tutto si pu\u00f2 convertire in una stringa :)</p> <p>Per chi fa pi\u00f9 fatica a intuire al volo e vuole sempre conferme scritte aggiungo un semplicissimo esercizio svolto per capire in quali casi potrebbero essere utili le conversioni di tipo.</p>"},{"location":"basics/101_var/#esercizio-svolto-area-del-rettangolo","title":"Esercizio svolto: area del rettangolo","text":"<p>Chiedi all'utente i valori di base e altezza e calcola l'area del rettangolo di quelle dimensioni.</p> File: areaRettangolo.py<pre><code># Area del rettangolo, date base e altezza dall'utente\n# in un solo passaggio chiedo le variabili e le converto in float\nprint(\"Area rettangolo, date base e altezza\")\nbase = float( input(\"Base: \") )\naltezza = float( input(\"Altezza: \") )\narea = base * altezza\nprint(f\"Area rettangolo = {area}\")\n</code></pre> <p>Esecuzione del codice</p> <pre><code>Area rettangolo, date base e altezza\nBase: 4.5\nAltezza: 2.5\nArea rettangolo = 11.25\n</code></pre>"},{"location":"basics/101_var/#esercizi-finali","title":"Esercizi finali","text":"<p>Per ognuno dei seguenti esercizi (e da adesso in poi), creare un file denominato esXXX.py, dove XXX \u00e8 il numero dell'esercizio. All'interno del file le prime righe devono essere sempre un commento contenente nome, classe ed esercizio. Ad esempio:</p> <pre><code># Andrea Diamantini\n# 2 XS\n# Esercizio 100: merenda\n\n... (poi il codice dell'esercizio) ...\n</code></pre> <p>Chiaro?</p> <p>Al lavoro!!!</p> <p>Esercizio 161</p> <p>Definire le seguenti variabili: la stringa nome, l'intero eta, il booleano motorino. Visualizzare il loro contenuto con a fianco il tipo di dato rappresentato.</p> <p>Esercizio 162</p> <p>Chiedere all'utente di inserire una stringa per il colore di un tavolino; un intero per la sua altezza in cm;  un reale per il suo peso in Kg. Visualizzare tutti i dati inseriti.</p> <p>Esercizio 163</p> <p>Permettere all'utente di inserire due valori interi e visualizzarne la somma.</p> <p>Esercizio 164</p> <p>Dichiarare due variabili contenente due valori reali, visualizzarne il valore e il prodotto.</p> <p>Esercizio 165</p> <p>Per ognuno dei seguenti valori di x e y, visualizzare il risultato della divisione intera con resto fra i due numeri.</p> <p>Ad esempio, per x = 13 e y = 5, visualizzare:</p> <pre><code>13 / 5 = 2 con resto di 3\n</code></pre> <p>(fatto bene una volta, il copia e incolla \u00e8 tuo amico...)</p> <pre><code>x = 12 , y = 7\nx = 25 , y = 6\nx = 7 , y = 7\nx = 13 , y = 13\nx = 4 , y = 6\n</code></pre> <p>Esercizio 166</p> <p>Chiedere all'utente di inserire 2 valori reali per la base e l'altezza di un triangolo. Visualizzare i valori inseriti e calcolare  l'area del triangolo avente tali misure.</p> <p>Esercizio 167</p> <p>Dati tre numeri interi, inseriti dall'utente, visualizzarli come fossero ore, minuti e secondi di un orario (esempio: 5:34:27). Considerarli dunque come <code>hh:mm:ss</code> di un orario determinato. </p> <p>Calcolare i secondi trascorsi dalla mezzanotte del giorno prima e visualizzare il risultato a video.</p> <p>Esercizio 168</p> <p>Sapendo che in un parcheggio la prima ora costa 2.5 \u20ac mentre tutte lo successive costano 2 \u20ac, scrivere un programma che richieda il numero complessivo delle ore di parcheggio e visualizzi il totale da pagare.</p> <p>Esercizio 180 (svolto)</p> <p>Dati due valori interi A, B, scrivere una espressione che \u00e8 sempre vera quando A \u00e8 minore di zero e B \u00e8 maggiore di 3.</p> <pre><code>A = int(input(\"Inserisci A: \"))\nB = int(input(\"Inserisci B: \"))\nexpr = (A &lt; 0 and B &gt;= 3)\nprint(expr)                      # scriver\u00e0 True o False a seconda dei valori inseriti\n</code></pre> <p>Esercizio 181</p> <p>Dati due valori interi A, B, scrivere una espressione che \u00e8 sempre falsa quando A \u00e8 maggiore di 4 e B \u00e8 maggiore di 12.</p> <p>Esercizio 182</p> <p>Dati due valori interi A, B, scrivere una espressione che \u00e8 sempre vera quando i segni di A e B sono discordi (cio\u00e8 uno \u00e8 positivo, l'altro negativo).</p> <p>Esercizio 183</p> <p>Dato un valore intero A, scrivere una espressione che \u00e8 sempre vera quando A assume un valore pari.</p> <p>Esercizio 184</p> <p>Dato un valore intero A, scrivere una espressione che \u00e8 sempre falsa quando A \u00e8 multiplo di 5.</p> <p> </p>"},{"location":"basics/102_alt/","title":"Strutture di alternanza","text":"<p>Il lavoro di creazione dell'algoritmo risolutivo di un problema si pu\u00f2 descrivere, in buona approssimazione, con la stesura di una serie di operazioni da compiere per ottenere il risultato prefissato. </p> <p>La programmazione strutturata schematizza sistematicamente le operazioni da svolgere secondo alcune operazioni atomiche ricorrenti:</p> <ol> <li>sequenza, in cui le istruzioni sono eseguite una dopo l'altra</li> <li>alternanza, in cui alcune istruzioni sono eseguite alternativamente (o un gruppo o un altro)</li> <li>ripetizione, in cui alcune istruzioni sono ripetute un numero finito di volte.</li> </ol> <p>Accanto a queste semplici strutture possono esserne inserite altre pi\u00f9 generali o pi\u00f9 particolari, per schematizzare ogni algoritmo secondo i criteri che pi\u00f9 si adattano ai propri gusti. Queste tre sono state scelte perch\u00e9 vale il seguente:</p> <p>Teorema di Jacopini-Bohm (1966)</p> <p>\"Qualsiasi algoritmo pu\u00f2 essere riscritto in maniera equivalente utilizzando solo le strutture di sequenza, alternanza, ripetizione.\"</p> <p>Questo algoritmo cio\u00e8 sostanzialmente afferma che le tre strutture indicate sono i mattoni fondamentali per riprodurre qualsiasi algoritmo formulabile dall'uomo. In altre parole, tutti i problemi che sono risolvibile, hanno anche una soluzione costruita semplicemente con istruzioni in sequenza, alternanza e ripetizione.</p>"},{"location":"basics/102_alt/#istruzione-if","title":"Istruzione if","text":"<p>if \u00e8 la pi\u00f9 semplice istruzione per realizzare la struttura di alternanza. Si pone una condizione e a seconda che essa risulti vera oppure no si eseguono alternativamente due blocchi di istruzione.</p> <p>Vediamo la definizione di codice:</p> Definizione struttura di alternanza<pre><code>if condizione:\n    # blocco di codice da eseguire se condizione \u00e8 vera\n    # indentato di 4 caratteri\n    # poi si va a istruzione successiva\n[elif condizione2:\n    # blocco di codice da eseguire se condizione2 \u00e8 vera\n    # indentato di 4 caratteri]\n    # poi si va a istruzione successiva\n[elif condizione3:\n    # blocco di codice da eseguire se condizione3 \u00e8 vera\n    # indentato di 4 caratteri]\n    # poi si va a istruzione successiva\n[else:\n    # blocco di codice da eseguire se TUTTE LE CONDIZIONI PRECEDENTI sono false\n    # indentato di 4 caratteri]\n\n# ISTRUZIONE SUCCESSIVA\n</code></pre> <p>Le parentesi quadre sopra indicano parti opzionali della struttura di alternanza. Spero si capisca meglio con qualche esempio:</p> <pre><code>x = int (input(\"Inserisci un numero intero: \"))\n\nif x &gt; 0 :\n    print(\"POSITIVO\")\nelif x == 0:\n    print(\"ZERO\")\nelse:\n    print(\"NEGATIVO\")\n\nprint(\"FINITO\")\n</code></pre> Esecuzione<pre><code>Inserisci un numero intero: 7\nPOSITIVO\nFINITO\n</code></pre> <p>Dal punto di vista funzionale, il codice scorre le istruzioni sopra scritte come nel diagramma seguente:</p> <p></p> <p></p> <p></p> <p>Le parti con le istruzioni <code>elif</code> ed <code>else</code> sono opzionali, ovvero si pu\u00f2 costruire un <code>if-else</code> semplice, come questo:</p> <pre><code>y = int (input(\"Inserisci un altro numero intero: \"))\n\nif y % 2 == 0 :\n    print(\"Hai inserito un numero pari\")\nelse:\n    print(\"Hai inserito un numero dispari\")\n</code></pre> Esecuzione<pre><code>Inserisci un altro numero intero: 8\nHai inserito un numero pari\n</code></pre> <p>oppure lasciare proprio l'istruzione <code>if</code> da sola:</p> <pre><code>z = int (input(\"Inserisci un ultimo numero intero: \"))\nif z != 9 :\n    print(\"Pensavo inserissi 9 :(\")\n</code></pre> Esecuzione<pre><code>Inserisci un ultimo numero intero: -5\nPensavo inserissi 9 :(\n</code></pre> <p>Capito?? Provate tutti questi codici e poi gi\u00f9 con gli esercizi...</p>"},{"location":"basics/102_alt/#indentazione-in-python","title":"Indentazione in Python","text":"<p>Indentazione</p> <p>Indentare significa inserire una certa quantit\u00e0 di spazi vuoti all'inizio di una o pi\u00f9 righe per incolonnare opportunamente il codice sorgente. </p> <p>I linguaggi pi\u00f9 famosi, come C o Java, utilizzano le parentesi graffe per indicare un blocco di codice e opzionalmente suggeriscono di indentare il codice per rendere i blocchi pi\u00f9 evidenti:</p> Esempio di codice in linguaggio C, INDENTATO<pre><code>if (numero &gt; 0)\n{\n    // fai qualcosa se numero \u00e8 maggiore di ZERO\n}\nelse\n{\n    // fai qualcosa se numero NON \u00e8 maggiore di ZERO\n}\n</code></pre> <p>Come si vede, lo spostamento a destra di alcune righe del codice le rende pi\u00f9 evidenti. Come dicevamo comunque, per C o Java l'indentazione \u00e8 assolutamente opzionale e il seguente pezzo di codice \u00e8 assolutamente equivalente al precedente.</p> Esempio di codice in linguaggio C, NON INDENTATO<pre><code>if (numero &gt; 0) { // fai qualcosa se numero \u00e8 maggiore di ZERO\n} else { // fai qualcosa se numero NON \u00e8 maggiore di ZERO\n}\n</code></pre> <p>Io penso che sia alquanto evidente come il primo esempio sia molto pi\u00f9 facile da leggere, da comprendere e imparare rispetto al secondo, anche se per il linguaggio C essi rappresentano lo stesso identico concetto.</p> <p>Altri linguaggi, come il PASCAL, non utilizzano le parentesi ma parole chiave del linguaggio. Anche qui l'indentazione \u00e8 opzionale.</p> Esempio di codice in linguaggio PASCAL, NON INDENTATO<pre><code>if (numero &gt; 0) then ( fai qualcosa se numero \u00e8 maggiore di ZERO )\nelse\n( fai qualcosa se numero NON \u00e8 maggiore di ZERO ) ;\n</code></pre> <p>Anche qui, pur avendo le parole chiave <code>if ... then ... else ...</code> che racchiudono i due blocchi, a mio parere senza indentazione la leggibilit\u00e0 e la chiarezza del codice vengono molto meno.</p> <p>Python obbliga i suoi utilizzatori ad usare l'indentazione  come unica forma di organizzazione del codice in blocchi! </p> <p>In questo modo le parole del linguaggio da imparare sono pochissime e la struttura del linguaggio \u00e8 molto facile da leggere.</p> <p>A questo aggiungiamo che lo stile predefinito di Python per l'indentazione \u00e8 di inserire 4 spazi ogni volta si voglia identificare un blocco di codice. In questo modo tutti i programmi Python sono per definizione</p> <ul> <li>i pi\u00f9 semplici da leggere</li> <li>con una struttura logica identica alla indentazione delle righe di codice che la implementano</li> <li>con una organizzazione uniforme in TUTTI i programmi Python.</li> </ul> <p>Vediamo il solito esempio scritto in Python:</p> Esempio di codice in linguaggio Python (indentato per forza)<pre><code>if numero &gt; 0 :\n    # i blocchi Python iniziano con 4 spazi\n    # Qui si fa qualcosa se numero \u00e8 maggiore di ZERO\nelse:\n    # altro blocco di codice\n    # qui si fa qualcosa se numero NON \u00e8 maggiore di ZERO\n\nprint(\"qui i blocchi sono finiti\")\n</code></pre> <p>Tutto qua! </p> <p>D'ora in avanti quando incontreremo strutture con blocchi di codice li evidenzieremo tramite indentazione di 4 spazi. Come vedremo alcuni editor di testo ci aiutano molto per questa operazione :)</p> <p>Roba da precisoni!!!</p> <p>Python 3.x utilizza una specifica chiamata PEP8 che descrive per filo e per segno come scrivere qualunque struttura di codice Python. </p> <p>Questo con l'obiettivo dichiarato di uniformare lo stile di qualsiasi pezzo di codice Python scritto da chiunque e  semplificare cos\u00ec la lettura del codice!</p> <p>In particolare vorrei sottolineare come questa specifica sia assolutamente allergica al carattere di tabulazione TAB, presente in alto a destra in ogni tastiera. Il carattere di tabulazione NON deve essere usato negli script Python.</p> <p>Suggerimento</p> <p>Se state utilizzando Thonny (come dovreste) potete utilizzare tranquillamente il tasto TAB della tastiera perch\u00e9 esso trasforma automaticamente ogni TAB in una sequenza di 4 caratteri evitando fastidi durante l'esecuzione del codice e semplificando il lavoro del programmatore che non deve digitare a mano 4, 8, 12,,, spazi!!</p> <p>Per forzare gli utenti ad usare queste buone regole di uniformit\u00e0, l'interprete Python segnala un errore ogni volta che trova un carattere di tabulazione nel codice. E il prof mette una insufficienza. Fate voi...</p>"},{"location":"basics/102_alt/#esercizi","title":"Esercizi","text":"<p>Esercizio 201</p> <p>Scrivere un programma che richiede un numero intero all'utente e visualizza la scritta \"PARI\" oppure \"DISPARI\" a seconda del valore inserito.</p> <p>Esercizio 202</p> <p>Scrivere un programma che richiede un numero intero all'utente e visualizza la scritta \"DIVISIBILE PER 5\" oppure \"NON DIVISIBILE PER 5\" a seconda del valore inserito.</p> <p>Esercizio 203</p> <p>Dati due numeri interi da parte dell'utente, da memorizzare nelle variabili n1, n2, verificare se il primo \u00e8 un multiplo del secondo. Visualizzare la scritta \"MULTIPLO\" o \"NON MULTIPLO\".</p> <p>Esercizio 204</p> <p>Dato un numero intero, inserito dall'utente, restituire la scritta CORRETTO se il numero \u00e8 pari e compreso fra 100 e 200 (estremi esclusi), NON CORRETTO altrimenti.</p> <p>Esercizio 205</p> <p>Dato un numero intero, inserito dall'utente, restituire la scritta CORRETTO se il numero \u00e8 dispari e compreso fra -5 e 5 (estremi inclusi), NON CORRETTO altrimenti.</p> <p>Esercizio 206: confronti</p> <p>Dati due numeri reali da parte dell'utente, visualizzarli in ordine crescente (prima il pi\u00f9 piccolo, poi il pi\u00f9 grande).</p> <p>Esercizio 207</p> <p>Dati due numeri reali da parte dell'utente, memorizzati nelle variabili n1 e n2, inserire il valore pi\u00f9 piccolo nella variabile \"piccolo\" e il pi\u00f9 grande nella variabile \"grande\", infine visualizzarli.</p> <p>Esercizio 208</p> <p>Dati tre numeri reali da parte dell'utente, visualizzarli in ordine crescente (prima il pi\u00f9 piccolo, poi il medio, poi il pi\u00f9 grande).</p> <p>Esercizio 209</p> <p>Dati tre numeri reali da parte dell'utente, memorizzati nelle variabili n1, n2, n3; inserire il valore pi\u00f9 piccolo nella variabile \"v1\", il medio nella variabile \"v2\" e il pi\u00f9 grande nella variabile \"v3\".</p> <p>Esercizio 210</p> <p>Dati quattro numeri reali da parte dell'utente, memorizzati nelle variabili n1, n2, n3, n4; visualizzare il valore pi\u00f9 grande fra i 4.</p> <p>Esercizio 211</p> <p>Dati quattro numeri reali da parte dell'utente, memorizzati nelle variabili n1, n2, n3, n4; visualizzare il valore pi\u00f9 piccolo fra i 4.</p> <p>Esercizio 212: met\u00e0 e doppio di un intero</p> <p>Programma che, dato un numero intero, ne visualizza la met\u00e0 se il numero \u00e8 pari o ne visualizza il doppio se il numero \u00e8 dispari.</p> <p>Esercizio 213: radice quadrata</p> <p>Programma che dato un numero intero, dice se questo \u00e8 positivo oppure no. Se il numero \u00e8 positivo, ne calcola la radice quadrata. Se il numero \u00e8 negativo ne calcola l'opposto.</p> <p>Esercizio 214</p> <p>da sostituire</p> <p>Esercizio 215: anno bisestile</p> <p>Dato un numero intero da parte dell'utente, visualizzare se questo rappresenta un anno bisestile oppure no. Un anno \u00e8 bisestile se \u00e8 divisibile per 4, ma non per 100 oppure se \u00e8 divisibile per 400.</p> <p>Ad esempio il 1900 non \u00e8 stato un anno bisestile, perch\u00e9 1900 \u00e8 divisibile per 4 ma anche per 100. L'anno 2000 \u00e8 stato bisestile perch\u00e9 2000 \u00e8 divisibile per 400.</p> <p>Esercizio 216</p> <p>Un negozio applica degli sconti diversi a seconda del prezzo dei prodotti. Sul prezzo di un prodotto viene praticato lo sconto del 3% se costa fino a 100 euro e del 5% se costa di pi\u00f9. Inserito da tastiera il prezzo P, calcolare il prezzo da pagare secondo la regola sopra descritta.</p> <p>Esercizio 217: biglietto del treno</p> <p>Sul prezzo di un biglietto di un treno viene applicato un supplemento del 7% se il treno \u00e8 di tipo 'A', del 12% se \u00e8 di tipo 'B' e del 18% se \u00e8 di tipo 'C'. Per gli altri treni non c'\u00e8 supplemento.</p> <p>Chiedere all'utente di inserire un numero reale che rappresenta il costo del biglietto e un carattere che rappresenta il tipo di treno, quindi calcolare il prezzo reale del biglietto, applicando l'eventuale sovrapprezzo secondo le indicazioni precedenti.</p> <p>Infine visualizzare il prezzo iniziale (inserito dall'utente) il tipo di treno indicato e il prezzo finale.</p> <p>Esercizio 218: temperature</p> <p>Si permetta all'utente di inserire un numero reale che rappresenter\u00e0 una temperatura in gradi Celsius. Il programma visualizzer\u00e0 la temperatura inserita e poi la convertir\u00e0 in gradi Fahrenheit e in gradi Kelvin. Prima della conversione, il programma verificher\u00e0 se la temperatura inserita \u00e8 minore allo zero assoluto (ZERO gradi Kelvin) e in quel caso visualizzer\u00e0 un errore senza visualizzare le conversioni.</p> <p>Suggerimento</p> <p>Per convertire le temperature, usa le seguenti formule:</p> <pre><code>Fahrenheit = (9/5) * Celsius + 32\nKelvin = Celsius + 273.15\n</code></pre> <p>Esercizio 219</p> <p>Da sostituire</p> <p>Esercizio 220: triangolo o no</p> <p>Dati 3 numeri A, B, C da parte dell'utente, che rappresentano le lunghezze di 3 lati, valutare se essi possono rappresentare un triangolo. In caso affermativo dire quale tipo di triangolo: equilatero, isoscele, rettangolo, scaleno.</p> <p>Esercizio 221: cifre1</p> <p>Chiedere all'utente di inserire un numero intero. Visualizzare poi il numero stesso e la cifra delle centinaia. Ad esempio se il numero inserito \u00e8 243, la cifra da visualizzare \u00e8 2. Se il numero inserito \u00e8 85, la cifra da visualizzare \u00e8 0. Se il numero inserito \u00e8 1357, la cifra da visualizzare \u00e8 3.</p> <p>Suggerimento</p> <p>Se sapete verificare se un numero \u00e8 multiplo di un altro, sapete trovare le cifre di un numero, verificando se \u00e8 multiplo di 10, 100, 1000...)</p> <p>Esercizio 222: cifre2</p> <p>Chiedere all'utente di inserire un numero intero. Visualizzare poi il numero stesso e la cifra delle decine. </p> <p>Ad esempio se il numero inserito \u00e8 243, la cifra da visualizzare \u00e8 4. </p> <p>Se il numero inserito \u00e8 85, la cifra da visualizzare \u00e8 8. </p> <p>Se il numero inserito \u00e8 1357, la cifra da visualizzare \u00e8 5.</p> <p>Esercizio 223: data valida</p> <p>Chiedere all'utente di inserire 2 numeri interi GG, MM e si determini se questi possono rappresentare i giorni e i mesi di una data. In particolare, se questo \u00e8 vero si riporti la scritta DATA VALIDA, altrimenti la scritta DATA NON VALIDA.</p> <p>Ad esempio,</p> <ul> <li>dati i valori GG = 25, MM = 7 si ritorna DATA VALIDA.</li> <li>dati i valori GG = 5,  MM = 17 si ritorna DATA NON VALIDA.</li> <li>dati i valori GG = 31, MM = 3 si ritorna DATA VALIDA.</li> <li>dati i valori GG = 31, MM = 4 si ritorna DATA NON VALIDA.</li> </ul> <p>Il 29 febbraio non \u00e8 una data valida, non essendo presente il controllo sull'anno.</p> <p>Filastrocca sui mesi</p> <p>Trenta d\u00ec conta Novembre, con April, Giugno e Settembre. Di ventotto ce n'\u00e8 uno... tutti gli altri ne han trentuno!!!</p> <p>Esercizio 224: orario</p> <p>Chiedere all'utente di inserire due numeri interi per le ore e i minuti di un orario e visualizzare la scritta ORARIO ERRATO se esso \u00e8 una combinazione impossibile (ad esempio se i valori sono negativi, oppure se le ore superano 23, etc...).</p> <p>Se l'orario \u00e8 corretto, visualizzare una scritta secondo il seguente schema:</p> <ul> <li>Dalle 8.00 alle 8.59: visualizzare PRIMA ORA</li> <li>Dalle 9.00 alle 9.59: visualizzare SECONDA ORA</li> <li>Dalle 10.00 alle 10.54: visualizzare TERZA ORA</li> <li>Dalle 10.55 alle 11.04: visualizzare INTERVALLO</li> <li>Dalle 11.05 alle 11.59: visualizzare QUARTA ORA</li> <li>Dalle 12.00 alle 13.00: visualizzare QUINTA ORA</li> </ul> <p>In tutti gli altri casi, visualizzare la scritta TEMPO LIBERO.</p> <p> </p>"},{"location":"basics/103_iter/","title":"Strutture di ripetizione","text":"<p>In Python esistono due tipi di strutture di ripetizione, ovvero per ripetere un certo numero di volte una istruzione (fare un ciclo):</p> <ol> <li>Istruzione for, che si utilizza per scorrere gli elementi di una sequenza</li> <li>Istruzione while, che si utilizza per ripetere un blocco di istruzioni finch\u00e9 non si verifica una determinata condizione.</li> </ol> <p>Queste istruzioni possono essere usate alla bisogna in un programma Python e rappresentano due possibilit\u00e0 di implementazione per la struttura iterativa. Vediamole nel dettaglio.</p>"},{"location":"basics/103_iter/#istruzione-for","title":"Istruzione for","text":"<p>L'istruzione for permette di scorrere in maniera semplice gli elementi di una sequenza ed effettuare una qualsivoglia operazione che si ripete con oggetto l'ennesimo elemento di essa. La struttura di base \u00e8:</p> Definizione ciclo for<pre><code>for variabile in sequenza:\n    # blocco da ripetere, indentato di 4 caratteri\n    # . . .\n\n# finita l'indentazione, termina il blocco\n</code></pre> <p>In questi primi esempi proveremo a lavorare solo con sequenze numeriche, autogenerate con il comando <code>range</code>. Vediamo un semplice esempio:</p> <pre><code>for w in range(4):\n    print(w)\n</code></pre> Esecuzione<pre><code>0\n1\n2\n3\n</code></pre> <p>Penso si capisca in maniera abbastanza intuitiva come funziona <code>range</code>: parte da ZERO e va avanti di UNO fino al numero immediatamente prima a quello indicato.</p> <p>Tutto quello che viene indentato (spostato a destra) di 4 caratteri fa parte del for. Quando si ritorna incolonnati alla parola <code>for</code> si passa alla prossima istruzione. Ad esempio:</p> <pre><code>for n in range(6):\n    if n % 2 == 0:\n        print (n, \"\u00e8 pari\")\n    else:\n        print (n, \"\u00e8 dispari\")\n\nprint(\"Finito!\")\n</code></pre> Esecuzione<pre><code>0 \u00e8 pari\n1 \u00e8 dispari\n2 \u00e8 pari\n3 \u00e8 dispari\n4 \u00e8 pari\n5 \u00e8 dispari\nFinito!\n</code></pre> <p>Notate l'indentazione dell'esempio in cui tutto il blocco <code>if</code> \u00e8 ripetuto nel <code>for</code> e le due <code>print</code> fanno parte ognuna di una delle due parti dell'<code>if</code>. Il <code>print</code> finale viene eseguito al termine del ciclo.</p> <p>La funzione range utilizzata in questo modo pu\u00f2 essere utilizzata anche semplicemente per contare le ripetizioni.</p> <p>Il nome della variabile che si utilizza nel for \u00e8 assolutamente libero e casuale: potete scegliere qualsiasi nome ma evitate di sceglierne uno gi\u00e0 utilizzato nel vostro programma, per evitare confusione!!!</p> Scrivi 5 volte \"ciao\"<pre><code>for x in range(5):\n    print(\"ciao\")\n</code></pre> Disegna una piramide di \"x\"<pre><code>for i in range(10):\n    print( \"x\" * i )\n</code></pre> <p>Capiter\u00e0 spesso di voler gestire una sequenza di numeri un po' pi\u00f9 complessa: ad esempio una sequenza che non inizia da zero, una sequenza che avanza di 2, un conto alla rovescia...</p> <p>Per tutte le casistiche possibili occorre studiare i parametri della funzione <code>range()</code>.</p> <p>Suggerimento</p> <p>La funzione <code>range()</code> \u00e8 una funzione predefinita del linguaggio che crea \"al volo\" una sequenza numerica intera. </p> <p>Essa pu\u00f2 prendere 1,2,3 parametri! Vediamo i vari casi:</p> <p>range( stop )</p> <ul> <li>la sequenza parte da 0 e avanza di 1:</li> <li>stop \u00e8 il valore finale (non compreso)</li> </ul> <p>Ad esempio:</p> <pre><code>range(5) # indica la sequenza (0,1,2,3,4)\n</code></pre> <p>range( start , stop )</p> <ul> <li>start \u00e8 il valore iniziale (compreso)</li> <li>stop \u00e8 il valore finale (non compreso)</li> <li>si avanza di 1</li> </ul> <p>Ad esempio:</p> <pre><code>range(2,7) # indica la sequenza (2,3,4,5,6)\n</code></pre> <p>range( start , stop , step)</p> <ul> <li>start \u00e8 il valore iniziale (compreso)</li> <li>stop \u00e8 il valore finale (non compreso)</li> <li>step \u00e8 il valore di avanzamento</li> </ul> <p>Ad esempio:</p> <pre><code>range(3,15,2) # indica la sequenza (3,5,7,9,11,13)\n</code></pre> <p>\u00c8 pi\u00f9 facile di quello che sembra!  Vediamo qualche esempio:</p> Esempio 1<pre><code># c'\u00e8 un numero solo, \u00e8 stop!\n# Start \u00e8 predefinito a 0, step \u00e8 predefinito a 1, quindi...\nfor i in range(5):\n    print(i)\n</code></pre> Esecuzione<pre><code>0\n1\n2\n3\n4\n</code></pre> Esempio 2<pre><code># due numeri, il primo \u00e8 start, il secondo \u00e8 stop\n# step \u00e8 predefinito a +1\nfor i in range(1, 5):\n    print(i)\n</code></pre> Esecuzione<pre><code>1\n2\n3\n4\n</code></pre> Esempio 3<pre><code># si parte da 1, si avanza di 2 fino a 7 (non compreso)!!!\nfor i in range(1, 7, 2):\n    print(i)\n</code></pre> Esecuzione<pre><code>1\n3\n5\n</code></pre> Esempio 4<pre><code># si parte da 9, si \"avanza\" di -2 (quindi si va indietro)\n# ci si ferma prima di arrivare a 0\nfor i in range(9, 0, -2):\n    print(i)\n</code></pre> Esecuzione<pre><code>9\n7\n5\n3\n1\n</code></pre> <p>Altro esempio, con un po' di codice:</p> Esempio 5<pre><code>for n in range(1,4):\n    q = n**2\n    print(q, \"\u00e8 il quadrato di\", n)\n</code></pre> Esecuzione<pre><code>1 \u00e8 il quadrato di 1\n4 \u00e8 il quadrato di 2\n9 \u00e8 il quadrato di 3\n</code></pre> <p>Insomma, secondo me pi\u00f9 o meno ci siamo. Dopo una trentina di esercizi, ne sarete convinti anche voi :)</p>"},{"location":"basics/103_iter/#esercizi-su-for-e-range","title":"Esercizi su for e range","text":"<p>Utilizzate il comando <code>for ... in range ( ... )</code> per la risoluzione dei seguenti esercizi:</p> <p></p> <p>Esercizio 301</p> <p>Visualizzare i numeri da 0 a 19</p> <p>Esercizio 302</p> <p>Visualizzare i numeri da 1 a 20</p> <p>Esercizio 303</p> <p>Visualizzare i numeri dispari presenti fra 1 e 20</p> <p>Esercizio 304</p> <p>Visualizzare i numeri pari presenti fra 1 e 30</p> <p>Esercizio 305</p> <p>Visualizzare un countdown che parte da 10 e arriva a 0.</p> <p>Esercizio 306</p> <p>Visualizzare un countdown dei numeri pari che parte da 20 e arriva a 0.</p> <p>Esercizio 307</p> <p>Chiedere all'utente di inserire un numero intero positivo e visualizzare un countdown che parte da quel numero fino a 0.</p> <p>Esercizio 308</p> <p>Visualizzare la tabellina del 5.</p> <p>Esercizio 309</p> <p>Chiedere all'utente un numero intero e visualizzare la tabellina di quel numero.</p> <p>Esercizio 310</p> <p>Visualizzare la tabellina del 7 alla rovescia (cio\u00e8 partendo da 70 e andando indietro fino a 7)</p> <p>Esercizio 311</p> <p>Chiedere all'utente un numero intero e visualizzare la tabellina di quel numero alla rovescia.</p> <p>Esercizio 312</p> <p>Visualizzare i primi 20 numeri dispari</p> <p>Esercizio 313</p> <p>Chiedere all'utente un numero intero e visualizzare i 10 numeri pari successivi a quel numero. Ad esempio, inserito 17, si dovranno visualizzare 18, 20, 22, 24, 26, 28, 30, 32, 34, 36.</p> <p>Esercizio 314</p> <p>Visualizzare in colonna i numeri da 1 a 100 (i primi 100 numeri).</p>"},{"location":"basics/103_iter/#somma-e-conta","title":"Somma e Conta","text":"<p>Capita spesso (vedrete... capiter\u00e0!!!) di dover sommare una sequenza di numeri oppure di dover contare una sequenza di informazioni in genere.</p> <p>In questo caso il ciclo for appena studiato torna veramente utile. Si tratta semplicemente di mettere insieme alcune conoscenze che gi\u00e0 abbiamo. Vediamo dunque i 2 casi (la somma e la conta) tramite l'ausilio di 2 esempi</p>"},{"location":"basics/103_iter/#esempio-con-la-somma","title":"Esempio con la somma","text":"<p>In questo esempio voglio fare la somma dei numeri che vanno da 5 a 12, quindi sommare insieme 5, 6, 7, 8, 9, 10, 11, 12 e sapere quanto fa (senza fare a mente!).</p> <p>Se vuoi sommare delle quantit\u00e0 vorrai inserire il risultato in una variabile. Mi sembra abbastanza ragionevole affermare che la variabile che contiene la somma deve partire da ZERO!</p> <pre><code>somma = 0\n</code></pre> <p>La seconda considerazione da fare \u00e8 sul ciclo for: se voglio sommare i numeri fra 5 e 12 devo scrivere un ciclo che parte da 5 (start, compreso) e avere come stop 13, in modo che si fermi a quello prima, ovvero 12.</p> <pre><code>for s in range(5,13):\n    # s va da 5 a 12:\n    # la prima volta vale 5, la seconda 6, etc... l'ultima volta 12\n</code></pre> <p>Terza e ultima considerazione: se voglio sommare tutti questi numeri devo \"aggiungerli tutti\" alla (variabile) somma. Man mano che il ciclo for li scorre li aggiungo dunque ad essa:</p> <pre><code>...\nsomma = somma + s # si pu\u00f2 scrivere in maniera compatta: somma += s\n</code></pre> <p>Questa istruzione aggiunge s al valore attuale di somma e assegna il nuovo valore calcolato di nuovo alla variabile somma.</p> <p>Mettendo insieme i 3 pezzi, che spero abbiate compreso, otteniamo:</p> Somma numeri fra 5 e 12<pre><code>somma = 0\n\nfor s in range(5, 13):\n    somma += s\n\nprint(\"la somma dei numeri fra 5 e 12 fa: \", somma)\n</code></pre> <p>Spero sia tutto chiaro! Come al solito comunque, fra un attimo arrivano gli esercizi ;)</p>"},{"location":"basics/103_iter/#esempio-con-la-conta","title":"Esempio con la conta","text":"<p>In questo secondo esempio voglio contare i numeri dispari fra 15 e 30 ovvero sapere quanti sono i numeri 15, 17, 19, 21, 23, 25, 27, 29 (senza contarli a mano!).</p> <p>Anche qui ci servit\u00e0 una variabile per \"contare\" i numeri, che ovviamente deve partire da ZERO!!</p> <pre><code>conta = 0\n</code></pre> <p>Per scorrere i dispari fra 15 e 30 devo scrivere un for molto semplice: parte da 15, arriva a 30 e va avanti di 2!</p> <pre><code>for c in range(15, 30, 2):\n    # In questo modo c varr\u00e0 15, 17, 19... fino a 29, il numero prima di 30!\n</code></pre> <p>Ultima cosa, ogni volta che scorro un numero devo contarlo, cio\u00e8 aumentare la conta di 1, quindi:</p> <pre><code>conta += 1\n</code></pre> <p>Mettiamo insieme ancora una volta i tre pezzi del ragionamento e otteniamo:</p> Conta dei numeri dispari fra 15 e 30<pre><code>conta = 0\n\nfor c in range(15, 30, 2):\n    conta += 1\n\nprint(\"I numeri dispari fra 15 e 30 sono:\", conta)\n</code></pre> <p>Sinceramente credo che analizzando un pochino gli esempi e ragionando un po' anche questo concetto sia abbastanza chiaro! Ripeto... in questo paragrafo niente di nuovo. Solo due tecniche molto comuni che abbiamo analizzato insieme.</p> <p>E adesso sotto con gli esercizi!</p>"},{"location":"basics/103_iter/#esercizi-su-somma-e-conta","title":"Esercizi su somma e conta","text":"<p>Esercizio 321</p> <p>Visualizzare la somma dei numeri da 1 a 100</p> <p>Esercizio 322</p> <p>Contare i numeri che vanno da 10 a 20. (dovrebbe fare 11...)</p> <p>Esercizio 323</p> <p>Dato un numero intero chiamato PAOLO, inserito dall'utente, visualizzare la somma dei numeri da 1 a PAOLO (compreso)</p> <p>Esercizio 324</p> <p>Fare la somma di 10 numeri inseriti dall'utente.</p> <p>Esercizio 325</p> <p>Dati 2 numeri interi A e B inseriti dall'utente, contare i numeri pari compresi fra questi, estremi inclusi.</p> <p>Esercizio 326</p> <p>Permettere all'utente di inserire 6 numeri interi. Alla fine dell'inserimento dire quanti numeri dispari positivi sono stati digitati.</p> <p>Esercizio 327</p> <p>Scrivere un ciclo che permetta all'utente di inserire 10 numeri interi. Alla fine dell'inserimento visualizzare:</p> <ul> <li>la quantit\u00e0 di numeri pari inseriti</li> <li>la somma dei numeri dispari inseriti</li> </ul> <p>Ad esempio, se l'utente inserisce in sequenza i numeri 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 allora il programma dovr\u00e0 rispondere:</p> <pre><code>I numeri pari sono 5.\nLa somma dei numeri dispari fa 25.\n</code></pre> <p>(infatti i numeri pari sono 2, 4, 6, 8, 10 ovvero 5 numeri. La somma dei dispari inseriti \u00e8 1 + 3 + 5 + 7 + 9 = 25)</p> <p>Esercizio 328</p> <p>Chiedere all'utente di inserire due numeri interi da memorizzare nelle variabili tot e valore.</p> <p>Permettere all'utente di inserire tot numeri interi, contare quanti di questi sono pi\u00f9 grandi di valore e sommare tutti quelli positivi ma minori o uguale a valore.</p> <p>Visualizzare i risultati ottenuti.</p>"},{"location":"basics/103_iter/#istruzione-while","title":"Istruzione while","text":"<p>L'istruzione while si abbina ad una condizione e ripete il suo blocco di codice finch\u00e9 questa condizione rimane vera. Vediamo la struttura.</p> Definizione ciclo while<pre><code>while condizione:\n    # blocco di codice da ripetere se la condizione \u00e8 vera\n    # . . .\n\n# altro codice\n</code></pre> <p>Vediamo un esempio per provare a chiarire il concetto:</p> <pre><code>a = 0\nwhile a &lt; 5:\n    print(a)\n    a = a + 2\n</code></pre> Esecuzione<pre><code>0\n2\n4\n</code></pre> <p>Le istruzioni for e while permettono di implementare qualsiasi tipo di iterazione in maniera semplice e lineare. Prendiamo prima un po' confidenza con queste e poi vediamo casistiche leggermente pi\u00f9 articolate, in cui introdurre alcune istruzioni per modificare il comportamento dei cicli.</p>"},{"location":"basics/103_iter/#esercizi-su-while","title":"Esercizi su while","text":"<p>Esercizio 341</p> <p>Chiedere all'utente di inserire un numero intero fra 1 e 3. Far ripetere l'inserimento finch\u00e9 non si \u00e8 ottenuto il numero nell'intervallo richiesto</p> <p>Esercizio 342</p> <p>Avendo un capitale iniziale C = 100 euro e sapendo che donandolo al professore questi \u00e8 in grado di farlo fruttare con un incremento del 15% annuo, dopo quanti anni esso ha raggiunto o superato il doppio del capitale iniziale?</p> <p>Esercizio 343</p> <p>Chiedere all'utente di inserire numeri interi finch\u00e9 la somma dei numeri inseriti non superi 20.</p> <p>Esercizio 344</p> <p>Chiedere all'utente di inserire numeri interi finch\u00e9 la somma dei pari inseriti non superi 50.</p> <p>Esercizio 345</p> <p>Chiedere all'utente di inserire numeri positivi e crescenti. L'inserimento si interrompe quando non si inserisce pi\u00f9 un numero maggiore del precedente.</p> <p>Esercizio 346</p> <p>Chiedere all'utente di inserire una serie di numeri e terminare l'inserimento quando l'utente digita lo zero. Visualizzare la somma dei numeri positivi inseriti.</p> <p>Esercizio 347</p> <p>Chiedere all'utente di inserire una serie di numeri e terminare l'inserimento quando l'utente ne digita due uguali consecutivi. Visualizzare la quantit\u00e0 di numeri inseriti (l'ultimo doppio conta 1: ad esempio inseriti 1 , 3 , 4 , 4 saranno stati inseriti 3 numeri).</p> <p>Esercizio 348</p> <p>La malattia pi\u00f9 contagiosa che sia mai esistita (finora) \u00e8 il morbillo. Una persona con il morbillo in un'ora pu\u00f2 contagiare fino a 18 persone.</p> <p>Chiedere all'utente di inserire un numero intero che rappresenta la quantit\u00e0 di persone di una popolazione, fingere che una persona fra queste sia ammalata di morbillo e valutare dopo quanti giorni si supera il 50% di diffusione della malattia (nel caso pi\u00f9 grave, ovvero che ogni ora si contagino 18 persone).</p> <p>Esercizio 349</p> <p>Al bar della scuola la pizza costa 1 euro, i panini 1,50 euro e le brioches salate ripiene 1,80 euro. Mario prende tot euro alla settimana (non superiore a 10 euro) e ogni giorno della settimana decide cosa prendere, scalando i soldi dai suoi possedimenti. Verificare se alla fine della settimana riesce comunque a prendere quello che gli va o \u00e8 costretto a fare economia.</p> <p>Al termine della settimana visualizzare il credito residuo di Mario e se per almeno un giorno \u00e8 dovuto vivere in ristrettezze.</p> <p>Esercizio 350</p> <p>Decidere il nome di un pezzo e un prezzo iniziale (ad esempio: \"orologio antico\", 50 euro) e procedere ad un'asta simulata in cui 2 persone (Anna e Marco) si sfidano alzando ogni volta il prezzo dell'oggetto. L'asta si interrompe quando uno dei due inserisce un prezzo minore o uguale al precedente.</p> <p>Al termine dell'asta dire chi dei due ha acquistato il pezzo e a quale prezzo.</p> <p>Esercizio 351</p> <p>Si supponga che l'andamento della popolazione di un'alga si sviluppi nel seguente modo: un anno raddoppia l'anno successivo cala di un quarto (sempre numeri interi, mi raccomando).</p> <p>Creare un programma che dato un valore iniziale della popolazione (maggiore di 1) e un valore da raggiungere (maggiore del valore iniziale) dica quanti anni ci mette quella popolazione a raggiungere o superare quel valore.</p>"},{"location":"basics/103_iter/#istruzioni-per-i-cicli","title":"Istruzioni per i cicli","text":"<p>Per ognuna delle istruzioni seguenti, vedremo una semplice descrizione ed un esempio esplicativo prima di \"tuffarci\" nella moltitudine di esercizi che fortificheranno la nostra consapevolezza nell'utilizzo delle stesse. Un unico commento per chiarire la questione: ognuna di queste istruzioni funziona indifferentemente con i cicli for o i cicli while.</p> <p>Provare per credere!</p>"},{"location":"basics/103_iter/#istruzione-break","title":"Istruzione break","text":"<p>L'istruzione <code>break</code> provoca un'interruzione del ciclo e un salto immediato alla prima istruzione seguente. Esempio illuminante</p> <pre><code>indovina = 8\nprint (\"Ho pensato un numero fra 1 e 10. Prova a indovinarlo\")\n\nwhile True:\n    tentativo = int(input(\"Che numero \u00e8?\"))\n    if tentativo == indovina:\n        print(\"Incredibile! Hai indovinato!!!\")\n        break # finito! Esci dal ciclo!\n    else:\n        print(\"No, mi spiace! Riprova...\")\n\nprint(\"\\nok, adesso andiamo avanti\")\n</code></pre> Esecuzione<pre><code>Ho pensato un numero fra 1 e 10. Prova a indovinarlo\nChe numero \u00e8? 6\nNo, mi spiace! Riprova...\nChe numero \u00e8? 7\nNo, mi spiace! Riprova...\nChe numero \u00e8? 8\nIncredibile! Hai indovinato!!!\nok, adesso andiamo avanti\n</code></pre> <p>Mi sembra sia semplice da capire e facile da usare. Andiamo avanti.</p>"},{"location":"basics/103_iter/#istruzione-continue","title":"Istruzione continue","text":"<p>L'istruzione continue interrompe l'esecuzione del blocco di codice da ripetere e salta immediatamente alla prossima iterazione, ricominciando il blocco iterativo.</p> <pre><code>for n in range(1, 8):\n    if n % 3 == 0:\n        continue # ricomincia il ciclo dalla prossima iterazione\n    print (\"Numero: \", n)\n</code></pre> Esecuzione<pre><code>Numero: 1\nNumero: 2\nNumero: 4\nNumero: 5\nNumero: 7\n</code></pre> <p>Anche qui, facile da capire e da utilizzare. Magari \u00e8 una istruzione che capiter\u00e0 di usare poche volte, ma di sicuro non sar\u00e0 un grande problema utilizzarla.</p>"},{"location":"basics/103_iter/#istruzione-else-nei-cicli","title":"Istruzione else nei cicli","text":"<p>Una delle caratteristiche peculiari di Python, che lo differenziano dagli altri linguaggi, \u00e8 questa cosa di poter utilizzare la clausola else nei cicli. Il codice nel campo else viene eseguito in due casi specifici:</p> <ol> <li>Abbinato ad un ciclo for, quando la sequenza da scorrere termina.</li> <li>Abbinato ad un ciclo while, quando la condizione diventa False</li> </ol> <p>Vediamo un esempio con il ciclo for:</p> Verifica se un numero \u00e8 primo o no<pre><code>numero = int( input(\"Inserisci numero. Io ti dico se \u00e8 primo o no: \") )\n\nfor divisore in range(2, numero):\n    if numero % divisore == 0:\n        print (numero,\"non \u00e8 primo, infatti\")\n        print (numero, \" = \", divisore, \" * \", numero//divisore )\n        break\nelse: # Indentazione! else \u00e8 incolonnato al for NON all'if!!!\n    print(numero, \"\u00e8 primo\")\n</code></pre> Prima esecuzione, inserisco 15<pre><code>Inserisci numero. Io ti dico se \u00e8 primo o no: 15\n15 non \u00e8 primo, infatti \n15 = 3 * 5\n</code></pre> Seconda esecuzione, inserisco 17<pre><code>Inserisci numero. Io ti dico se \u00e8 primo o no: 17\n17 \u00e8 primo\n</code></pre> <p>Praticamente il secondo ciclo for, basato sulla variabile i, cerca eventuali divisori del numero.  Se scorrendo tutti i numeri fra 2 e (numero - 1) non ne trova, allora \u00e8 un numero primo! Se invece trova anche un solo divisore, lo visualizza e interrompe il ciclo con il break, rendendo nullo l'else.</p> <p>Ecco un esempio analogo che utilizza la clausola else abbinata all'istruzione while.</p> sette e mezzo<pre><code>valoreCarte = 0.0\n\nwhile valoreCarte &lt;= 7.5:\n    # controllo quanto ho e decido se andare avanti o no\n    print(\"In mano hai\", valoreCarte)\n    risp = input(\"Vuoi una carta? (s/n)\")\n    if risp != \"s\":\n        break\n\n    # aggiungo la nuova carta\n    x = float( input(\"Dammi una carta: \") )\n    valoreCarte += x\n\nelse: # Indentazione! else \u00e8 incolonnato a while NON all'if!!!\n    print(\"Hai sballato, accidenti!!!\")\n\nprint(\"In mano hai\", valoreCarte)\n</code></pre> Prima esecuzione, vado sempre avanti<pre><code>In mano hai: 0.0\nVuoi una carta? (s/n) s\nDammi una carta: 5\nIn mano hai: 5.0\nVuoi una carta? (s/n) s\nDammi una carta: 3\nHai sballato, accidenti!!!\nIn mano hai 8.0\n</code></pre> Seconda esecuzione, mi fermo dopo la prima carta<pre><code>In mano hai: 0.0\nVuoi una carta? (s/n) s\nDammi una carta: 6\nIn mano hai: 6.0\nVuoi una carta? (s/n) n\nIn mano hai 6.0\n</code></pre> <p>Spero sia abbastanza chiaro. In generale ci sono altri modi per ovviare all'utilizzo di questi <code>for-else</code> o <code>while-else</code>, semplicemente con un paio di righe di codice in pi\u00f9. Di certo per\u00f2 queste istruzioni sono molto pythonic :)</p> <p>A voi la scelta per come e quando utilizzarle!</p>"},{"location":"basics/103_iter/#controllo-dei-valori-inseriti","title":"Controllo dei valori inseriti","text":"<p>Capita spesso e volentieri di voler controllare il valore che l'utente inserisce per essere sicuri non solo del tipo, ma anche del \"range\" del valore inserito: un numero intero fra 10 e 20, un reale diverso da 0, un carattere maiuscolo, etc...</p> <p>In questi casi \u00e8 possibile utilizzare il ciclo while e l'istruzione break appena studiata, abbinate ad un minimo di ingegno per far funzionare la cosa.</p> <p>Facciamo una prova.</p> Esercizio: inserimento di un numero intero fra 1 e 90 (per la tombola)<pre><code># ciclo con condizione sempre vera. Ripete all'infinito\nwhile True:\n    # nell'input dobbiamo suggerire all'utente cosa fare...*\n    num = int(input(\"Inserisci un numero fra 1 e 90: \"))\n\n    # controllo con interruzione\n    if num &gt;= 1 and num &lt;= 90:\n        break\n\n# visualizzazione finale\nprint(\"Numero inserito:\", num)\n</code></pre> <p>Capito vero? Verifichiamolo con qualche esercizio :)</p>"},{"location":"basics/103_iter/#esercizi-sul-controllo-valori","title":"Esercizi sul controllo valori","text":"<p>Esercizio 361</p> <p>Chiedere all'utente di inserire un numero intero fra 1 e 10. Ripetere l'inserimento finch\u00e9 la condizione non viene soddisfatta. Alla fine, visualizzare il numero inserito.</p> <p>Esercizio 362</p> <p>Chiedere all'utente di inserire un numero intero pari fra 0 e 100. Ripetere l'inserimento finch\u00e9 la condizione non viene soddisfatta. Alla fine, visualizzare il numero inserito.</p> <p>Esercizio 363</p> <p>Chiedere all'utente di inserire un numero reale negativo. Ripetere l'inserimento finch\u00e9 la condizione non viene soddisfatta. Alla fine, visualizzare il numero inserito.</p> <p>Esercizio 364</p> <p>Chiedere all'utente di inserire un carattere, fra le maiuscole 'A', 'B', 'C'. Ripetere l'inserimento finch\u00e9 la condizione non viene soddisfatta. Alla fine, visualizzare il carattere inserito.</p> <p>Esercizio 365: caratteri minuscoli</p> <p>Chiedere all'utente di inserire un carattere minuscolo. Ripetere l'inserimento finch\u00e9 la condizione non viene soddisfatta. Alla fine, visualizzare il carattere inserito.</p> <p>Esercizio 366</p> <p>Chiedere all'utente di inserire 2 numeri reali, di cui il secondo non nullo (da verificare). Infine visualizzare il rapporto (il risultato della divisione) fra questi.</p> <p>Esercizio 367</p> <p>Predisporre un programma che permetta all'utente di inserire numeri interi e che si interrompa solo quando l'utente inserisce ZERO. Alla fine dell'inserimento visualizzare la somma e la media dei valori inseriti.</p> <p>Esercizio 368: interi, stringhe e congiunzioni (di stringhe)</p> <p>Chiedere all'utente di inserire caratteri minuscoli, finch\u00e9 non inserisce il carattere '!' per terminare. Alla fine si visualizzi tutti i caratteri inseriti, in una sola riga, separati da spazi.</p> <p>Suggerimento</p> <p>Create una stringa congiungendo il carattere inserito e uno spazio...</p> <p>Esercizio 369</p> <p>Visualizzare la domanda \"Hai capito?\" e continuare a ripeterla finch\u00e9 l'utente non dice \"s\u00ec\" (con l'accento sulla \u00ec, mi raccomando...)</p>"},{"location":"basics/103_iter/#esercizio-ragionato-svolto","title":"Esercizio \"ragionato\" svolto","text":"<p>Questo esercizio \u00e8 stato pensato perch\u00e9 arrivati a questo punto, in cui conosciamo tutte le istruzioni base del linguaggio, dobbiamo migliorare nella nostra capacit\u00e0 di risolvere gli esercizi. Dobbiamo trovare una strategia che ci permetta di affrontare ogni tipo di esercizio, anche molto difficile, con la speranza di riuscire a risolverlo.</p> <p>A questo proposito ho cercato di dividere la mia soluzione in step ben definiti che dovete assolutamente provare a riprodurre ogni volta che affrontate un problema un pochino pi\u00f9 articolato, come quelli che inizieranno a capitare da adesso in poi.</p> <p> STEP 0: lettura del testo dell'esercizio </p> <p>Cominciamo leggendo attentamente il testo dell'esercizio:</p> <p>Dato un numero intero positivo N da parte dell'utente, dire se esso \u00e8 primo oppure no.</p> <p>Invece di provare a buttare gi\u00f9 codice nella speranza che l'esercizio \"si risolva magicamente\", proviamo ad applicare un metodo \"scientifico\" per trovare una soluzione.</p> <p> STEP 1: organizzazione delle conoscenze sul contesto </p> <p>Cosa significa questa cosa? Significa cercare di fare mente locale su tutto quello che si sa sugli argomenti relativi all'esercizio, conoscenze che possono aiutarci a risolverlo!!!</p> <p>Dedicate 5 minuti almeno a questa fase!!!</p> <p>Iniziamo insieme a ragionarci su, anche rileggendo il testo dell'esercizio.</p> <p>La prima cosa da notare \u00e8 che l'esercizio si divide in 2 parti:</p> <ol> <li>Chiedere all'utente di inserire un numero intero positivo N</li> <li>Dire se N \u00e8 primo oppure no</li> </ol> <p>Mi immagino che siamo tutti sereni con la prima parte che si svolge come spiegato nel capitolo sul \"Controllo dei valori inseriti\": ridateci un occhio se ci sono problemi su questa parte. Scrivo il codice necessario:</p> <pre><code>while True:\n    N = int(input(\"Inserisci un numero intero positivo: \"))\n    if N &gt; 0:\n        break\n</code></pre> <p>La seconda parte \u00e8 quella pi\u00f9 difficoltosa: come si capisce se un numero \u00e8 primo? Come si calcola? Cos'\u00e8 un numero primo???</p> <p>Un numero naturale maggiore di 1 si definisce primo se \u00e8 divisible solamente per 1 e per se stesso. (Wikipedia, cit.)</p> <p>Mi sembra che cosa sia un numero primo si sappia... ma per investigare bene il problema non ci si pu\u00f2 esimere dal prossimo step!!!</p> <p> STEP 2: esempi su valori possibili per l'esercizio </p> <p>Partiamo scrivendo su carta alcuni esempi che possono aiutarci a riflettere:</p> <ul> <li>7 \u00e8 primo perch\u00e9 \u00e8 divisibile solo per 1 e per 7. Infatti, nessuno dei numeri fra 2 e 6 divide 7.</li> <li>18 non \u00e8 primo perch\u00e9 \u00e8 divisibile per 2, per 3, per 6, per 9...</li> <li>11 \u00e8 primo perch\u00e9 \u00e8 divisibile solo per 1 e per 11. Nessun altro numero divide 11</li> <li>25 non \u00e8 primo perch\u00e9 \u00e8 divisibile (anche) per 5, oltre ch\u00e9 per 1 e per 25 stesso.</li> </ul> <p> STEP 3: considerazioni desunte dagli esempi </p> <p>Per fare queste considerazioni, pi\u00f9 esempi fate prima e meglio \u00e8... Dagli esempi precedenti ho capito che:</p> <ul> <li>tutti i numeri (primi o no) sono divisibili per 1</li> <li>tutti i numeri (primi o no) sono divisibili per se stessi</li> <li>Se N \u00e8 primo, nessun numero fra 2 e N-1 lo divide</li> <li>Dato N, se almeno un numero fra 2 e N-1 divide N, allora N non \u00e8 primo.</li> </ul> <p>Siete d'accordo? Queste considerazioni le ho fatte guardando gli esempi che mi sono fatto! Fatene anche voi e provate a vedere se quello che ho scritto vi convince e se vi vengono in mente altre idee.</p> <p> STEP 4: formulazione di una strategia risolutiva </p> <p>Da questi primi esempi comincio a formulare una strategia.</p> <p>Dato N:</p> <ul> <li>scorro tutti i numeri fra 2 e N-1</li> <li>vedo se qualcuno di questi divide N</li> <li>Se anche uno solo divide N, N non \u00e8 primo!</li> <li>Se nessuno di questi divide N, allora N \u00e8 primo!</li> </ul> <p>La cosa pi\u00f9 semplice da fare mi sembra contare quanti numeri fra 2 e N-1 dividono N. Se la conta porta ZERO, allora N \u00e8 primo, altrimenti NO!</p> <p>A questo punto ho un altro problema: come contare i divisori di N? Ho capito che i divisori di N sono tutti i numeri positivi minori di N e che 1 e N stessi vanno esclusi, perch\u00e9 non sono divisori interessanti.</p> <p>Provo a organizzare le cose da fare in questo modo:</p> <p>Passaggio 1 Dato N, visualizzo tutti i numeri fra 2 e N - 1</p> <p>Passaggio 2 Dato N, visualizzo quali numeri fra 2 e N - 1 dividono N</p> <p>Passaggio 3 Dato N, conto quanti numeri fra 2 e N -- 1 dividono N</p> <p>Passaggio 4 (finale) Dato N, faccio lo step 3 e poi guardo il risultato: se la conta \u00e8 ZERO, N \u00e8 primo, altrimenti no.</p> <p>Attenzione adesso... siete riusciti a figurarvi i passaggi descritti sopra?!?! Bene! Allora sappiate 2 cose:</p> <ol> <li>arrivati qui avete gi\u00e0 praticamente risolto l'esercizio</li> <li>la descrizione dei passaggi rappresenta esattamente i commenti che    servono nel codice!</li> </ol> <p>Capito il concetto?! I commenti che il prof tanto agogna scriviate nelle vostre risoluzioni sono esattamente questi, ovvero i passaggi che intendete fare per risolvere un quesito. Come poi li farete, ovvero con quale codice (un if, un if-else, un for oppure uno while) \u00e8 secondario rispetto a questo!</p> <p> STEP 5: prima stesura del codice </p> <p>Provo a scrivere il codice:</p> <p>Passaggio 1</p> <pre><code># Dato N, visualizzo tutti i numeri fra 2 e N - 1\nfor div in range(2, N -- 1):\n    print (div)\n</code></pre> <p>Passaggio 2</p> <pre><code># Dato N, visualizzo quali numeri fra 2 e N - 1 dividono N\nfor div in range(2, N -- 1):\n    if N % div == 0:\n        print (div)\n</code></pre> <p>Passaggio 3</p> <pre><code># Dato N, conto quanti numeri fra 2 e N - 1 dividono N\nconta = 0\nfor div in range(2, N -- 1):\n    if N % div == 0:\n        conta += 1\n</code></pre> <p>Passaggio 4 (finale)</p> <pre><code># Dato N, faccio lo step 3 e poi guardo il risultato\n# se la conta \u00e8 ZERO, N \u00e8 primo, altrimenti no.\n. . .\n\nif conta == 0:\n    print(N, \"\u00e8 primo\")\nelse:\n    print(N, \"non \u00e8 primo\")\n</code></pre> <p> STEP 6: stesura finale del codice </p> <p>Fatto questo, mi basta rimettere insieme tutto il ragionamento e il gioco \u00e8 fatto!</p> <pre><code># inserimento controllato valore utente\nwhile True:\n    N = int(input(\"Inserisci un numero intero positivo: \"))\n    if N &gt; 0:\n        break\n\n# conta dei divisori \"propri\" di N\nconta = 0\n\nfor div in range(2, N - 1):\n    if N % div == 0:\n        conta += 1\n\n# controllo numero dei divisori propri\nif conta == 0:\n    print(N, \"\u00e8 primo\")\nelse:\n    print(N, \"non \u00e8 primo\")\n</code></pre> <p> STEP 7: test del codice scritto </p> <p>Arrivati a scrivere tutto, non \u00e8 mica finito!!! Il codice scritto va testato e controllato! Io direi che sono necessarie almeno 4 esecuzioni con valori diversi per verificarlo. Se tutto funziona, avete finito. Se ci sono problemi, bisogna analizzare a ritroso tutti gli step, a costo di ripartire dallo step 0!!!</p> <p>In effetti un piccolo errore in questo codice c'\u00e8... infatti, facendo alcune prove, ci si accorge che questo codice riconosce il numero 1 (e tecnicamente... anche tutti i negativi) come primo, mentre wikipedia (vedi sopra) ci dice che non lo \u00e8...</p> <p>Provate a correggere voi il codice...</p> <p>Rifate i test per verificare che adesso sia tutto a posto...</p> <p>Finito!</p> <p>Spero che abbiate capito il ragionamento svolto e (soprattutto) come esso si sia sviluppato ragionando a partire dal testo del quesito e da alcuni esempi reali che mi sono fatto coi numeri.</p> <p>Spero di avervi aiutato un po'... Ecco una serie di esercizi in cui mettervi alla prova!!!</p>"},{"location":"basics/103_iter/#esercizi-finali-sui-cicli","title":"Esercizi finali sui cicli","text":"<p>Gli esercizi elencati qua di seguito non sono semplici applicazioni dei concetti studiati finora, ma sono i primi esercizi che richiedono una buona dose di ragionamento e di preparazione per \"progettare\" la soluzione dell'esercizio.</p> <p>Esercizio 381</p> <p>Acquisire un numero positivo N e calcolarne la radice quadrata intera (ovvero il massimo intero x tale che x al quadrato sia minore o uguale a N).</p> <p>Esercizio 382</p> <p>Acquisire una sequenza di numeri interi e calcolare la somma di quelli positivi. Il programma deve terminare non appena l'utente inserisce per due volte consecutive un valore negativo.</p> <p>Esercizio 383</p> <p>Scrivere un programma che acquisisca da tastiera un numero intero assicurandosi che sia positivo e, successivamente, stampi a video i 5 anni bisestili strettamente superiori al numero acquisito.</p> <p>Esercizio 384</p> <p>Visualizzare la Tavola Pitagorica.</p> <p>Esercizio 385: numeri perfetti</p> <p>Un numero intero si dice perfetto se risulta uguale alla somma dei suoi divisori (minori del numero stesso). Ad esempio 6 = 1 + 2 + 3, che sono i suoi divisori, \u00e8 un numero perfetto.</p> <p>Dato un numero intero positivo C, da parte dell'utente, verificare se \u00e8 perfetto.</p> <p>Esercizio 386</p> <p>Dato un numero F, inserito dall'utente e compreso fra 0 e 12 (verificare), visualizzare il fattoriale di F.</p> <p>Il Fattoriale</p> <p>Il fattoriale di un numero intero positivo F si indica con ! ed \u00e8 definito come il prodotto di tutti i numeri da 1 a F. Ad esempio:</p> <pre><code>6! = 1 * 2 * 3 * 4 * 5 * 6 = 720\n</code></pre> <p>Per definizione inoltre abbiamo:</p> <pre><code>0! = 1\nn! = ( n - 1 ) ! * n\n</code></pre> <p>Esercizio 387: cornice rettangolare</p> <p>Visualizzazione di un rettangolo con cornice \"+\" e interno \"=\" di misure A e B, decise dall'utente</p> <p>Esercizio 388: rettangolo</p> <p>Programma che disegna un rettangolo di caratteri di BASE e ALTEZZA scelti dall'utente. Il rettangolo \u00e8 formato da un carattere a scelta come cornice e da un carattere a scelta all'interno.</p> <p>Esercizio 389: MCM</p> <p>Inseriti 2 numeri interi positivi (verificare) da parte dell'utente, calcolare il minimo comune multiplo fra di essi.</p> <p>Esercizio 390: MCD</p> <p>Inseriti 2 numeri interi positivi (verificare) da parte dell'utente, calcolare il Massimo Comun Divisore fra di essi.</p> <p>Esercizio 391: Quadrato Perfetto</p> <p>Un quadrato perfetto \u00e8 un numero della sequenza 1, 4, 9, 16, 25... ovverosia un numero qualsiasi creato come prodotto per se stesso di un qualunque numero intero positivo.</p> <p>Dati dall'utente 2 numeri A, B positivi (da verificare) e tali che A sia minore o uguale a B, visualizzare il numero di quadrati perfetti presenti nella sequenza dei numeri [A, B].</p> <p>Ad esempio, dati A = 6, B = 16, la risposta \u00e8 2 perch\u00e9 fra 6 e 16 sono presenti i quadrati perfetti 9 e 16 stesso.</p> <p>Dati A = 4 e B = 5, la risposta \u00e8 1 perch\u00e9 fra 4 e 5 \u00e8 presente un solo quadrato perfetto, cio\u00e8 4.</p> <p>Esercizio 392</p> <p>Scrivere un programma che riceva in ingresso un numero positivo N e determini il massimo intero K tale che la somma dei primi K interi sia minore o uguale a N. Ad esempio, se N=20 allora K risulta 5, infatti</p> <pre><code>1 + 2 + 3 + 4 + 5 = 15\n</code></pre> <p>mentre</p> <pre><code>1 + 2 + 3 + 4 + 5 + 6 = 21\n</code></pre> <p>Esercizio 393: Fibonacci</p> <p>La successione di Fibonacci</p> <p>\u00c8 una sequenza numerica tale che:</p> <ul> <li>il primo numero \u00e8 0</li> <li>il secondo numero \u00e8 1</li> <li>il numero successivo si ottiene come somma dei due precedenti</li> </ul> <p>Iterando questo procedimento si ottiene la sequenza 0, 1, 1, 2, 3, 5, 8, 13, 21 ... nota come Successione di Fibonacci.</p> <p>Dato un numero intero N da parte dell'utente (verificare che sia positivo), visualizzare la successione di Fibonacci da 0 fino all'ennesimo numero.</p> <p>Ad esempio, dato N = 8, va visualizzata la successione: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13.</p> <p>Esercizio 394</p> <p>Dopo aver fatto inserire un numero intero positivo dire da quante cifre \u00e8 composto il numero. Ad esempio 12345 \u00e8 composto da 5 cifre.</p> <p> </p>"},{"location":"basics/104_seq/","title":"Sequenze","text":"<p>Una sequenza \u00e8 intuitivamente una collezione di elementi messi \"in fila\". Pur potendo considerare, in siffatte strutture, tipologie di oggetti anche molto diversi (anche fra loro, all'interno della stessa sequenza) ci sono una serie di operazioni che funzionano comunque in questo contesto: ad esempio contare gli elementi presenti nella sequenza o verificare se un certo elemento \u00e8 presente all'interno della stessa.</p> <p>Le operazioni che adesso andiamo ad elencare sono comuni a tutte le sequenze.</p> <p>Nella tabella seguente</p> <p>x, y, z sono elementi possibilmente presenti in una sequenza,  s e t sono sequenze di esempio,  i, k, n sono numeri interi.</p> Comando o Funzione Descrizione x in s True se un elemento di s \u00e8 uguale a x, altrimenti False x not in s False se un elemento di s \u00e8 uguale a x, altrimenti True s + t La sequenza prodotta dalla concatenazione di s e t s * n oppure n * s La sequenza prodotta dalla concatenazione di s con se stessa per n volte s [ i ] L'elemento della sequenza s al posto i, considerando che il primo elemento della sequenza si trova al posto ZERO. len (s) Numero di elementi di s, lunghezza di s min (s) Elemento pi\u00f9 piccolo di s max (s) Elemento pi\u00f9 grande di s s.count (x) Numero di volte in cui x compare nella sequenza s s.index (x) La prima posizione della sequenza s ove si trova l'elemento x. Ritorna errore se l'elemento non \u00e8 presente. <p>Ora... queste operazioni sembrano molto generiche come il concetto stesso di \"sequenza\". Allora, per partire con un esempio semplice pensiamo cos\u00ec: una stringa non \u00e8 altro che una sequenza di caratteri!!</p> <p>Pi\u00f9 precisamente... le stringhe sono definite in Python come delle sequenze immutabili di caratteri. Lasciamo a dopo il significato di immutabile e concentriamoci sul fatto che sono sequenze: supportano tutte le operazioni che abbiamo appena elencato.</p> <p>Facciamo degli esempi per illustrare il concetto:</p> Operatore *in*<pre><code>if \"n\" in \"Python\":\n    print(\"Presente\")\nelse:\n    print(\"Assente\")\n\n# scrive \"Presente\"\n</code></pre> <p>Altro esempio: </p> Operatore *not in*<pre><code>if \"s\" not in \"Python\":\n    print(\"Assente\")\n\n# scrive \"Assente\"\n</code></pre> Operatore +<pre><code>nome = \"Capo\" + \"Stazione\"\nprint(nome)\n\n# scrive \"CapoStazione\"\n</code></pre> <p>Altro esempio:</p> Operatore *<pre><code>parola = \"Acqua\" * 3\nprint(parola)\n\n# scrive \"AcquaAcquaAcqua\"\n</code></pre> <p>Per quanto riguarda l'operatore <code>sequenza[intero]</code> che ci permette di visualizzare l'elemento al posto richiesto, vanno precisate alcune cose:</p> <ul> <li>il primo elemento \u00e8 l'elemento al posto ZERO</li> <li>Andando avanti ogni elemento si trova (ovviamente) al posto successivo</li> </ul> <p>Vediamo un esempio:</p> <pre><code>nome = \"Leonardo\"\nprint(\"Al posto 0 troviamo: \", nome[0])\nprint(\"Al posto 4 troviamo: \", nome[4])\nprint(\"Al posto 8 troviamo: \", nome[8])\n\n# Scrive:\n# Al posto 0 troviamo L\n# Al posto 4 troviamo a\n# Al posto 8 troviamo ERRORE!!!\n</code></pre> <p>Va inoltre specificato che la numerazione degli elementi di una sequenza funziona anche con i numeri negativi, dove:</p> <ul> <li>l'ultimo elemento \u00e8 quello al posto -1</li> <li>il penultimo \u00e8 quello al posto -2</li> <li>.. e cos\u00ec via fino al primo elemento</li> </ul> <p>Ancora un esempio:</p> <pre><code>cognome = \"Da Vinci\"\nprint(\"All'ultimo posto: \", cognome[-1])\nprint(\"Al penultimo posto: \", cognome[-2])\nprint(\". . .\" , cognome[-9])\n\n# Scrive:\n# All'ultimo posto: i\n# Al penultimo posto: c\n# . . . ERRORE!!!\n</code></pre> <p>Riassumendo il concetto con un disegno, inizializzata una stringa, le posizioni degli elementi si contano come in figura:</p> <pre><code>linguaggio = \"Python\"\n</code></pre> <p></p> <p>La funzione <code>len(sequenza)</code> ci dice il numero di elementi della stessa.</p> <pre><code>print(linguaggio , \"contiene\" , len(linguaggio) , \"caratteri\")\n\n# scrive \"Python contiene 6 caratteri\"\n</code></pre> <p>La funzione <code>sequenza.count(elemento)</code> ci dice quante volte un elemento compare in una sequenza.</p> <pre><code>prova = \"Buonasera\"\nprint(\"Quante 'a' in \" , prova , \":\" , prova.count('a') )\nprint(\"Quante 't' in \" , prova , \":\" , prova.count('t') )\n\n# scrive:\n# Quante a in Buonasera: 2\n# Quante t in Buonasera: 0\n</code></pre> <p>Attenzione</p> <p>Attenzione alla differenza fra maiuscole e minuscole!!!</p> <p>La funzione <code>sequenza.index(elemento)</code> ritorna la prima posizione in cui si trova un elemento ed errore se l'elemento non \u00e8 presente, quindi ATTENZIONE!!!</p> <pre><code>prova = \"Buonasera\"\nprint( prova.index('a') )\n\n# scrive 4\n</code></pre> <p>Mentre...</p> <pre><code>print( prova.index('t') )\n\n# ERRORE!\n</code></pre> <p>Per assicurarci che la funzione <code>index()</code> non dia errore bisogna controllare la presenza o meno della variabile nella parola:</p> <pre><code>if 't' in prova:\n    print( prova.index('t') )\n</code></pre> <p>Le funzioni <code>min(sequenza)</code> e <code>max(sequenza)</code> ci ritornano rispettivamente l'elemento minore e maggiore della sequenza.</p> <pre><code>nome = \"Gianmarco\"\nprint( min(nome) ) \n# scrive 'G'\nprint( max(nome) ) \n# scrive 'r'\n</code></pre> <p></p> <p>Se, come spero, grazie agli esempi sopra le funzioni tipiche delle sequenze saranno molto pi\u00f9 chiare, rimane ancora un mistero da svelare, ovvero per quale assurdo motivo la lettera pi\u00f9 piccola (min) della parola \"Gianmarco\" sia la \"G\" invece  della 'a'? Non funziona l'ordine alfabetico?</p> <p>Questo funzionamento dipende dal fatto che i caratteri sono memorizzati all'interno dei nostri dispositivi come sequenze numeriche e la corrispondenza numero-lettera \u00e8 data dal cosiddetto codice ASCII.</p> <p>Guardate l'immagine sul codice ASCII che riporta i caratteri stampabili in una tabella: come si desume osservandola, le lettere maiuscole, ordinate secondo l'alfabeto tradizionale, vengono tutte prima delle minuscole e secondo il confronto numerico sono da considerarsi \"pi\u00f9 piccole\".</p>"},{"location":"basics/104_seq/#lavorare-con-le-sequenze","title":"Lavorare con le sequenze","text":"<p>Quando vogliamo controllare se un valore si trova in una sequenza, abbiamo capito di poter ricorrere all'operatore <code>in</code> all'interno di una istruzione condizionale, un <code>if-else</code>:</p> <pre><code>parola = input(\"Inserisci una parola\")\nif \"a\" in parola:\n    print(\"la parola che hai scritto contiene la 'a'\")\nelse:\n    print(\"la parola che hai scritto NON contiene la 'a'\")\n</code></pre> <p>A seconda della parola che l'utente inserisce ci aspettiamo una risposta diversa. Questo perch\u00e9 l'istruzione elemento in sequenza ritorna un valore boolean che pu\u00f2 essere True o False esattamente come serve al comando if.</p> <p>Questo controllo funziona con qualunque stringa: ad esempio funziona benissimo anche per la ricerca delle sottostringhe:</p> <pre><code>if \"gn\" in parola:\n    print(\"la parola che hai scritto contiene la 'gn'\")\nelse:\n    print(\"la parola che hai scritto NON contiene la 'gn'\")\n</code></pre> <p>C'\u00e8 per\u00f2 un altro metodo di applicare l'operatore <code>in</code> alle sequenze che \u00e8 quello del comando <code>for..in</code>:</p> <pre><code>parola = \"oggi\"\nfor car in parola:\n    print(car)\n</code></pre> <p>Scrive:</p> <pre><code>o\ng\ng\ni\n</code></pre> <p>Come si desume osservando l'esempio, il comando <code>FOR elemento IN sequenza</code> scorre tutta la sequenza, assegnando ogni volta alla variabile ausiliaria <code>elemento</code> il valore di uno degli elementi della sequenza.</p> <p>Se invece vogliamo scorrere le posizioni dobbiamo muoverci con un ciclo <code>FOR...IN RANGE()</code>, Infatti una sequenza \u00e8 lunga <code>len(sequenza)</code> elementi e i suoi elementi sono numerati da <code>0</code> a <code>len(sequenza) - 1</code>, esattamente come si comporta la funziona <code>range(len(sequenza))</code>.</p> <pre><code>    parola = \"oggi\"\n    for pos in range(len(parola)):\n        print(\"posizione\" , pos , \":\" , parola[pos])\n</code></pre> <p>Scrive:</p> <pre><code>posizione 0: o\nposizione 1: g\nposizione 2: g\nposizione 3: i\n</code></pre> <p>Facile e comodo. Tutto chiaro?</p>"},{"location":"basics/104_seq/#esercizi-sulle-stringhe","title":"Esercizi sulle stringhe","text":"<p>Negli esercizi che seguono dobbiamo ricordare che le stringhe in Python non sono altro che un tipo particolare di sequenza (di caratteri). Aggiungo inoltre che per ogni necessit\u00e0 ulteriore ci sono sempre le funzioni <code>dir()</code> e <code>help()</code>.</p> <p>Esercizio 401</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Poi visualizzare i caratteri che compongono la stringa uno per riga.</p> <p>Esercizio 402</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Poi visualizzare il numero di caratteri presenti nella stringa inserita.</p> <p>Esercizio 403</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla.</p> <p>Chiedere successivamente di inserire un carattere (verificare che sia un solo carattere!) e verificare se esso \u00e8 presente nella stringa inserita.</p> <p>Infine verificare se il carattere \u00e8 presente nell'altro caso (ad esempio se l'utente inserisce il carattere \"a\" ma nella stringa \u00e8 presente il carattere \"A\").</p> <p>(suggerimento: guarda <code>dir(str)</code> e <code>help(str.upper)</code> oppure <code>help(str.lower)</code>).</p> <p>Esercizio 404</p> <p>Chiedere all'utente di inserire il proprio nome, da salvare in una variabile e successivamente il proprio cognome, da salvare in un'altra variabile. Creare la variabile nominativo che contiene il nome inserito, uno spazio e il cognome inserito. Visualizzare la variabile nominativo cos\u00ec creata.</p> <p>Esercizio 405</p> <p>Chiedere all'utente di inserire una frase e un numero intero. Poi visualizzare la frase inserita per quel numero di volte.</p> <p>Esercizio 406</p> <p>Chiedere all'utente di inserire una frase e un numero intero. Poi creare una stringa che contiene la frase , uno spazio, la frase, uno spazio, la frase, uno spazio... per il numero di volte inserito dall'utente. L'ultimo spazio non va inserito!!!</p> <p>Ad esempio, dato \"cane\" e 3, la stringa da creare sar\u00e0 \"cane cane cane\". Non basta visualizzarla: il valore va assegnato ad una variabile.</p> <p>Visualizzare la stringa cos\u00ec creata.</p> <p>Esercizio 407</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla tutta scritta in caratteri maiuscoli. </p> <p>(suggerimento: guarda <code>dir(str)</code> e <code>help(str.upper)</code>)</p> <p>Esercizio 408</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla tutta scritta in minuscolo con iniziali maiuscole per ogni parola.</p> <p>(suggerimento: guarda <code>dir(str)</code> e <code>help(str.title)</code>)</p> <p>Esercizio 409</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Chiedere successivamente di inserire un carattere e contare quante volte il carattere \u00e8 presente nella stringa inserita.</p> <p>Ripetere lo stesso calcolo ignorando il caso, ovvero contando le lettere minuscole e/o maiuscole presenti.</p> <p>Esercizio 410</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Contare le vocali (maiuscole e minuscole) presenti nella stringa. (Come si fa??)</p> <p>Esercizio 411</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Successivamente verificare se la stringa inizia oppure no con una vocale.</p> <p>Esercizio 412</p> <p>Chiedere all'utente di inserire una frase e visualizzarla in modo tale che ogni volta che si incontra uno spazio si vada a capo.</p> <p>(suggerimento: <code>help(print)</code> )</p> <p>Questo esercizio va fatto modificando il comportamento della funzione print().</p> <p>Chiedetemi se l'help non vi risulta troppo chiaro!</p> <p>Esercizio 413</p> <p>Chiedere all'utente di inserire il proprio nome. Se esso termina per 'o' visualizzare la frase \"Sei un maschio?\". Se esso termina per \"a\" visualizzare la frase \"Sei una femmina?\". In tutti gli altri casi visualizzare la frase \"Sei un maschio o una femmina?\".</p> <p>Esercizio 414</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Successivamente chiedere all'utente di inserire un carattere e verificare se esso \u00e8 presente nella stringa. Se \u00e8 presente, chiedere un secondo carattere e rimpiazzare nella stringa tutte le occorrenze del primo carattere con il secondo.</p> <p>(Suggerimento: <code>help(str.replace)</code> )</p> <p>Esercizio 415</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Successivamente visualizzare il carattere pi\u00f9 volte presente nella stringa.</p> <p>Esercizio 416</p> <p>Chiedere all'utente di inserire un numero intero N e calcolare il valore decimale di 1/N. Le sue cifre decimali contengono la cifra 9? In quale posizione?</p> <p>(Suggerimento: calcolare 1/N come float, poi convertirlo in stringa e...)</p> <p>Esercizio 417</p> <p>Dichiarare la stringa alfabeto, contenente tutte le lettere dell'alfabeto, la stringa numeri, contenente tutte le cifre da 0 a 9 e la stringa alfanumerici, contenenti tutti i caratteri di punteggiatura diversi che riuscite ad inserire in una stringa.</p> <p>Chiedere all'utente di inserire una stringa e dire se essa contiene lettere, cifre, caratteri alfanumerici o spazi.</p> <p>Esercizio 418</p> <p>Chiedere all'utente di inserire una stringa e visualizzarla. Visualizzare le vocali presenti nella stringa. Visualizzare la posizione delle vocali presenti nella stringa.</p> <p>Esercizio 419</p> <p>Chiedere all'utente di inserire una frase qualsiasi, lunga a piacere. Visualizzare la stringa inserita.</p> <p>Chiedere poi all'utente di inserire un carattere a piacere, verificando che sia una lettera e che sia solo uno. Ad esempio \"f\" va bene (lettera singola), \"?\" non va bene (no lettera), \"fa\" non va bene (2 lettere). Contare quante volte il carattere \u00e8 presente nella frase (minuscolo e maiuscolo).</p> <p>Permettere all'utente di inserire un nuovo carattere singolo e sostituire le occorrenze del carattere precedente con il nuovo, visualizzando la stringa risultante</p> <p>Ad esempio, inserita la stringa \"buonasera\" e indicato prima il carattere \"a\" e successivamente il carattere \"g\" dovr\u00e0 essere visualizzata la stringa \"buongserg\".</p>"},{"location":"basics/104_seq/#tuple","title":"Tuple","text":"<p>Python fornisce un tipo predefinito, chiamato tupla, per indicare una sequenza immutabile di oggetti, di solito diversi fra loro anche per tipo.</p> <p>In Python, un tipo di dato si dice immutabile se, una volta definito il suo valore, esso non pu\u00f2 essere modificato.</p> <p>Viceversa un tipo di dato si dice mutabile se il suo valore pu\u00f2 essere modificato anche dopo essere stato definito.</p> <p>Essendo la tupla un tipo sequenza, essa supporta tutte le operazioni definite per le sequenze e visionate poco fa per le stringhe.</p> <p>Una tupla si definisce elencando dentro le parentesi tonde una serie di valori separati da virgola:</p> <pre><code>tabellina7 = ( 7 , 14 , 21 , 28 , 35 , 42 , 49 , 56 , 63 , 70 )\n</code></pre> <p>Come dicevamo, per le tuple valgono tutte le operazioni tipiche delle sequenze:</p> <pre><code>len(tabellina7) # vale 10\nmin(tabellina7) # vale 7\n</code></pre> <p>Possiamo controllare la presenza di un valore con IN:</p> <pre><code>num = int(input(\"Inserisci un numero: \"))\nif num in tabellina7:\n    print(num,\"fa parte della tabellina del 7\")\n</code></pre> <p>Oppure visualizzare i valori con un ciclo:</p> <pre><code>for num in tabellina7:\n    print(num)\n</code></pre> <p>Scrive:</p> <pre><code>7\n14\n21\n28\n35\n42\n49\n56\n63\n70\n</code></pre> <p>Facciamo un altro esempio con valori eterogenei:</p> <pre><code>tupla = (\"ciao\" , 12 , 23.45 , 1000000 , 12, \"come??\")\nprint(tupla)\n</code></pre> <p>scrive: </p> <pre><code>( \"ciao\" , 12 , 23.45, 1000000 , 12, \"come??\" )\n</code></pre> <pre><code>tupla.count(12) # vale 2\ntupla.index(12) # vale 1 (la posizione della prima istanza di 12)\n</code></pre> <p>Ricordo che i valori presenti in una sequenza sono numerati dal primo all'ultimo a partire da zero, quindi:</p> <pre><code>    tupla[0] # vale \"ciao\"\n    tupla[3] # vale 1000000\n    tupla[1] = \"prova\" ERRORE!!!\n</code></pre> <p>Errore!!!</p> <pre><code>tupla[1] = \"prova\" # ERRORE!!!\n</code></pre> <p>Le tuple sono immutabili! Ricordate???</p> <p>A occhio sembrano abbastanza facili! Attenti per\u00f2...</p> <p>In Python la definizione di una tupla non richiede espressamente le parentesi tonde, basta elencare i valori con la virgola. Ecco allora che lo studente sprovveduto potrebbe scrivere:</p> <pre><code>pigreco = 3,14\nprint(pigreco)\n</code></pre> <p>scrive:</p> <pre><code>( 3 , 14 )\n</code></pre> <p>mentre:</p> <pre><code>pi = 3.14\nprint(pi)\n</code></pre> <p>scrive:</p> <pre><code>3.14\n</code></pre> <p>ATTENZIONE!!!</p> <p>pigreco \u00e8 una tupla NON un valore reale!</p> <pre><code>type (pigreco) scrive &lt;class 'tuple'&gt;\ntype (pi)      scrive &lt;class 'float'&gt;\n</code></pre> <p>In Python il separatore decimale \u00e8 il punto NON la virgola!!!</p> <p>Quando si usano le tuple \u00e8 sempre meglio utilizzare sempre le parentesi tonde per evitare spiacevoli equivoci!!!</p> <pre><code># scrivi le tuple con le parentesi tonde!\ntupla = (3,14)\n</code></pre> <p>La caratteristica delle tuple di essere immutabili non limita comunque la possibilit\u00e0 di inserirvi dati via codice: basta semplicemente usare qualche accortezza!</p> Esempio: definire la tupla 'datiPersonali' con nome e cognome inseriti dall'utente<pre><code>nome = input(\"Inserisci nome: \")\ncognome = input(\"Inserisci cognome: \")\ndatiPersonali = ( nome , cognome )\n</code></pre> Esempio: definire la tupla tabellina del numero scelto dall'utente<pre><code>num = int ( input(\"Inserisci numero: \") )\ntabellina = (num*1 , num*2 , num*3 , num*4 , num*5 , num*6 , num*7 , num*8 , num*9 , num*10)\n</code></pre> Esempio: definire una tupla con un solo valore<pre><code>es1 = (1,)\nes2 = (1)\nprint(\"es1:\",es1, type(es1))\nprint(\"es2:\",es2, type(es2))\n</code></pre> <p>scrive:</p> <pre><code>es1: (1,) &lt;class 'tuple'&gt;\nes2: 1 &lt;class 'int'&gt;\n</code></pre> <p>In realt\u00e0, con un po' di furbizia e la sintassi giusta, \u00e8 possibile anche \"modificare\" una tupla:</p> <pre><code>tupla = ()\nfor i in range(10):\n    # questo codice OGNI volta crea una nuova tupla aggiungendo (i) in fondo al valore della precedente\n    # es: (1,2) + (3,) diventa la tupla (1,2,3) \n    tupla += (i,)\n\nprint(tupla)\n</code></pre> <pre><code>( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )\n</code></pre> <p>Spero sia tutto sufficientemente chiaro!</p> <p>Per schiarirsi definitivamente le idee... ci sono gli esercizi :)</p>"},{"location":"basics/104_seq/#esercizi-sulle-tuple","title":"Esercizi sulle Tuple","text":"<p>Esercizio 421</p> <p>Dichiarare una tupla con i nomi dei giorni della settimana. Visualizzare la tupla con una print, poi visualizzare la stessa con un ciclo, visualizzando i giorni uno per riga.</p> <p>Alla fine visualizzare il numero degli elementi della tupla con la funzione len.</p> <p>Esercizio 422</p> <p>Dichiarare una tupla con i nomi di alcuni dei propri parenti. Chiedere all'utente di inserire un nome e verificare se la persona ha lo stesso nome di un proprio parente. Visualizzare il risultato, confermando la ricerca visualizzando anche l'elenco dei propri parenti con un elenco intervallato da virgole.</p> <p>Ad esempio se la tupla contiene <code>(\"gino\", \"pino\")</code> e l'utente inserisce il nome <code>\"dino\"</code>, visualizzare una frase tipo: <code>\"dino\"</code> non pu\u00f2 essere mio parente, infatti i miei parenti si chiamano: <code>\"gino\", \"pino\"</code>.</p> <p>Esercizio 423</p> <p>Dichiarare una tupla con i nomi dei mesi.</p> <p>Chiedere all'utente di inserire una data digitando i numeri per giorno, mese, anno (ad esempio: 16 , 10 , 2020). Utilizzare la tupla con i nomi dei mesi per visualizzare la data nella forma <code>\"16 ottobre 2020\"</code>.</p> <p>Esercizio 424</p> <p>Dichiarare una tupla con i nomi dei nani, senza visualizzarla! Chiedere all'utente di inserire i nomi dei nani e verificare se li sa tutti oppure si sbaglia.</p> <p>Esercizio 425</p> <p>Dichiarare una tupla che contiene la tabellina del 5 e poi scrivere un ciclo per visualizzarla nella forma:</p> <pre><code>5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n. . .\n</code></pre> <p>Esercizio 426</p> <p>Chiedere all'utente di inserire un numero intero fra 2 e 15 (da verificare) e dichiarare la tupla che contiene la tabellina del numero inserito.</p> <p>Visualizzare la tupla cos\u00ec creata.</p> <p>Esercizio 427</p> <p>Chiedere all'utente di inserire i propri dati personali relativi a: nome, cognome, sesso, luogo di nascita. Poi dichiarare una tupla contenente queste 4 informazioni. Ripetere l'operazione per 3 persone. Alla fine devono rimanere nelle variabili tutti i dati inseriti!</p> <p>(sfida: provate a farlo con un ciclo, in modo da non dover ripetere le operazioni...)</p> <p>Esercizio 428</p> <p>Chiedere all'utente di inserire un numero reale in una variabile chiamata \"real\" e dichiarare la tupla cos\u00ec definita:</p> <pre><code>tupla = ( real * -1 , 0 , real , real * 3 , real * 0.5 )\n</code></pre> <p>Visualizzare la tupla cos\u00ec ottenuta e visualizzare il valore pi\u00f9 piccolo e pi\u00f9 grande di essa.</p> <p>Esercizio 429</p> <p>Chiedere all'utente di inserire 5 numeri reali e al termine dell'inserimento visualizzare la tupla composta dai numeri inseriti dall'utente.</p> <p>Chiedere all'utente di inserire un altro numero e verificare se esso sia presente nella tupla. In caso positivo visualizzare la prima posizione ove esso \u00e8 presente.</p> <p>Esercizio 430</p> <p>Chiedere all'utente di inserire una stringa e un numero intero positivo (verificare). Creare la tupla contentente la stringa per numero volte.</p> <p>Ad esempio, inserito <code>\"ciao\"</code> e <code>4</code> va creata la tupla  <code>(\"ciao\",\"ciao\",\"ciao\",\"ciao\")</code>.</p> <p>Chiedere all'utente di inserire due stringhe e un numero intero positivo (verificare). Creare la tupla contentente le due stringhe per numero volte. </p> <p>Ad esempio, inseriti <code>\"pippo\" , \"ciccio\"</code> e <code>3</code> va creata la tupla <code>(\"pippo\", \"ciccio\", \"pippo\", \"ciccio\", \"pippo\", \"ciccio\")</code>.</p> <p>Esercizio 431</p> <p>Chiedere all'utente di inserire 5 numeri interi e creare una tupla contenente questi 5 numeri. Visualizzare la tupla con una semplice print. Chiedere all'utente di inserire un numero qualsiasi e visualizzare la frase: \"il numero inserito \u00e8 presente nella tupla per TOT volte\". Ovviamente TOT va calcolato...</p>"},{"location":"basics/104_seq/#liste","title":"Liste","text":"<p>Python fornisce un tipo predefinito, chiamato lista, per indicare una sequenza mutabile di oggetti,  solitamente omogenei fra loro per tipo.</p> <p>Le liste vengono definite in fase di dichiarazione utilizzando le parentesi quadre per racchiudere l'elenco degli argomenti. Ancora una volta ricordo che le liste sono un altro tipo sequenza e che quindi supportano tutte le propriet\u00e0 definite per esse.</p> <pre><code>lista = [ 13, 8, 6, 11, 13, 22 ]\nprint(lista) # scrive [ 13, 8, 6, 11, 13, 22 ]\nlista[1] # vale 8\nmax(lista) # vale 22\n</code></pre> <p>Le liste sono oggetti mutabili, ovvero tali per cui \u00e8 possibile cambiarne il valore. Ad esempio:</p> <pre><code>quadrati = [0, 1, 4, 10, 16, 25] # oops...\nquadrati[3] = 9\nprint(quadrati) # scrive [0, 1, 4, 9, 16, 25]\n</code></pre> <p>Questa caratteristica di essere sequenze mutabili fornisce alle liste alcune funzionalit\u00e0 aggiuntive per la manipolazione semplice degli elementi delle stesse.</p> <p>Le funzioni che seguono sono caratteristiche solo delle liste e si aggiungono a tutte le funzionalit\u00e0 che derivano dal loro essere delle sequenze.</p> Funzione Descrizione list.append( elem ) Aggiunge elem in fondo alla lista. list.insert( index , elem ) Inserisce elem al posto index della lista, spostando in avanti i successivi list.pop( index = -1) Rimuove e restituisce elemento al posto <code>index</code> (oppure l'ultimo) list.remove( elem ) Trova e rimuove (la prima istanza di) elem dalla lista. list.sort() Ordina la lista (se possibile) in senso crescente list.reverse() Inverte l'ordine degli elementi della lista list.copy() Crea e restituisce una copia della lista list.clear() Rimuove tutti gli elementi dalla  lista <p>Vediamo ancora alcuni esempi per chiarire il funzionamento dei metodi descritti:</p> Esempio: metodo append()<pre><code># list.append(x) aggiunge l'elemento x in fondo alla lista\nlettere = [ 'c' , 'a' , 's' , 'o' ]\nlettere.append('!')\nprint(lettere)   # scrive [ 'c' , 'a' , 's' , 'o' , '!' ]\n</code></pre> Esempio: metodo insert()<pre><code># list.insert(n , x) inserisce l'elemento x al posto n della lista\n# lettere vale [ 'c' , 'a' , 's' , 'o' , '!' ]\nlettere.insert(3,'c')\nprint(lettere)   # scrive [ 'c' , 'a' , 's' , 'c' , 'o' , '!' ]\n</code></pre> Esempio: metodo pop()<pre><code># list.pop() estrare e ritorna l'ultimo elemento della lista\n# lettere vale [ 'c' , 'a' , 's' , 'c' , 'o' , '!' ]\nprint(lellere.pop())  # scrive !\nprint(lettere)        # scrive [ 'c' , 'a' , 's' , 'c' , 'o' ]\n</code></pre> Esempio: metodo pop(i)<pre><code># list.pop(n) estrare e ritorna l'elemento al posto n della lista\n# lettere vale [ 'c' , 'a' , 's' , 'c' , 'o' ]\nprint(lellere.pop(1)) # scrive a\nprint(lettere)        # scrive [ 'c' , 's' , 'c' , 'o' ]\n</code></pre> Esempio: metodo remove()<pre><code># list.remove(x) rimuove la prima occorrenza di x dalla lista\n# lettere vale [ 'c' , 's' , 'c' , 'o' ]\nlettere.remove('c')\nprint(lettere)        # scrive [ 's' , 'c' , 'o' ]\n</code></pre> <p>Nota!</p> <p><code>remove()</code> elimina solo la prima occorrenza dell'elemento</p> Esempio: metodo sort()<pre><code># list.sort() ordina la lista stessa, senza ritornare nulla!!!\n# lettere vale [ 's' , 'c' , 'o' ]\nlettere.sort()\nprint(lettere)    # scrive [ 'c' , 'o' , 's' ]\n</code></pre> Esempio: metodo reverse()<pre><code># list.reverse() rovescia l'ordine degli elementi della lista\n# lettere vale [ 'c' , 'o' , 's' ]\nlettere.reverse()\nprint(lettere)    # scrive [ 's' , 'o' , 'c' ]\n</code></pre> Esempio: metodo clear()<pre><code># list.clear() cancella la lista\n# lettere vale [ 's' , 'o' , 'c' ]\nlettere.clear()\nprint(lettere)    # scrive [], la lista vuota\n</code></pre> <p>Ho lasciato per ultimo 2 esempi per far capire la necessit\u00e0 del metodo copy() che restituisce una copia della lista pronta per essere assegnata ad una nuova variabile.</p> Esempio 1: senza copy le 2 variabili si riferiscono alla stessa lista<pre><code>list1 = [1 , 2 , 3]\nlist2 = list1\nlist2[0] = 5\nprint(list1)\n</code></pre> <pre><code>[ 5 , 2 , 3 ]\n</code></pre> Esempio 2: usando il metodo copy() la seconda variabile vale solo inizialmente uguale alla prima.<pre><code>list1 = [1 , 2 , 3]\nlist2 = list1.copy()\nlist2[0] = 5\nprint(list1)\n</code></pre> <pre><code>[ 1 , 2 , 3 ]\n</code></pre> <p>Spero sia chiaro! Capisco che queste cose non siano esattamente banali... ma fortunatamente \u00e8 possibile verificare chiaramente su uno ha davvero capito!</p> <p>Basta provare il codice degli esempi e provare a fare gli esercizi!</p>"},{"location":"basics/104_seq/#esercizi-sulle-liste","title":"Esercizi sulle liste","text":"<p>Esercizio 441</p> <p>Dichiarare una lista vuota e procedere ad inserire al suo interno tramite un ciclo i primi 30 numeri interi. Visualizzare la lista cos\u00ec ottenuta.</p> <p>Calcolare la somma dei numeri della lista e visualizzarla.</p> <p>Esercizio 442</p> <p>Dichiarare una lista vuota e procedere ad inserire al suo interno tramite codice la tabellina del 3. Visualizzare la lista cos\u00ec ottenuta, in modo da enunciare la tabellina come alle elementari:</p> <pre><code>3 per 1 = 3\n3 per 2 = 6\n. . .\n</code></pre> <p>Esercizio 443</p> <p>Dichiarare una lista vuota e chiedere all'utente di inserire un numero intero. Riempire la lista con la tabellina di quel numero. Visualizzare la lista cos\u00ec ottenuta.</p> <p>Esercizio 444</p> <p>Dichiarare una lista vuota e riempirla con i primi 20 numeri dispari. Visualizzare la lista cos\u00ec ottenuta. Successivamente procedere ad eliminare dalla lista tutti i numeri multipli di 3. Visualizzare gli elementi eliminati dalla lista e alla fine della procedura la lista rimanente dei dispari che non sono multipli di 3.</p> <p>Esercizio 445</p> <p>Dichiarare una lista vuota e permettere all'utente di digitare 7 numeri (interi o reali) da inserire nella lista. Alla fine dell'inserimento visualizzare la lista cos\u00ec ottenuta. Visualizzare successivamente il valore pi\u00f9 piccolo e il valore pi\u00f9 grande inseriti nella lista.</p> <p>Esercizio 446</p> <p>Permettere all'utente di inserire numeri interi finch\u00e9 non digita ZERO. Inserire man mano i numeri in una lista (lo zero non va inserito). Alla fine dell'inserimento visualizzare la lista cos\u00ec ottenuta. Visualizzare inoltre il numero di elementi presenti nella lista e la somma dei numeri della stessa.</p> <p>Esercizio 447</p> <p>Dichiarare una lista di numeri interi e visualizzare un istogramma orizzontale di asterischi della lista stessa. Ad esempio, data la lista [ 3 , 7 , 5 ] visualizzare:</p> <pre><code>***\n*******\n*****\n</code></pre> <p>Esercizio 448</p> <p>Dichiarare le due liste vuote \"listaParole\" e \"listaLunghezzaParole\". Permettere all'utente di inserire 10 parole, da memorizzare nella prima lista e calcolare successivamente la lunghezza di ogni parola per riempire la seconda lista. Infine visualizzare entrambe le liste, meglio se con una serie di frasi tipo:</p> <pre><code>la parola `listaParole[num]` \u00e8 lunga `listaLunghezzaParole[num]` caratteri.\n</code></pre> <p>Esercizio 449</p> <p>Dichiarare una lista vuota e fare inserire all'utente un intero positivo (da verificare) che rappresenter\u00e0 il numero di elementi da inserire nella lista. Permettere successivamente all'utente di inserire quella quantit\u00e0 di numeri interi. Visualizzare la lista cos\u00ec ottenuta. Procedere infine a visualizzare le posizioni della lista in cui si trovano dei numeri pari.</p> <p>Esercizio 450</p> <p>Data una lista di 20 interi, da riempire a piacere tramite codice:</p> <ul> <li>visualizzare la lista completa</li> <li>visualizzare la somma di tutti gli elementi che sono multipli di 3</li> <li>visualizzare la somma di tutti gli elementi che sono contemporaneamente multipli di 2 e di 3.</li> <li>contare gli elementi pari.</li> <li>visualizzare gli elementi in posizione pari.</li> <li>dato un numero intero a, visualizzare tutti gli elementi nelle posizioni multiple del numero.</li> <li>calcolare la somma e la media dei valori contenuti nella lista</li> </ul> <p>Esercizio 451</p> <p>Dichiarare una lista vuota e permettere all'utente di inserirvi 5 numeri reali. Visualizzare la lista cos\u00ec ottenuta. Successivamente ordinare la lista in senso crescente e visualizzarla ordinata.</p> <p>Rovesciare la lista e visualizzarla cos\u00ec ordinata in senso decrescente.</p> <p>Esercizio 452</p> <p>Dichiarare una lista vuota e permettere all'utente di inserirvi 5 numeri reali. Visualizzare la lista cos\u00ec ottenuta. Procedere ad una copia della lista in una nuova lista chiamata listaOrdinata e procedere al suo ordinamento in senso crescente.</p> <p>Procedere ad una copia della lista originale in una terza lista chiamata listaDecrescente e procedere al suo ordinamento in senso decrescente.</p> <p>Visualizzare le 3 liste cos\u00ec ottenute.</p> <p>Esercizio 453</p> <p>Scrivere un programma Python che inizializza una lista con i primi 100 numeri primi.</p>"},{"location":"basics/104_seq/#esercizi-sulle-sequenze","title":"Esercizi sulle sequenze","text":"<p>Gli esercizi qui presenti coinvolgono in maniera pi\u00f9 o meno casuale tutti i tipi sequenza e concludono idealmente lo studio delle stesse: riuscire in questi significa essere pronti per la verifica su questi argomenti (molti di questi esercizi sono tratti dalle verifiche degli scorsi anni).</p> <p>Buon lavoro!</p> <p>Numeri casuali</p> <p>Spesso ritorna utile (per gli esercizi) riempire una lista con una serie di numeri casuali tramite codice, in modo da poter evitare di fare l'inserimento a mano.</p> <pre><code># questo codice riempe una lista vuota con 100 elementi interi, ognuno compreso fra 1 e 50\n\n# serve per generare i numeri \"casuali\"\nimport random\n\n# la lista da riempire\nlista = []\n\nfor n in range(100):\n    # random.randint(A,B) genera numeri \"casuali\" fra A e B (entrambi gli estremi inclusi!!!)\n    numero = random.randint(1,50)\n    lista.append(numero)\n\n# visualizzo il risultato. Gi\u00e0 fatto!!!\nprint(lista)\n</code></pre> <p>Pi\u00f9 avanti approfondiremo questi concetti! Per adesso... usateli per comodit\u00e0</p> <p>Esercizio 481</p> <p>Creare una lista vuota e riempirla con 100 interi casuali compresi fra 1 e 50. Visualizzare la lista con 100 elementi. Procedere poi a rimuovere tutti i valori duplicati dalla lista.</p> <p>Visualizzare la lista con tutti valori unici (ovvero senza elementi duplicati).</p> <p>Esercizio 482</p> <p>Chiedere all'utente un numero intero compreso fra 1 e 100 (da verificare) e procedere alla sua visualizzazione in lettere.</p> <p>Ad esempio, dato 132 si fa ripetere l'inserimento per un numero fra 1 e 100.  Dato 75, si visualizzi la scritta \"settantacinque\".</p> <p>Esercizio 483</p> <p>Dichiarare una tupla con i nomi delle dita delle mani e una con i nomi delle dita dei piedi (li sai??). Poi visualizzare entrambe in parallelo. Una cosa tipo:</p> DITO MANO PIEDE Primo pollice alluce Secondo indice illice ... ... ... <p>Esercizio 484</p> <p>Dichiarare una lista vuota e riempirla con 20 numeri casuali (libreria random) compresi fra 1 e 100. Visualizzare la lista cos\u00ec ottenuta, ordinarla in senso crescente poi visualizzarla. Ordinarla in senso decrescente poi visualizzarla. Contare il numero di elementi pari presenti nella lista e visualizzarlo.</p> <p>Esercizio 485</p> <p>Partendo da un numero intero N, compreso fra 1 e 10, a scelta dell'utente, riempire una lista di 100 interi tali che:</p> <ul> <li>il primo numero della lista sia N stesso</li> <li>se il numero \u00e8 pari, il successivo sia uguale al doppio del precedente + 1</li> <li>se il numero \u00e8 dispari, il successivo sia uguale a 3 meno il precedente.</li> </ul> <p>Ad esempio, dato N = 6, si comincia con</p> <pre><code>6 , 13 , -10 , -19 , 22 ...\n</code></pre> <p>Visualizzare la lista ottenuta.</p> <p>Dalla lista precedente, creare 2 liste contenenti rispettivamente i numeri pari e i numeri dispari della stessa.</p> <p>Nella lista dei numeri dispari:</p> <ul> <li>Rendere tutti i numeri positivi, cambiandoli di segno se necessario.</li> <li>Ordinare la lista dei dispari positivi in senso decrescente.</li> </ul> <p>Nella lista dei numeri pari:</p> <ul> <li>Rendere tutti i numeri negativi, cambiandoli di segno se necessario.</li> <li>Ordinare la lista dei pari negativi in senso decrescente.</li> </ul> <p>Esercizio 487</p> <p>Dato un carattere da parte dell'utente, visualizzare se esso \u00e8 una lettera, una cifra o uno spazio (consulta: <code>help(str.isspace)</code>, <code>help(str.isdigit)</code>, <code>help(str.isalpha)</code> ).</p> <p>Esercizio 488</p> <p>Chiedere all'utente di inserire una stringa lunga a piacere. Visualizzare la stringa e il numero di caratteri che la compone.</p> <p>Ad esempio, data la stringa \"cane\", visualizzer\u00e0 una frase tipo:</p> <pre><code>\"la stringa cane \u00e8 lunga 4 caratteri\".\n</code></pre> <p>Definire la lista vocali, inizialmente vuota. Riempire la lista con tutte le vocali presenti nella stringa. Ad esempio, con la stringa \"cane\", la lista diventer\u00e0</p> <pre><code>vocali = [\"a\",\"e\"]\n</code></pre> <p>Esercizio 489</p> <p>Chiedere all'utente di inserire una stringa qualsiasi, visualizzarla e poi contare il numero di consonanti presenti nella stringa.</p> <p>Successivamente visualizzare la stringa in \"farfallese\", ovvero ogni volta che si incontra una vocale si aggiunge una f e si ripete la vocale:</p> <p>\"ciao\" diventa \"cifiafaofo\"</p> <p>Esercizio 490</p> <p>Chiedere all'utente di inserire una stringa di esattamente 6 caratteri (da verificare).</p> <p>Visualizzare la stringa di 6 caratteri.</p> <p>Successivamente inserire ogni carattere della stringa come elemento di una tupla di 6 caratteri.  Visualizzare la tupla cos\u00ec generata, con gli elementi mostrati uno per riga.</p> <p>Esercizio 491</p> <p>Chiedere all'utente di inserire 2 caratteri minuscoli (verificare ogni volta che sia un unico carattere minuscolo) e un numero intero N compreso fra 0 e 9 (verificare).</p> <p>Dichiarare una lista inizialmente vuota e procedere ad inserire in essa tutte le coppie create dall'unione dei due caratteri alternati e dei numeri fino ad N.</p> <p>Ad esempio, siano i caratteri inseriti 'a' e 'g' ed N = 3. Allora la lista sar\u00e0 cos\u00ec determinata:</p> <pre><code>lista = [\"a0\", \"g0\", \"a1\", \"g1\", \"a2\", \"g2\", \"a3\", g3\"]\n</code></pre> <p>Visualizzare la lista ottenuta e verificare che len (lista) == 2 * (N + 1).</p> <p>Esercizio 492 (password checker)</p> <p>Chiedere all'utente di inserire una stringa che rispetti i requisiti di sicurezza minimi per una password:</p> <ul> <li>lunga almeno 8 caratteri</li> <li>contenente una lettera maiuscola</li> <li>contenente una lettera minuscola</li> <li>contenente un numero</li> </ul> <p>Richiedere all'utente di inserire una stringa finch\u00e9 essa non rispetta tutti i requisiti richiesti.</p> <p>Esercizio 493 (password generator)</p> <p>Scrivere un programma che genera automaticamente una password casuale che rispetta per\u00f2 le seguenti condizioni:</p> <ul> <li>lunga almeno 8 caratteri</li> <li>contenente una lettera maiuscola</li> <li>contenente una lettera minuscola</li> <li>contenente un numero</li> </ul> <p>Visualizzare la password generata automaticamente.</p> <p>Esercizio 494 (da lista a stringa)</p> <p>Generare una lista di caratteri minuscoli casuali. Il numero di caratteri da generare deve essere anch'esso casuale ma compreso fra 4 e 12. Visualizzare la lista cos\u00ec generata.</p> <p>Provvedere a formare una stringa composta dai caratteri della lista di caratteri e visualizzarla.</p> <p>Ad esempio, generata la lista di 4 caratteri <code>[ \"f\", \"t\", \"h\" ,\"o\" ]</code> generare la stringa \"ftho\".</p> <p>Esercizio 495 (da stringa a lista)</p> <p>Chiedere all'utente di inserire una stringa qualsiasi. Con questa generare la lista dei caratteri della stringa inserita e visualizzarla.</p> <p>Ad esempio inserita la stringa \"cane\", va generata la lista <code>[\"c\", \"a\", \"n\", \"e\"]</code>.</p> <p>Esercizio 496</p> <p>Chiedere all'utente di inserire una frase qualsiasi, lunga a piacere. Visualizzare la stringa inserita. Successivamente procedere a riempire una lista, inizialmente vuota, con le iniziali di ognuna delle parole della frase. Ad esempio, inserita la seguente stringa:</p> <pre><code>stringa = \"Rosso di sera bel tempo si spera\"\n</code></pre> <p>la lista diventa:</p> <pre><code>lista = [\"R\", \"d\", \"s\", \"b\", \"t\", \"s\", \"s\"]\n</code></pre> <p> </p>"},{"location":"basics/105_funz/","title":"Funzioni","text":"<p>Il termine \"funzione\" viene utilizzato in programmazione con un significato analogo a quello della matematica: una funzione \u00e8 una procedura che pu\u00f2 ricevere valori come argomenti e restituire un unico valore come risultato. Nel linguaggio comune si dice anche che una funzione ritorna un valore.</p> <p>La sintassi generale per le funzioni in Python \u00e8 cos\u00ec strutturata:</p> <pre><code>def nome_funzione ( parametri: tipo ) -&gt; tipo_di_ritorno :\n    # blocco di codice che implementa la funzione\n    # codice...\n    # la funzione ritorna un valore con l'istruzione return\n    # return valore (del tipo_di_ritorno)\n</code></pre> <p>Come al solito, cominciamo con un semplice esempio per capire il funzionamento:</p> <pre><code>def isPositive ( number:float ) -&gt; bool:\n    if number &gt; 0 :\n        return True\n    return False\n\nnumero = float(input(\"Inserisci un numero: \"))\nif isPositive(numero):\n    print(\"Hai inserito un numero positivo\")\nelse:\n    print(\"NON Hai inserito un numero positivo\")\n</code></pre> <p>Alcune considerazioni banali:</p> <ul> <li>la funzione si chiama \"isPositive\"</li> <li>la dichiarazione della funzione inizia con la clausola <code>def</code></li> <li>eventuali parametri della funzione vanno fra parentesi tonde</li> <li>questa funzione prende un parametro di tipo float e ritorna un valore booleano</li> <li>PRIMA la funzione si dichiara (una volta), POI si pu\u00f2 usare (quante volte ti pare)</li> </ul> <p>Altro esempio banale:</p> <pre><code>def somma (addendo1: float , addendo2: float) -&gt; float:\n    return addendo1 + addendo2\n\nprint(\"27 + 35 = \" , somma(27,35) )\nprint(\"12 + 5 = \" , somma(12,5) )\n</code></pre> <p>Questo solo per mettere in evidenza che, se ci sono pi\u00f9 parametri, essi vanno elencati fra virgole dentro le parentesi tonde.</p> <p>Le funzioni in s\u00e9 non aggiungono nessun nuovo potere al linguaggio che le utilizza, se non una nuova sconvolgente comodit\u00e0: quella di poter riorganizzare e riutilizzare con semplicit\u00e0 il codice!</p> <p>Le funzioni infatti hanno una definizione (quella che... comincia con def!!!), utile appunto a definire il suo nome, i parametri di cui ha bisogno e il suo comportamento e poi possono essere utilizzate un'infinit\u00e0 di volte, semplicemente richiamando il loro nome e fornendo i parametri necessari! Quante volte fino ad oggi avete usato la funzione print()? Qualcuno si \u00e8 chiesto per caso come faccia a scrivere l'argomento sul monitor? Forse, ma non pi\u00f9 di tanto. Tutti si sono semplicemente preoccupati di capire cosa la funzione print() faccia... e poi l'hanno utilizzata. E riutilizzata. E...</p> <p>Dopo aver visto le funzioni, all'interno di questo capitolo, studieremo una modalit\u00e0 che ci permetter\u00e0 di utilizzarle ancora meglio! I moduli (l'argomento successivo) non sono altro che collezioni di funzioni divise per argomento (matematiche, statistiche, grafiche, data e ora, ecc...) gi\u00e0 pronte all'uso! Una pacchia :)</p> <p>Per adesso per\u00f2, cerchiamo di prendere mano con la definizione e l'utilizzo delle funzioni. Vediamo ancora qualche piccola cosa e poi divertiamoci con una valanga di esercizi da svolgere!!!</p>"},{"location":"basics/105_funz/#parametri-delle-funzioni","title":"Parametri delle funzioni","text":"<p>I parametri di una funzione sono quelle variabili indicate tra parentesi nella sua dichiarazione e che prendono i valori che vengono inseriti in essa al momento della sua chiamata.</p> <p>Capisco lo sconcerto... riprovo con un esempio:</p> <pre><code># la variabile \"nome\" \u00e8 il parametro (di tipo str) della funzione saluta()\ndef saluta (nome: str) -&gt; str:\n    return \"ciao \" + nome\n</code></pre> <p>Quando poi la funzione viene chiamata i parametri prendono dei valori:</p> <pre><code># il valore \"ciccio\" sar\u00e0 inserito nel parametro \"nome\"\n# della funzione \"saluta()\"\nprint( saluta(\"ciccio\") )\n</code></pre> <p>scrive</p> <pre><code>'ciao ciccio'\n</code></pre> <p>Se la funzione prende pi\u00f9 di un parametro, Python fornisce 2 possibilit\u00e0:</p> <ol> <li>l'inserimento ordinato dei valori</li> <li>l'inserimento nominale dei valori</li> </ol> <p>Partiamo come al solito definendo una funzione di prova e verificando cosa succede:</p> <pre><code># la funzione ritorna parola ripetuta per un certo numero di volte\n# (con uno spazio di separazione in mezzo, ma non alla fine):\n# ripeti(\"ciao\", 3) ritorna \"ciao ciao ciao\"\ndef ripeti(parola:str , numero:int)-&gt;str :\n    res = (parola + \" \" ) * (numero - 1) + parola\n    return res\n</code></pre> <p>Nella chiamata con inserimento ordinato dei valori basta inserire i dati nell'ordine della definizione: prima la parola e poi il numero:</p> <pre><code>print( ripeti (\"ciao\", 4) ) # scrive \"ciao ciao ciao ciao\"\n</code></pre> <p>mentre se si inseriscono i dati nell'ordine errato si va incontro ad un errore:</p> <pre><code>print( ripeti (3, \"ciao\") ) # ERRORE!!!\n</code></pre> <p>Se lo si desidera \u00e8 anche possibile procedere ad un inserimento nominale, indicando cio\u00e8 il nome della variabile in cui inserire il valore: in questo caso, l'ordine di inserimento non conta.</p> <pre><code>print( ripeti (parola = \"ciao\" , numero = 3) ) # ciao ciao ciao\nprint( ripeti (numero = 3 , parola = \"ciao\") ) # ciao ciao ciao\n</code></pre> <p>\u00c8 inoltre possibile passare alle funzioni alcuni valori di default: questi vengono utilizzati se la funzione viene chiamata senza i valori da passare ai parametri o ignorati in presenza di essi.</p> <pre><code># definizione della funzione `saluta` con valore di default \"ciccio\"\n# per il parametro nome\ndef saluta(nome = \"ciccio\"):\n    return \"ciao \" + nome\n</code></pre> <p>Allora \u00e8 possibile scrivere in fase di chiamata:</p> <pre><code>saluta()        # ritorna la stringa \"ciao ciccio\"\nsaluta(\"pippo\") # ritorna la stringa \"ciao pippo\"\n</code></pre> <p>Spero sia chiaro, a me perlomeno sembra cos\u00ec.</p>"},{"location":"basics/105_funz/#documentare-le-funzioni","title":"Documentare le funzioni","text":"<p>Se ricordate la struttura di base di una funzione, proveremo adesso ad aggiungere una piccola parte: la documentazione!</p> <pre><code>def nome_funzione ( parametri: tipo ) -&gt; tipo_di_ritorno :\n    \"\"\" documentazione di nome_funzione in formato doc_string \"\"\"\n    # blocco di codice che implementa la funzione\n    # return valore del tipo_di_ritorno\n</code></pre> <p>La documentazione di una funzione va strutturata nel modo seguente:</p> <pre><code>def nome_funzione ( par1: tipo1, par2: tipo2 ) -&gt; tipo_di_ritorno :\n    \"\"\" Una breve frase che descrive COSA la funzione fa (NON come lo fa).\n        Se la funzione ha pi\u00f9 di un parametro, spiegare bene quali informazioni\n        servono per eseguirla.\n\n        Alcuni esempi di utilizzo (possibilmente in formato doctest... ci arriviamo)\n    \"\"\"\n</code></pre> <p>Facciamo una prova, implementando la funzione <code>trova(carattere, stringa)</code> che ritorna <code>True</code> se il carattere \u00e8 presente nella stringa, <code>False</code> altrimenti.</p> <pre><code>def trova(carattere:str, stringa:str) -&gt; bool:\n    \"\"\"\n    Dice se carattere \u00e8 presente o meno nella stringa.\n\n    Ad esempio:\n    &gt;&gt;&gt; trova('c', 'cane')\n    True\n    &gt;&gt;&gt; trova('c', 'gatto')\n    False\n    \"\"\"\n\n    if carattere in stringa:\n        return True\n\n    return False\n</code></pre> <p>Come vedete, il formato <code>doctest</code> prevede di scrivere gli esempi come se eseguiste la funzione a mano nel prompt Python sotto. Poi il modulo fa la sua magia ed esegue effettivamente quel codice e verifica che il risultato sia lo stesso di quello l\u00ec scritto. Ne riparliamo nel prossimo capitolo.</p> <p>Per adesso tutto qui!  Adesso ci vuole solo una montagna di esercizi per assicurarci di aver capito tutto bene.  Per fortuna sono qui sotto </p>"},{"location":"basics/105_funz/#esercizi","title":"Esercizi","text":"<p>Esercizio 501</p> <p>Scrivere una funzione che calcola l'area di un rettangolo e una che ne calcola il perimetro, date la base e l'altezza. Chiedere all'utente di inserire i valori per base e altezza e calcolare area e perimetro del rettangolo, utilizzando le funzioni implementate.</p> <p>Esercizio 502</p> <p>Scrivere una funzione che calcola l'area di un cerchio e una che calcola la sua circonferenza. Entrambe richiedono (ovviamente) come parametro il raggio del cerchio. Chiedere all'utente di inserire un valore per il raggio e procedere a visualizzare area e circonferenza del cerchio relativo, calcolate utilizzando le funzioni implementate.</p> <p>Esercizio 503: triangoli rettangoli</p> <p>Scrivere 3 funzioni relative ai triangoli rettangoli. Tutte e tre prendono come parametri la lunghezza reale dei cateti e calcolano rispettivamente:</p> <ul> <li>l'ipotenusa</li> <li>l'area</li> <li>il perimetro.</li> </ul> <p>Utilizzare la funzione <code>ipotenusa</code> all'interno della funzione <code>perimetro</code>.</p> <p>Esercizio 504: potenze</p> <p>Dati un parametro per la base e uno (intero) per l'esponente, implementare la funzione potenza. Attenzione ai valori negativi degli esponenti.</p> <p>(Per implementare questa funzione non potete usare la sintassi Python <code>base**esp</code>, ma dovete scrivere i calcoli da fare)</p> <p>Esercizio 505: MCD</p> <p>Scrivere una funzione che, dati due numeri interi positivi come parametri, ritorna il Massimo Comun Divisore fra questi.</p> <p>Esercizio 506: mcm</p> <p>Scrivere una funzione che, dati due numeri interi positivi come parametri, ritorna il minimo comune multiplo fra questi.</p> <p>Esercizio 507: carattere</p> <p>Scrivere una funzione chiamata valutaCarattere che prende una stringa come parametro. Se la stringa \u00e8 formata da pi\u00f9 di un carattere la funzione ritorna la scritta \"errore\". Se \u00e8 un solo carattere, ritorna la stringa \"vocale\", \"consonante\", \"cifra\" , \"altro\" a seconda del carattere passato.</p> <p>Esercizio 508: inverti stringa</p> <p>Scrivere una funzione che, data una stringa, ritorna la stringa rovesciata. Ad esempio fornito \"ciao\" come parametro, la funzione ritorna la stringa \"oaic\".</p> <p>Esercizio 509: palindroma</p> <p>Scrivere una funzione che, data una stringa, dice se \u00e8 palindroma oppure no. Una stringa palindroma (ad esempio: \"anna\") si legge uguale in entrambi i versi. Ritornare <code>True</code> o <code>False</code> a seconda che la stringa sia palindroma oppure no.</p> <p>Esercizio 510: farfallese</p> <p>Scrivere una funzione che, data una stringa, ritorna la stringa convertita in farfallese. In farfallese ogni vocale viene seguita da una f + la vocale ripetuta. Ad esempio la stringa \"ciao\" in farfallese diventa \"cifiafaofo\".</p> <p>Esercizio 511</p> <p>Scrivere una funzione che prende come parametro una lista di numeri interi e ritorna una lista con solo i numeri dispari della lista precedente.</p> <p>Ad esempio, <code>dispari( [1,2,3,4,5,6,7] )</code> ritorna <code>[1,3,5,7]</code>.</p> <p>Esercizio 512</p> <p>Scrivere una funzione che prende come parametro una lista e ritorna il numero di interi presenti come elementi della sequenza. (Pensa, pensa...)</p> <p>Esercizio 513</p> <p>Scrivere una funzione che prende come parametro una stringa qualsiasi e ritorna una stringa con le lettere minuscole (solo le lettere) ordinate alfabeticamente e ripetute una sola volta.</p> <p>Ad esempio <code>elencaLettere(\"casa\")</code> ritorna <code>\"acs\"</code>. <code>elencaLettere(\"Hai capito?\")</code> ritorna <code>\"achiopt\"</code>.</p> <p>Esercizio 514</p> <p>Scrivere una funzione che prende come parametro due stringhe e che ritorna l'intersezione MAIUSCOLA delle loro lettere ordinate alfabeticamente, ovvero una lista con le lettere (scritte in maiuscolo) presenti in entrambe le stringhe.</p> <p>Ad esempio <code>intersezioneMaiuscola(\"casa\", scuola\")</code> ritorna <code>[ \"A\", \"C\", \"S\"]</code></p> <p> </p>"},{"location":"basics/106_mod/","title":"Moduli Python","text":"<p>Il capitolo sui moduli Python \u00e8 probabilmente il pi\u00f9 importante di tutti! Python \u00e8 diventato uno dei linguaggi pi\u00f9 utilizzati al mondo proprio perch\u00e9 grazie ai suoi moduli pu\u00f2 arrivare in maniera veloce a gestire qualunque aspetto della programmazione: basta scegliere il modulo giusto!!!</p> <p>Per organizzare al meglio il lavoro, l'argomento <code>Moduli Python</code> \u00e8 spalmato su 3 capitoli:</p> <ol> <li> <p>In questo capitolo vedremo come si crea un modulo e come si utilizza.</p> </li> <li> <p>Nel capitolo Python Standard Library andremo a vedere i moduli predefiniti, ovvero quelli gi\u00e0 disponibili senza fare null'altro in qualunque installazione Python: in questo caso il focus si sposta sull'utilizzo di moduli prodotti da altri, sulla consultazione della documentazione, sull'utilizzo dei moduli Python di base.</p> </li> <li> <p>Nel capitolo PyPi ci occuperemo di reperire, installare e utilizzare alcuni dei moduli disponibili su Internet, precisamente nel <code>Python Package Index</code>, per ottenere in un attimo uno o pi\u00f9 moduli che implementano una funzionalit\u00e0 per noi interessante e/o utile per il software che vogliamo sviluppare.</p> </li> </ol> <p>Al lavoro!</p> <p>Come accennato, in questo capitolo ci occuperemo di implementare un modulo scrivendo tutto il codice, investigando i concetti di base e procedendo ai test semplici delle funzionalit\u00e0 implementate.</p>"},{"location":"basics/106_mod/#istruzione-import","title":"Istruzione import","text":"<p>In Python la clausola import si utilizza per rendere disponibile il codice in un modulo in un altro. Questo concetto rende semplice l'organizzazione del codice in senso logico, sia dal punto di vista dei file che dal punto di vista dell'organizzazione globale del codice.</p> <p>Dal punto di vista dei file, ogni modulo \u00e8 ben organizzato perch\u00e9 contiene codice coerente: un ipotetico modulo <code>numeri</code> conterr\u00e0 funzioni che lavorano coi numeri, un modulo <code>statistiche</code> contiene funzioni per il calcolo statistico, etc..</p> <p>Dal punto di vista dell'organizzazione globale del codice, l'importazione di un modulo generer\u00e0 un <code>namespace</code> che manterr\u00e0 semplice la gestione del codice.</p> <p>Capisco che il secondo punto di vista necessita di un ulteriore chiarimento: dal punto di vista intuitivo, noi abbiamo gi\u00e0 usato il modulo <code>random</code> per le nostre liste numeriche. Allora scriviamo:</p> <pre><code>import random\n\n# per accedere alle funzioni del modulo random, dobbiamo scrivere modulo.funzione\nintero = random.randint(1,100)\n</code></pre> <p>Questa organizzazione imposta dall'import (ovvero <code>modulo.funzione</code>) permette di capire chiaramente che la funzione randint deriva dal modulo random e non \u00e8 stata definita all'interno di questo modulo. Quando le importazioni saranno di pi\u00f9 e i moduli scritti da noi pi\u00f9 lunghi, questa cosa inizier\u00e0 ad essere molto utile.</p> <p>Inoltre il <code>namespace</code> indotto preserva le funzioni importate da un altro importante problema: se molte persone diverse scrivono codice potrebbe tranquillamente capitare che due funzioni scritte da persone diverse, su moduli diversi, abbiano lo stesso nome. Il <code>namespace</code> impedisce confusione in questo caso.</p>"},{"location":"basics/106_mod/#nomi-dei-moduli","title":"Nomi dei moduli","text":"<p>Tutte le persone hanno un nome che le identifica (ad esempio il mio nome \u00e8 Andrea), ma quando le persone parlano di se stesse usano la parola <code>io</code> (io mi chiamo Andrea). E fin qui mi sembra tutto semplice.</p> <p>Abbiamo detto finora (e nel dubbio, lo ripeto con chiarezza) che anche i moduli, ovvero i file Python con estensione <code>.py</code>, hanno un nome, che dipende dal nome del file stesso: ad esempio, il file <code>pippo.py</code> definisce il modulo di nome <code>pippo</code>. Ogni volta che definite un modulo, Python inizializza alcune variabili speciali, fra cui la variabile <code>__name__</code> che contiene il nome del modulo (fra un attimo faccio un esempio).</p> <p>Cos\u00ec come le persone, parlando di se stesse, dicono io, i moduli, al loro interno non utilizzano il loro nome, ma utilizzano la parola <code>__main__</code>.</p> <p>Cerchiamo di chiarire subito questo primo concetto, il resto verr\u00e0 naturalmente di conseguenza:</p> Esempio 1: un unico file<pre><code># file pippo.py\n\n# la variabile __name__ si riferisce al nome del modulo pippo\n# essendo al suo interno, conterr\u00e0 la parola \"__main__\"\nprint(__name__)\n</code></pre> Esempio 2: un altro file<pre><code># file ciccio.py\n\n# importo il modulo pippo, dell'esempio 1\n# importando il modulo, andr\u00f2 ad eseguirlo. la print sopra (eseguita all'esterno del modulo pippo)\n# scriver\u00e0 il suo nome: \"pippo\".\nimport pippo\n\n# la variabile __name__ qui sotto si riferisce al nome del modulo ciccio\n# essendo al suo interno, conterr\u00e0 la parola \"__main__\"\nprint(__name__)\n\n# la variabile __name__ qui sotto si riferisce al nome del modulo pippo\n# NON essendo dentro al modulo pippo, conterr\u00e0 il suo nome proprio, ovvero \"pippo\"\nprint(pippo.__name__)\n</code></pre> <p>Tutto qui </p>"},{"location":"basics/106_mod/#testing-doctest","title":"Testing &amp;&amp; doctest","text":"<p>Dalle considerazioni fatte nei precedenti capitoli, vorrei farvi capire una tecnica molto utilizzata in ambito Python per l'esecuzione dei moduli e i test delle funzioni in essi contenute.</p> <p>La strategia \u00e8 questa:</p> <ol> <li>scrivo il modulo con la definizione delle funzioni che mi interessano</li> <li>faccio delle prove per assicurarmi che tutto... funzioni! (faccio i test!!!) in fondo al file, dentro un <code>if __name__ == \"__main__\"</code></li> <li>Se eseguo direttamente il modulo con le funzioni, l'if mi permette di svolgere i test (e verificare che tutto funzioni correttamente)</li> <li>Se importo il modulo in un altro contesto, il suo nome NON sar\u00e0 \"main\" e i test non saranno svolti, permettendo di importare solo le funzioni!</li> </ol> <p>Da questa spiegazione, deriva questa modalit\u00e0 di scrittura dei moduli con funzioni:</p> <pre><code># file prova.py\n\ndef molt(fatt1:float,fatt2:float) -&gt; float:\n    \"\"\"\n    prende i valori nei parametri fatt1,fatt2 e ritorna il prodotto fatt1 * fatt2\n\n    Ad esempio:\n    molt(4,5) ritorna 20\n    \"\"\"\n    return fatt1 * fatt2\n\n# questa parte NON sar\u00e0 eseguita all'esterno del modulo \"prova\"\nif __name__ == \"__main__\":\n    x = 5\n    y = 4\n    print(\"x:\",x)\n    print(\"y:\",y)\n    print( f\"molt({x},{y}):{molt(x,y)}\" )\n    # ... e cos\u00ec via...\n</code></pre> <p>Da ora in poi scriveremo cos\u00ec i nostri moduli e in questo modo faremo tutti gli esercizi che seguono. Questo ci permetter\u00e0 di definire un modus operandi logico e professionale, che ci torner\u00e0 enormemente utile quando le cose diventeranno inevitabilmente pi\u00f9 complicate.</p> <p>Se invece di scrivere i test a mano vogliamo usare uno strumento semplice ed automatico, ecco il modulo <code>doctest</code>!!!! Questo modulo esegue automaticamente gli esempi che trova nella documentazione come se ci fosse un interprete a farli!! Infatti, per forzare doctest a generare degli esempi da verificare, occorrono due condizioni:</p> <ol> <li>i test devono essere scritti dentro la documentazione come se fossero eseguiti l\u00ec (lo vediamo fra un attimo)</li> <li>sotto alle funzioni va eseguita l'importazione e la chiamata al modulo <code>doctest</code>, come indicato qui sotto.</li> </ol> <pre><code>if __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n</code></pre> <p>oppure:</p> <pre><code>if __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</code></pre> <p>Per scrivere la documentazione in formato doctest, bisogna solo avere attenzione ad alcuni particolari:</p> <p>Se la funzione ritorna una stringa, usare gli apici singoli:</p> <pre><code>&gt;&gt;&gt; 'CASA'.lower()\n'casa'\n</code></pre> <p>Se la funzione ritorna una tupla o una lista, separare bene i valori con uno spazio:</p> <pre><code>&gt;&gt;&gt; [2, 3] * 4\n[2, 3, 2, 3, 2, 3, 2, 3]\n</code></pre> <p>Vediamo un esercizio svolto per chiarire (spero) definitivamente i dubbi</p> <pre><code>def ripeti (parola:str, volte:int) -&gt; str:\n    \"\"\" ritorna una stringa composta da *parola* ripetuta *volte* volte.\n        Quindi *parola* \u00e8 la stringa da ripetere e *volte* \u00e8 il numero di volte da ripeterla\n\n        Ad esempio:\n        &gt;&gt;&gt; ripeti (\"ciao\", 3)\n        'ciaociaociao'\n        &gt;&gt;&gt; ripeti ('a', 7)\n        'aaaaaaa'\n    \"\"\"\n    return parola * volte\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose = True)\n</code></pre> <p>Copiate su un file e provate per credere... Poi, sotto con gli esercizi!</p>"},{"location":"basics/106_mod/#esercizi","title":"Esercizi","text":"<p>Nota</p> <p>Ognuno dei seguenti esercizi deve essere implementato in un unico file, nominato con il nome indicato nell'intestazione dell'esercizio, completo di documentazione e di (almeno) 3 casi di test per ognuna delle funzioni implementate!!!</p> <p>Esercizio 601: modulo \"SequenzeNumeriche\"</p> <p><code>minoriDiUnElemento</code> Creare una funzione che, data una sequenza numerica (tupla o lista) e un numero qualsiasi, conta quanti numeri nella sequenza sono minori del numero.</p> <p><code>sommaElementi</code> Creare una funzione che, data una sequenza numerica (tupla o lista), restituisce la somma dei numeri della sequenza.</p> <p><code>mediaElementi</code> Creare una funzione che, data una sequenza numerica (tupla o lista), restituisce la media aritmetica dei numeri della sequenza.</p> <p>Esercizio 602: modulo \"ManipolazioneStringhe\"</p> <p><code>lunghezzaStringa</code> La funzione prende una stringa come parametro e ritorna il numero di caratteri di cui \u00e8 composta (la sua lunghezza)</p> <p><code>contaLettera</code> La funzione prende una stringa e una lettera come parametro e ritorna il numero di volte in cui la lettera \u00e8 presente all'interno della stringa</p> <p><code>tutteMaiuscole</code> La funzione prende una stringa come parametro e ritorna la stringa trasformata in maiuscolo</p> <p><code>tutteMinuscole</code> La funzione prende una stringa come parametro e ritorna la stringa trasformata in minuscolo</p> <p><code>invertiMaiuscoleMinuscole</code> La funzione prende una stringa come parametro e ritorna la stringa con maiuscole e minuscole invertite.</p> <p><code>inizialiMaiuscole</code> La funzione prende una stringa come parametro e ritorna la stringa trasformata in minuscolo con le iniziali di ogni parola maiuscole</p> <p>Esercizio 603: modulo \"PianoCartesiano\"</p> <p><code>quadrante</code> La funzione prende due numeri x, y che rappresentano le coordinate del punto P nel piano cartesiano e restituisce un numero corrispondente al quadrante nel quale esso si trova, ovvero un numero fra 1 e 4. Restituisce 0 nel caso che il punto sia su uno degli assi cartesiani.</p> <p><code>distanzaOrigine</code> La funzione prende due numeri x, y che rappresentano le coordinate del punto P nel piano cartesiano e restituisce la distanza del punto P dall'origine degli assi, ovvero dal punto O di coordinate (0,0).</p> <p><code>distanzaFraDuePunti</code> La funzione prende quattro numeri xP, yP, xQ, yQ che rappresentano le coordinate dei punto P e Q nel piano cartesiano e restituisce la distanza fra loro.</p> <p>Esercizio 604: modulo \"CifreNumeriche\"</p> <p><code>unit\u00e0</code> La funzione prende un numero come parametro e restituisce la cifra delle unit\u00e0. Ad esempio unita(23) restituisce 3, unita(8174.56) restituisce 4.</p> <p><code>decine</code> La funzione prende un numero come parametro e restituisce la cifra delle decine. Ad esempio decine(23) restituisce 2, decine(8174.56) restituisce 7.</p> <p><code>centinaia</code> La funzione prende un numero come parametro e restituisce la cifra delle centinaia. Ad esempio centinaia(23) restituisce 0, centinaia(8174.56) restituisce 1.</p> <p><code>migliaia</code> La funzione prende un numero come parametro e restituisce la cifra delle migliaia. Ad esempio migliaia(23) restituisce 0, migliaia(8174.56) restituisce 8.</p> <p><code>decimi</code> La funzione prende un numero come parametro e restituisce la cifra dei decimi. Ad esempio decimi(23) restituisce 0, decimi(8174.56) restituisce 5.</p> <p><code>centesimi</code> La funzione prende un numero come parametro e restituisce la cifra dei centesimi. Ad esempio centesimi(23) restituisce 0, centesimi(8174.56) restituisce 6.</p> <p>Esercizio 605: modulo \"FunzioniNumeriche\"</p> <p><code>sommaDivisori</code> La funzione prende un numero intero come parametro e restituisce la somma dei suoi divisori propri (ovvero dei divisori minori del numero stesso)</p> <p><code>listaDivisori</code> La funzione prende un numero intero come parametro e restituisce la lista dei suoi divisori propri (ovvero dei divisori minori del numero stesso)</p> <p><code>isPrime</code> La funzione prende un numero intero come parametro e restituisce True se il numero \u00e8 primo, false altrimenti. (sugg: se un numero \u00e8 primo il suo unico divisore proprio \u00e8 1...)</p> <p><code>perfetto</code> La funzione prende un numero intero come parametro e restituisce True se il numero \u00e8 perfetto, False altrimenti (un numero si dice perfetto se e solo se \u00e8 uguale alla somma dei suoi divisori propri)</p> <p><code>nthPrime</code> La funzione prende un numero intero come parametro e restituisce l'ennesimo numero primo. Ad esempio dato 3, la funzione restituisce 5 perch\u00e9, essendo i numeri primi 2, 3, 5, 7, 11, etc... 5 \u00e8 il terzo numero primo.</p> <p><code>semiPrimo</code> La funzione prende un numero intero come parametro e restituisce True se il numero \u00e8 semiprimo, False altrimenti. Un numero si dice semiprimo se \u00e8 esprimibile come prodotto di due numeri primi. Ad esempio 6 = 2 per 3 \u00e8 semiprimo, 7 = 7 per 1 non \u00e8 semiprimo, infatti 1 non \u00e8 primo.</p> <p> </p>"},{"location":"basics/106_psl/","title":"Python Standard Library","text":"<p>Ovviamente l'utilit\u00e0 dei moduli non \u00e8 solo organizzativa, ma... storica!!!  Immaginate se qualcuno avesse raccolto tutte le funzioni pi\u00f9 \"fighe\" scritte in Python e le avesse catalogate in gruppi omogenei; ad esempio le funzioni aritmetiche, le funzioni per le stringhe, le funzioni per data e ora e cos\u00ec via.</p> <p>Beh... qualcuno lo ha fatto! Ed ha creato la Python Standard Library.</p> <p>Essa non \u00e8 nient'altro che una collezione di moduli, inclusi per semplicit\u00e0 in qualunque installazione Python,  che quindi possiamo utilizzare semplicemente scrivendo <code>import nomeModulo</code>.</p> <p>Fighissimo!</p> <p>Elenco qui alcuni fra i moduli pi\u00f9 comuni, indicando il nome e una descrizione sommaria:</p> <ul> <li><code>random</code>:     Generazioni di numeri \"pseudo-casuali\"</li> <li><code>math</code>:       Operazioni matematiche comuni</li> <li><code>time</code>:       Gestione Tempo</li> <li><code>datetime</code>:   Gestione Data e Ora</li> <li><code>pathlib</code>:    Accesso a file e directories</li> <li><code>csv</code>:        Lettura e Scrittura su file csv</li> </ul> <p>Se questi elencati non vi bastano e siete curiosi su quanti ce ne siano effettivamente, provate a consultare la  documentazione ufficiale.</p> <p>Ancora non vi basta? Bene! Allora sappiate che ci sono altre migliaia di moduli pieni zeppi di funzioni utili per gli incarichi pi\u00f9 disparati, gi\u00e0 catalogati e liberi di essere utilizzati da chiunque! La differenza con i precedenti \u00e8 che questi non fanno parte della Python Standard Library, ma sono elencati semplicemente nel Python Package Index. </p> <p>Ma questa \u00e8 la storia del prossimo capitolo (Moduli PyPi). Per adesso, guardiamo qualcuno dei moduli standard!</p> <p>Suggerimento</p> <p>La documentazione ufficiale (in inglese) di ogni modulo \u00e8 inserita nel modulo stesso: per ottenerla, dato il modulo \"NomeModulo\", basta scrivere nell'interprete:</p> <pre><code>&gt;&gt;&gt; import NomeModulo\n&gt;&gt;&gt; dir(NomeModulo)    \n&gt;&gt;&gt; help(NomeModulo.FunzioneInteressante)\n</code></pre> <p>Prova con uno dei moduli elencati sopra!!!</p>"},{"location":"basics/106_psl/#random","title":"random","text":"<p>Il modulo <code>random</code> serve per operazioni che richiedono una certa \"casualit\u00e0\", anche se il termine corretto sarebbe \"pseudocasualit\u00e0\". Vediamo una carrellata delle funzioni pi\u00e0 interessanti del modulo. Per tutte le altre... ormai dovreste aver capito!!!</p> <p></p> <p>Funzione randint Dato un intervallo (con entrambi gli estremi inclusi) seleziona un numero pseudocasuale al suo interno <pre><code>import random\n\n# estrae un numero pseudocasuale fra 1 e 90\nn = random.randint(1, 90)\n</code></pre></p> <p></p> <p>Funzione choice Applicata ad una sequenza generica ritorna un elemento casuale della stessa (utile per le estrazioni) <pre><code>import random\n\nlista = [ 1, 2, 3, 4, 5]\nnumero = random.choice(lista)  # scegle un elemento della lista (a caso)\nprint(numero)                  # scrive.... (boh, ad esempio)... 4\n</code></pre></p> <p></p> <p>Funzione shuffle funziona solo con le liste e serve per mescolare la lista passata come parametro. Ovviamente non ritorna valori. <pre><code>import random\n\nlista = [ 1, 2, 3, 4, 5]\nrandom.shuffle(lista)  # mischia la lista\nprint(lista)           # ad esempio: [4, 3, 1, 5, 2]\n</code></pre></p> <p></p> <p>Non \u00e8 affatto difficile! Provate a fare i seguenti esercizi aiutandovi anche con la documentazione integrata.</p> <p> </p> <p>Esercizio 621 (randint)</p> <p>Riempire una lista con 5 numeri casuali fra 1 e 90 diversi fra loro. Pronta la cartella della tombola!!!</p> <p>Esercizio 622 (randint)</p> <p>Generare 5 numeri casuali fra 0 e 1 con 2 cifre esatte dopo la virgola (sugg: genera interi fra 0 e 100, dividi per...)</p> <p>Esercizio 623 (choice)</p> <p>Dichiarare una tupla contenenti l'elenco dei cognomi della classe ed estrarne uno con choice. Chi esce sar\u00e0 interrogato!!!</p> <p>Esercizio 624 (choice)</p> <p>Creare una lista contenente i numeri da 1 a 10 ed estrarre un numero con choice. Provvedere successivamente ad eliminare il numero estratto dalla lista e visualizzare la stessa.</p> <p>Esercizio 625 (shuffle)</p> <p>Dichiarare una lista contenente l'elenco dei cognomi della classe (in ordine alfabetico) e mischiarla con shuffle. Visualizzare la lista mescolata: quello sar\u00e0 l'ordine delle interrogazioni!!!</p> <p>Esercizio 626 (shuffle)</p> <p>Creare una lista contenente i numeri da 1 a 10 e mescolarla. Visualizzare la lista nel nuovo ordine ottenuto e successivamente riordinarla.</p>"},{"location":"basics/106_psl/#math","title":"math","text":"<p>Il modulo <code>math</code> contiene tutte le funzioni matematiche utili per le operazioni su esponenziali, logaritmi, trigonometria, etc...</p> <pre><code># esempi di operazioni varie\nimport math\n\nmath.log(10) # logaritmo in base e di 10\nmath.cos(math.pi) # coseno di 90 gradi (pi greco radianti)\nmath.factorial(5) # fattoriale di 5, ovvero 5! = 1 * 2 * 3 * 4 * 5\nmath.sqrt(12) # radice quadrata di 12\nmath.gcd(345,678) # Massimo Comun Divisore\nmath.lcm(345,678) # Minimo Comune Multiplo (da Python 3.9)\nceil/floor/trunc # RTFM\n</code></pre> <p>Il modulo math si porta dietro anche una serie di costanti famose:</p> <pre><code># variabili (pre)definite in math:\n# math.e = 2.718281828459045 (numero di Nepero)\n# math.inf = inf (pi\u00f9 infinito)\n# math.nan = nan (not a number. PS: hai combinato qualcosa)\n# math.pi = 3.141592653589793 (pi greco)\n</code></pre> <p> </p> <p>Esercizio 631 (sqrt)</p> <p>Scrivere una funzione che calcola le soluzioni dell'equazione di secondo grado <code>Ax^2 + Bx + C = 0</code>.</p> <p>In particolare la funzione prende come parametri i coefficienti A, B, C dell'equazione e restituisce la lista delle soluzioni reali della stessa.</p> <p>La lista pu\u00f2 contenere 0, 1, 2 soluzioni (anche coincidenti) a seconda dei casi.</p> <p>Esercizio 632 (sqrt, floor)</p> <p>Scrivere una funzione per calcolare la radice quadrata intera di un numero. La radice quadrata intera di un numero x \u00e8 il pi\u00f9 grande intero n tale che <code>n * n &lt;= x</code>.</p> <p>Provate a scrivere questa funzione con l'aiuto del modulo math (facile) e provate a scriverne una analoga senza (un po' pi\u00f9 complicato)</p> <p>Esercizio 633 (gcd , lcm)</p> <p>Scrivere una funzione che prende numeratore e denominatore di una frazione e ritorna una tupla di 2 valori contenenti numeratore e denominatore ridotti ai minimi termini. Ad esempio, la funzione riduci(15,6) ritorna la tupla (5,2).</p> <p>Esercizio 634 (gcd , lcm)</p> <p>In una piazza si trova il capolinea di tre linee di tram: A, B, e C. Il tram A parte ogni TOT_A minuti, il tram B ogni TOT_B minuti, il tram C ogni TOT_C minuti. Ogni quanti minuti i 3 tram si ritrovano al capolinea insieme? Implementare la funzione calcolaMinuti(TOT_A, TOT_B, TOT_C) che ritorna il numero di minuti che bisogna aspettare per avere di nuovo i 3 tram insieme al capolinea.</p>"},{"location":"basics/106_psl/#time","title":"time","text":"<p>Il modulo <code>time</code> in Python gestisce l'interazione con il temporizzatore del computer in cui esso viene eseguito ed \u00e8 dunque in grado di effettuare operazioni collegate al tempo, come:</p> <ul> <li>aspettare per un lasso di tempo</li> <li>controllare l'orario corrente</li> <li>formattare l'orario in base alle sue componenti.</li> </ul> <p>Vediamo alcuni esempi:</p> <p></p> <p>Funzione sleep Serve per mettere in stand-by lo script Python per un certo numero di secondi (vale anche la virgola!!!) <pre><code>import time\n\nprint(\"Lo scrive subito\")\ntime.sleep(2.5)\nprint(\"Lo scrive dopo 2 secondi e mezzo!!\")\n</code></pre></p> <p></p> <p>Funzione time Questa funzione ritorna il numero di secondi trascorsi da <code>Epoch</code> (noi diremmo... dalla notte dei tempi)!  In realt\u00e0, <code>epoch</code> non \u00e8 altro che <code>January 1, 1970, 00:00:00 UTC</code></p> <pre><code>import time\n\n# il numero di secondi trascorsi da Epoch\nseconds = time.time()\nprint(\"Seconds since epoch:\", seconds)\n</code></pre> <p></p> <p>Partendo da questa, abbiamo varie possibilit\u00e0 per la formattazione e la gestione di questo tempo:</p> <p></p> <p>Funzioni *time In questo caso mi viene pi\u00f9 semplice presentare alcune delle funzioni di tempo con qualche esempio:</p> <pre><code>import time\n\nseconds = time.time()\n\n# ctime: \n# prende i secondi trascorsi e ritorna una stringa\nlocal_time = time.ctime(seconds)\nprint(\"Local time:\", local_time) \n# Scrive: Local time: Wed Dec 28 08:16:19 2022\n\n# localtime: \n# prende i secondi trascorsi e ritorna struct_time, una tupla contenente le informazioni \n# sul tempo: anno, mese, giorno, ore, minuti, secondi, nome del giorno, giorno dell'anno, bisestile\nres = time.localtime(seconds)\nprint(\"result:\", res)\n# Scrive: result: time.struct_time(tm_year=2022, tm_mon=12, tm_mday=28, tm_hour=8, tm_min=8, tm_sec=53, tm_wday=2, tm_yday=362, tm_isdst=0)\n\n# mktime:\n# prende una tupla di tipo struct_time e ritorna il numero di secondi passati da Epoch per quella data\ntime_tuple = (2022, 12, 28, 8, 44, 4, 4, 362, 0)\nseconds = time.mktime(time_tuple)\nprint(seconds)\n# Scrive: 1672217044.0\n\n# asctime:\n# prende una tupla di tipo struct_time e ritorna una stringa che la rappresenta\nres = time.asctime(time_tuple)\nprint(res)\n# Scrive: Fri Dec 28 08:44:04 2022\n</code></pre> <p> </p> <p>Esercizio 641</p> <p>Visualizza l'ora corrente in ORE:MINUTI:SECONDI (sugg: visualizza i giusti campi della tupla di tempo)</p> <p>Esercizio 642</p> <p>Chiedi all'utente un numero grande a piacere e calcola se \u00e8 primo. Dopo aver risposto alla domanda visualizza quanto tempo il tuo programma ha impiegato a calcolarlo.</p> <p>Esercizio 643</p> <p>Calcola quanti secondi sono trascorsi dal 1 gennaio di quest'anno a oggi.</p>"},{"location":"basics/106_psl/#datetime","title":"datetime","text":"<p>Il modulo <code>datetime</code> contiene le funzioni per la manipolazione di data e ora. Contiene 4 classi diverse a cui si accede con l'operatore PUNTO (.):</p> <ul> <li>la classe Date per la gestione della data, con giorno, mese ed anno;</li> <li>la classe Time per la gestione dell'orario, con ore, minuti, secondi e microsecondi;</li> <li>la classe DateTime per la gestione di Data e Ora: praticamente \u00e8 la classe unione delle due precedenti;</li> <li>la classe TimeDelta per il calcolo delle differenze di tempo.</li> </ul> <p>Vediamo alcuni esempi per chiarire i concetti espressi. </p> <pre><code>import datetime\n\n# nell'ordine: anno, mese, giorno\nscopertaAmerica = datetime.date(1492, 10, 12)\n\n# nell'ordine: ore, minuti, secondi\noraDellaPausa = datetime.time(16, 40, 00)\n\n# nell'ordine: anno, mese, giorno, ore, minuti, secondi\nuomoSullaLuna = datetime.datetime(1969, 7, 20, 20, 18, 00)\n\n# con le variabili nominali: giorni, secondi, microsecondi, millisecondi, minuti, ore, settimane.\n# (i campi con valore 0 possono essere omessi)\nfra3giornie2ore = datetime.timedelta(days=3, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=2, weeks=0)\n</code></pre> <p>Successivamente vedremo uno o due esempi che coinvolgono la classe <code>TimeDelta</code>.  Per visualizzare informazioni sulle classi in oggetto ricordatevi di utilizzare le funzioni dir() e help():</p> <p>Una delle cose pi\u00f9 semplici da fare con queste classi \u00e8 ottenere ora e data correnti:</p> <pre><code># Per la classe Date, possiamo ottenere il giorno odierno\noggi = datetime.date.today() # vale 2019-05-23\n\n# La classe Time NON ha un metodo per l'ora corrente.\n\n# Dobbiamo usare la classe DateTime\nadesso = datetime.datetime.now() # vale 2019-05-23 19:26:03.478039\n</code></pre> <p>Una volta impostata una data o un'ora \u00e8 possibile accedere ai valori dei campi che la caratterizzano:</p> <pre><code>print(\"Anno: \", adesso.year)\nprint(\"Mese: \", adesso.month)\nprint(\"Giorno: \", adesso.day)\nprint(\"Ore: \", adesso.hour)\nprint(\"Minuti: \", adesso.minute)\nprint(\"Secondi: \", adesso.second)\n</code></pre> <p>L'accesso ai valori dei campi che caratterizzano una variabile di tipo <code>Date</code> , <code>DateTime</code> , <code>Time</code> \u00e8 sempre in sola lettura.</p> <p>Questo significa che possiamo visualizzare i valori come fatto qui sopra, ma non possiamo utilizzare questi campi per modificare una data. Per essere completamente espliciti, non \u00e8 possibile fare operazioni tipo le seguenti:</p> <pre><code>dataAcaso = datetime.datetime(2022, 6, 4, 13, 0, 0)\ndataAcaso.year = 2020  # ERRORE\ndataAcaso.hour = 12    # ERRORE. (capito? Non si pu\u00f2...)\n</code></pre> <p>Le date non sono fatte per essere modificate. Invece di cambiarne una... create un'altra variabile!</p> <p>Per visualizzare date, ore o data con ora a piacimento, tutte e tre le classi mettono a disposizione la funzione <code>strftime()</code> che prende l'oggetto Data (o Ora, o Data e Ora) e ritorna una stringa personalizzata, secondo i seguenti parametri (ho messo solo i principali...):</p> Parametro Descrizione Esempio %a Giorno della settimana (breve) Wed %A Giorno della settimana Wednesday %w Giorno della settimana come numero: 0 \u00e8 Domenica 3 %d Giorno del mese: 01-31 31 %b Nome del mese (breve) Dec %B Nome del mese December %m Mese come numero: 01-12 12 %y Anno (breve, 2 cifre) 18 %Y Anno 2018 %H Ore: 00-23 17 %M Minuti: 00-59 41 %S Secondi: 00-59 08 %% Per visualizzare % % <p>Qualche esempio \u00e8 meglio di molte spiegazioni:</p> <pre><code>&gt;&gt;&gt; adesso = datetime.datetime.now()\n&gt;&gt;&gt; print( adesso.strftime(\"%d-%m-%Y\") )\n23-05-2019\n\n&gt;&gt;&gt; print( adesso.strftime(\"Sono le %H:%M\") )\nSono le 19:26\n\n&gt;&gt;&gt; print( adesso.strftime(\"%A\") )\nThursday\n</code></pre> <p>\u00c8 facile capire che in ogni tipologia di dato potete usare solo i parametri relativi ad esso: ovvero con un oggetto date, i parametri relativi ad ore, minuti o secondi non vanno bene, mentre con un oggetto time non vanno quelli sul giorno, il mese, etc... su un oggetto datetime funzionano tutti!!!</p>"},{"location":"basics/106_psl/#differenze-di-tempo-timedelta","title":"Differenze di tempo (TimeDelta)","text":"<p>Ok, domanda a bruciapelo. Da quanto tempo l'uomo \u00e8 andato sulla Luna? Da quanti anni? Da quanti giorni??</p> <p>Le differenze di tempo sono materia per la classe TimeDelta; un elemento della classe stessa si ottiene facendo una differenza tra due elementi di tipo DateTime o Date (non Time... attenti! E dello stesso tipo... attentissimi!! <code>datetime - datetime</code>, oppure <code>date - date</code>)</p> <pre><code>&gt;&gt;&gt; print(adesso - uomoSullaLuna)\n18205 days, 12:42:12.510824\n</code></pre> <p>Le differenze di tempo si fanno banalmente con il segno meno:</p> <pre><code>diff = adesso - uomoSullaLuna\nprint(diff.days) # scrive 18205 (int)\n</code></pre> <p>Ok... in giorni \u00e8 quello. Ma... in anni? Settimane? Ore? Minuti? Secondi?  In questo caso occorre fare un po' di calcoli: si fa la differenza fra 2 date (o 2 datetime, NON due time), si utilizza la funzione <code>total_seconds()</code> che ritorna i secondi totali e poi si fa qualche divisione...</p> <pre><code>diff = adesso - uomoSullaLuna\nsecondiTotali = int(diff.total_seconds())  # int() per arrotondare...\nminutiTotali = secondiTotali // 60\noreTotali = minutiTotali // 60\ngiorniTotali = oreTotali // 24\nsettimaneTotali = giorniTotali // 7\nanniTotali = giorniTotali // 365 # pi\u00f9 o meno...\n</code></pre> <p>Come la differenza fra due <code>date</code> (o due <code>datetime</code>) risulta in un oggetto <code>timedelta</code>, cos\u00ec la somma fra una <code>date</code> e un timedelta risulta una data:</p> <pre><code>oggi = datetime.date.today()\nduegiorni = datetime.timedelta(days=2)\ndopodomani = oggi + duegiorni\nprint(dopodomani, type(dopodomani)) # vedremo un oggetto datetime.date con la data di dopodomani\n</code></pre> <p>Prendiamo confidenza con il modulo <code>datetime</code> grazie ad un po' di esercizi </p> <p>Esercizio 651 (now)</p> <p>Visualizzare la data e l'ora corrente, scrivendo la frase \"Oggi \u00e8 il GG/MM/AAAA e sono le ore HH:MM\"</p> <p>Esercizio 652 (...)</p> <p>Data l'ora di adesso e inserito dall'utente l'ora di fine lezione calcolare il numero di minuti mancanti.</p> <p>Esercizio 653 (tuple, weekday)</p> <p>Chiedere all'utente di inserire la data di nascita e visualizzare il giorno della settimana in cui \u00e8 nato.</p> <p>Esercizio 654 (...)</p> <p>Chiedere all'utente di inserire due numeri per giorno e mese dell'anno corrente e calcolare quante settimane sono passate dall'inizio dell'anno a quella data.</p> <p> </p>"},{"location":"basics/106_pypi/","title":"Python Package Index","text":"<p>I moduli della libreria standard sono facilissimi da utilizzare (anche perch\u00e9 sono gi\u00e0 installati sul computer...)  ma fanno operazioni... standard, niente di veramente eclatante!</p> <p>Python in realt\u00e0 mette a disposizione dei suoi utenti miriadi di moduli per i compiti pi\u00f9 disparati: creare un codice a barre,  calcolare la distanza fra 2 stelle, trasferire una canzone tramite bluetooth, ecc...</p> <p>La cosa veramente incredibile (su Python) \u00e8 che tutti questi moduli, sviluppati da chicchessia, sono raccolti in un unico repository:  il Python Package index, PyPi. https://pypi.org.</p> <p></p> <p>Qui sopra vedete la schermata iniziale del sito. Come vedete sono disponibili oltre 275.000 moduli... Potete cercare praticamente quello che volete: io ho provato con \"chicken\", \"football\", \"rock music\" e ho avuto soddisfazione...</p> <p>Certo, al nostro livello non siamo in grado ancora di usare qualsivoglia modulo (soprattutto perch\u00e9 siete ancora particolarmente allergici a leggere la documentazione), ma imparare a scaricarli e a installarli (fatto uno, fatto tutti) e poi ad usare qualcuno dei pi\u00f9 semplici... si pu\u00f2!</p> <p>Per installare un modulo di questi, non c'\u00e8 bisogno di mettersi a cercarlo nel sito... basta usare Thonny!</p> <p></p> <p>Da l\u00ec digitate la stringa di ricerca (nell'esempio c'\u00e8 la stringa wxpython) e cliccate sul pulsante di ricerca...</p> <p></p> <p>Trovato il pacchetto che vi serve, non serve altro che cliccare sul pulsante INSTALLA in basso e attendere :)</p> <p></p> <p>Se invece non avete (ancora) Thonny, aprite il prompt dei comandi Windows oppure il terminale Mac o Linux e digitate:</p> <pre><code>pip install -U nomeModulo\n</code></pre> <p>Quando ha finito... ve ne accorgerete.</p>"},{"location":"basics/106_pypi/#modulo-pillow","title":"Modulo pillow","text":"<p>Il modulo <code>pillow</code> \u00e8 considerato il modulo standard per la manipolazione delle immagini in Python.  In realt\u00e0 sarebbe un sostituto (built-in replacement) per la vera libreria di default per il trattamento delle immagini: PIL, ovvero la Python Image Library.  Ma ormai \u00e8 considerata lo standard per lavorare con le immagini.</p> <p>Installate il modulo <code>pillow</code> e poi procedete ad esaminare e testare il seguente esempio, aggiungendo ogni volta un pezzetto al codice.</p> <pre><code># per compatibilit\u00e0 con PIL anche il modulo pillow si chiama PIL\nfrom PIL import Image\n\n# Per aprire e visualizzare una immagine\n# l'immagine deve trovarsi nella stessa cartella dello script\nimg = Image.open(\"python.png\")\nimg.show()\n</code></pre> <p>Alcune operazioni sparse sull'immagine:</p> ruota l'immagine di 90 gradi e la visualizza<pre><code>rotatedImg = img.rotate(90)\nrotatedImg.show()\n</code></pre> ridimensiona l'immagine a 200x200 pixel<pre><code>resizedImg = img.resize((200,200))\nresizedImg.show()\n</code></pre> ribalta l'immagine orizzontalmente<pre><code># (oppure verticalmente, mettendo Image.FLIP_TOP_BOTTOM)\nflippedImg = img.transpose(Image.FLIP_LEFT_RIGHT)\nflippedImg.show()\n</code></pre> converte l'immagine in scala di grigi<pre><code>convertedImg = img.convert(\"L\")\nconvertedImg.show()\n</code></pre> <p>Per ritagliare una immagine (crop) occorre utilizzare il metodo: <code>Image.crop( (left, upper, right, lower) )</code></p> <pre><code># ritagliamo l'immagine da (0,0) in alto a sx a (300,300) in basso a dx\ncroppedImage = img.crop( (0,0,300,300) )\n</code></pre> <p>Se invece volessimo salvare l'immagine modificata... (ad esempio quella in bianco e nero)</p> Salva l'immagine su file<pre><code>convertedImg.save(\"pythonBN.png\")\n</code></pre> <p>Proviamo adesso alcune opzioni per sfocare l'immagine (blur)</p> <pre><code># occorre importare anche l'oggetto ImageFilter\nfrom PIL import Image, ImageFilter\nimg = Image.open(\"prova.jpg\")\n\nblurImage = img.filter(ImageFilter.BLUR)              # blur generico\nboxBlurImage = img.filter(ImageFilter.BoxBlur(20))    # blur radiale\ngaussImage = img.filter(ImageFilter.GaussianBlur(20)) # blur gaussiano\n</code></pre> <p>Basta!</p>"},{"location":"basics/106_pypi/#esercizi","title":"Esercizi","text":"<p>Volete fare, sapere di pi\u00f9? Leggete la documentazione! Ma per imparare ad usare qualcosa... occorre esercitarsi!!!</p> <p>Esercizio 661</p> <p>Data una immagine qualsiasi (ad esempio, la fantastica <code>pippo.jpg</code>, da mettere nella stessa cartella del seguente script) utilizzare il modulo pillow per creare le immagini <code>pippoAllaRovescia.jpg</code>, contenente l'immagine iniziale rovesciata (ruotata di 180 gradi) e <code>pippoBiancoNeroRovesciato.jpg</code> contenente  l'immagine iniziale rovesciata e in scala di grigi</p> <p>Esercizio 662</p> <p>Data una immagine qualsiasi (ad esempio, la fantastica <code>pippo.jpg</code>, da mettere nella stessa cartella del seguente script) utilizzare il modulo pillow per creare le immagini <code>pippo_100.jpg</code>, contenente l'immagine iniziale ridimensionata a 100 x 100 pixel e <code>pippo_100_50.jpg</code> contenente l'immagine precedente  ritagliata dall'alto per diventare 100 x 50 pixel.</p> <p>Esercizio 663</p> <p>Data un'immagine <code>foto.jpg</code>, creare un programma che applica un effetto \"galleria d'arte\" creando 4 versioni della stessa immagine con  filtri diversi (normale, bianco e nero, sfocata, contorni) e le salva come <code>foto_normale.jpg</code>, <code>foto_bn.jpg</code>, <code>foto_blur.jpg</code> e <code>foto_contorni.jpg</code>. Utilizzare il filtro <code>ImageFilter.CONTOUR</code> per l'ultima versione.</p> <p>Esercizio 664</p> <p>Creare un programma che prende un'immagine <code>logo.png</code> e genera una miniatura (thumbnail) di dimensione massima 200x200 pixel mantenendo le proporzioni originali dell'immagine. Salvare il risultato come <code>logo_thumb.png</code>. </p> <p>Provate a documentarvi e a utilizzare il metodo <code>thumbnail()</code>.</p> <p>Esercizio 665</p> <p>Data un'immagine <code>panorama.jpg</code>, creare un programma che la divide in 4 parti uguali (quadrante in alto a sinistra, in alto a destra, in basso a sinistra, in basso a destra) e salva ciascun quadrante come file separato: <code>panorama_tl.jpg</code>, <code>panorama_tr.jpg</code>, <code>panorama_bl.jpg</code>, <code>panorama_br.jpg</code>.</p> <p>Esercizio 666</p> <p>Creare un programma che prende due immagini della stessa dimensione (<code>sfondo.jpg</code> e <code>overlay.png</code>) e le combina sovrapponendo la seconda sulla prima con trasparenza del 50%. Salvare il risultato come <code>composizione.jpg</code>. </p> <p>Provate a documentarvi e a utilizzare i metodi <code>Image.blend()</code> oppure <code>Image.alpha_composite()</code>.</p>"},{"location":"basics/106_pypi/#modulo-pyscreenshot","title":"Modulo pyscreenshot","text":"<p>Il modulo <code>pyscreenshot</code> serve per fare gli screenshot del Desktop. Semplice e veloce. Ricordate solo che questo modulo lavora con le immagini, quindi per funzionare ha bisogno anche del modulo <code>pillow</code>. Installate il modulo chiamato <code>pyscreenshot</code> (<code>pillow</code> ce lo dovreste avere da prima), poi su una shell python digitate:</p> <pre><code>&gt;&gt;&gt; import pyscreenshot\n&gt;&gt;&gt; dir(pyscreenshot)\n</code></pre> <p>vedrete elencate le funzioni offerte dal modulo <code>pyscreenshot</code>. Come ci siamo sempre detti, quelle che iniziano con doppio underscore vanno ignorate. Non sono tantissime. O meglio... questo \u00e8 uno dei moduli pi\u00f9 semplici. Per fare lo screenshot ci interessa una singola funzione: <code>grab</code>.</p> <pre><code>import pyscreenshot\n\nshot = pyscreenshot.grab()\nshot.save('screenshot.png')\n</code></pre> <p>L'esempio sopra fa uno screenshot del Desktop e lo salva come file \"screenshot.png\" nella stessa cartella ove si trova lo script Python con il codice sopra.</p> <p>Se avete letto la documentazione della funzione <code>grab</code> saprete che potete decidere di fare lo screenshot ad una sezione dello schermo. La prova di questo ve la lascio come esercizio.</p>"},{"location":"basics/106_pypi/#esercizi_1","title":"Esercizi","text":"<p>Ed eccolo qui... il sottocapitolo che aspettavate </p> <p>Esercizio 671</p> <p>Utilizzare il modulo <code>pyscreenshot</code> per fare uno screenshot dello schermo, ridimensionarlo a 800 x 600 pixel e modificarlo in scala di grigi. Salvare l'immagine ottenuta.</p> <p>Esercizio 672</p> <p>Utilizzare i moduli <code>time</code> e <code>pyscreenshot</code> per fare uno screenshot del desktop vuoto: una volta eseguito, il programma fornir\u00e0 5 secondi al'utente prima di fare lo screenshot, in modo tale da fornirgli il tempo di liberare lo schermo.</p> <p>Esercizio 673</p> <p>Creare un programma che fa 3 screenshot consecutivi dello schermo a distanza di 2 secondi l'uno dall'altro e li salva con nomi progressivi: <code>screen_1.png</code>, <code>screen_2.png</code>, <code>screen_3.png</code>.</p> <p>Esercizio 674</p> <p>Creare un programma che fa uno screenshot solo della parte centrale dello schermo (ad esempio, un'area di 800x600 pixel centrata) e la salva come <code>screen_center.png</code>. Utilizzare la funzione <code>grab()</code> con i parametri appropriati per specificare l'area.</p> <p>Esercizio 675</p> <p>Creare un programma che chiede all'utente quanti secondi aspettare prima di fare lo screenshot, attende il tempo specificato, fa lo screenshot, lo ruota di 90 gradi in senso orario e lo salva come <code>screen_rotated.png</code>.</p> <p>Esercizio 676</p> <p>Creare un \"monitor della produttivit\u00e0\": il programma fa uno screenshot ogni 30 secondi per 5 volte, ridimensiona ogni immagine a 320x240 pixel e le salva con timestamp nel nome (ad esempio monitor_14-30-15.png). L'utente deve avere 3 secondi di avviso prima del primo screenshot.</p>"},{"location":"basics/106_pypi/#modulo-matplotlib","title":"Modulo matplotlib","text":"<p>Il modulo <code>matplotlib</code> serve per creare dei plot, ovvero dei grafici a partire da funzioni algebriche nel piano e nello spazio.</p> <p>Immaginate di voler disegnare il grafico della retta <code>y = 2 x</code>.</p> <p>Scegliete alcuni punti per le ascisse <code>x = [ 1 , 2 , 3 , 4 ]</code></p> <p>Calcolate le ordinate corrispondenti <code>y = [ 2 , 4 , 6 , 8 ]</code></p> <p>Disegnate il piano cartesiano e vi ponete i punti calcolati: <code>(1,2) (2,4) (3,6) (4,8)</code></p> <p>Infine tirate una riga che passa per questi punti</p> <p>Con <code>matplotlib</code> si possono fare cose del genere. Ci provo per la retta dell'esempio:</p> <pre><code>import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4]\ny = [2, 4, 6, 8]\n\nplt.plot(x, y)\n\nplt.title(\"Grafico della retta y = 2 x\")\nplt.xlabel(\"Asse X\")\nplt.ylabel(\"Asse Y\")\n\nplt.show()\n</code></pre> <p>Con questo codice ho generato la seguente immagine:</p> <p></p> <p>Ovviamente potrei disegnare anche dei pezzi segmentati:</p> <pre><code>import matplotlib.pyplot as plt\n\nx = [0, 2, 4, 6]\ny = [0, 2, 1, 3]\n\nplt.plot(x, y) # per disegnare solo i punti, usa plot(x,y,\"o\")\n\nplt.title(\"Punti a caso\")\n\nplt.show()\n</code></pre> <p> </p> <p>Per caratterizzare il grafico si potrebbe aggiungere una griglia:</p> <pre><code># inserisci una di queste funzioni PRIMA di plt.show()\n\n# cos\u00ec visualizzi TUTTA la griglia\nplt.grid()\n\n# cos\u00ec visualizzi SOLO le righe VERTICALI\nplt.grid(axis=\"x\") \n\n# cos\u00ec visualizzi SOLO le righe ORIZZONTALI\nplt.grid(axis=\"y\")\n</code></pre> <p>Se vogliamo inserire pi\u00f9 di un grafico, si potrebbe inserire una legenda</p> 2 grafici nello stesso piano cartesiano<pre><code>import matplotlib.pyplot as plt\n\nx = []\nf1 = []\nf2 = []\n\nfor n in range(1,10):\n    x.append(n)\n    f1.append(2*n)\n    f2.append(n**2)\n\nplt.plot( x , f1 , label=\"y=2x\")   # aggiungi un'etichetta\nplt.plot( x , f2 , label=\"y=x**2\")\n\nplt.legend()  # crea la legenda\n\nplt.show()\n</code></pre> <p></p> <p>Se invece di visualizzare l'immagine volete salvarla da qualche parte, invece di <code>show()</code>,  dovete usare il metodo <code>savefig(\"nomeImmagine.estensione\")</code>.</p> <pre><code>plt.savefig(\"immagine.jpg\")\n</code></pre> <p>Facile </p> <p>Si pu\u00f2 utilizzare questa libreria anche per disegnare barre verticali od orizzontali, i celebri istogrammi:</p> Barre Verticali<pre><code>import matplotlib.pyplot as plt\n\nnomi = [\"Asini\", \"Bradipi\", \"Cavalli\", \"Daini\"]\nnumeri = [5, 8, 2, 4]\n\nplt.bar(nomi,numeri) # per le barre orizzontali, usa barh()\nplt.show()\n</code></pre> <p></p> <p>Con quegli stessi dati posso disegnare anche un diagramma a torta:</p> <pre><code>plt.pie(numeri , labels = nomi)\n</code></pre> <p>Basta!</p> <p>Se volete approfondire un po', guardate il sito ufficiale: https://matplotlib.org/</p> <p>Oltre alla documentazione (so che non la leggerete) ci sono molti esempi e tutorial...</p>"},{"location":"basics/106_pypi/#esercizi_2","title":"Esercizi","text":"<p>Se proprio volete imparare... basta solo fare un po' di esercizio </p> <p>Esercizio 681</p> <p>Provate a realizzare una coppia di grafici secondo le seguenti specifiche: sulle ascisse ci vanno le date delle valutazioni e sull'ordinata i voti ottenuti. Il primo grafico rappresenta i voti di una materia a vostra scelta, mentre il secondo \u00e8 la riga orizzontale fissa che rappresenta la sufficienza. Visualizzare entrambi nello stesso plot.</p> <p>Esercizio 682</p> <p>Crea un grafico che rappresenta la funzione <code>y = 3x + 1</code> nell'intervallo da <code>x = 0</code> a <code>x = 10</code>.</p> <ul> <li>Usa almeno 11 punti (da 0 a 10) </li> <li>Aggiungi un titolo al grafico </li> <li>Etichetta gli assi X e Y </li> <li>Visualizza il grafico </li> </ul> <p>Esercizio 683</p> <p>Hai rilevato le temperature (in gradi Celsius) durante una settimana di ottobre:</p> <ul> <li>Luned\u00ec: 18\u00b0 </li> <li>Marted\u00ec: 20\u00b0 </li> <li>Mercoled\u00ec: 19\u00b0 </li> <li>Gioved\u00ec: 22\u00b0 </li> <li>Venerd\u00ec: 21\u00b0 </li> <li>Sabato: 17\u00b0 </li> <li>Domenica: 16\u00b0 </li> </ul> <p>Crea un grafico a barre che mostri le temperature dei diversi giorni.</p> <ul> <li>Usa <code>plt.bar()</code> per creare le barre </li> <li>Aggiungi un titolo significativo </li> <li>Etichetta correttamente gli assi </li> </ul> <p>Esercizio 684</p> <p>Hai ottenuto i seguenti voti durante il quadrimestre in Python:</p> <p>6, 7, 7, 8, 7, 9, 8, 7</p> <p>Crea un diagramma a torta che mostri la distribuzione percentuale dei voti (quanti 6, quanti 7, quanti 8, quanti 9 hai preso).</p> <ul> <li>Conta quante volte appare ogni voto </li> <li>Usa <code>plt.pie()</code> per creare il diagramma </li> <li>Aggiungi le etichette con i voti (6, 7, 8, 9) </li> </ul> <p>Prova a ripetere la generazione del grafico con un elenco di 20 voti generati casualmente scelti fra 6,7,8,9.</p> <p>Esercizio 685</p> <p>Disegna nello stesso grafico due funzioni:</p> <ul> <li><code>f(x) = x\u00b2</code> (parabola) </li> <li><code>g(x) = 4x</code> (retta) </li> </ul> <p>nell'intervallo da <code>x = 0</code> a <code>x = 5</code>.</p> <ul> <li>Usa almeno 20 punti per avere curve fluide </li> <li>Aggiungi una legenda che distingua le due funzioni </li> <li>Aggiungi una griglia per rendere il grafico pi\u00f9 leggibile </li> <li>Usa colori diversi per le due linee (parametro color in plot()) </li> <li>Salva il grafico come file \"confronto.png\" invece di visualizzarlo </li> </ul> <p> </p>"},{"location":"basics/107_files/","title":"Files","text":"<p>Le operazioni di I/O (input/output) da file e verso file sono operazioni native in Python, che come vedremo, si eseguono con un semplice comando (nativo, appunto) e che servono per interagire con un generico file presente nel filesystem (quindi sul nostro computer).</p> <p>Il primo capitolo \u00e8 dedicato espressamente a comprendere come questo meccanismo funzioni. Nel secondo capitolo, con il modulo <code>pathlib</code> si apprende uno strumento utile alla manipolazione dei percorsi dei file (es: dove si trova la cartella dei download? Voglio creare una cartella sul Desktop di...) e alla gestione dei file e delle cartelle.</p>"},{"location":"basics/107_files/#files-management","title":"Files Management","text":"<p>Per interagire con il filesystem del sistema in cui \u00e8 in esecuzione uno script, Python mette a disposizione due semplici funzioni predefinite: <code>open()</code> e <code>close()</code>. Banalmente, la prima permette di aprire un file e lavorarci dentro, mentre la seconda lo chiude.</p> <p>Vediamo nel dettaglio cosa questo significhi:</p> <pre><code>file_object = open ( name, mode )\n</code></pre> <p>La funzione <code>open</code> ha due parametri principali, di cui solo il primo \u00e8 obbligatorio:  il nome del file da aprire. Il secondo parametro indica la modalit\u00e0 di apertura: lettura, scrittura o aggiunta a fine file.</p> <p>Elenchiamo le principali modalit\u00e0:</p> Modo Descrizione r Modalit\u00e0 di lettura (read). Il file NON sar\u00e0 modificato da alcuna operazione. Se il file non esiste l'apertura fallisce.  Modo di default. w Modalit\u00e0 di scrittura (write).  Un file esistente verr\u00e0 sovrascritto, altrimenti ne verr\u00e0 creato uno nuovo. x Modalit\u00e0 di creazione file (non lo so perch\u00e9 x...). Ritorna un errore se il file esiste gi\u00e0. Se funziona, apre il file in scrittura. a Modalit\u00e0 di aggiunta a fine file (append).  Il file verr\u00e0 aperto in scrittura, aggiungendo in fondo a ci\u00f2 che esiste quello che viene scritto.  Altrimenti \u00e8 come write. <p>Oltre ad aprire un file per leggerci o scriverci, bisogna anche sapere come farlo. Le modalit\u00e0 di gestione dei file sono solo due:</p> Modo Descrizione t Modalit\u00e0 testuale.  In questa modalit\u00e0 i dati vengono gestiti byte a byte.  Modo di default. b Modalit\u00e0 binaria.  In questa modalit\u00e0 i dati vengono gestiti bit a bit. <p>Da queste informazioni si desume che l'apertura generica di un file corrisponde ad una apertura in lettura in modalit\u00e0 testuale:  qualsiasi altra operazione dovr\u00e0 essere esplicitata. Per evitare errori, esplicitiamo sempre la modalit\u00e0 di apertura!  Per quanto riguarda la gestione invece... qui tratteremo solo la gestione testuale :)</p> <p>Vediamo alcuni semplici esempi:</p> Esempio 1: creazione di un file con testo inserito all\u2019interno<pre><code>file = open(\"ciao.txt\", \"w\")\nfile.write(\"Ecco qua.\\nCapito?\")\nfile.close()\n</code></pre> <p>In questo primo esempio il file \"ciao.txt\" inizialmente non esiste. L'esecuzione del codice lo crea con dentro scritto il testo indicato. Dopo aver eseguito questo codice, vedrete nella cartella del file python, un file chiamato \"ciao.txt\" che contiene 2 righe...  Nella stessa cartella creiamo un nuovo file sorgente con questo codice:</p> Esempio 2: lettura del file 'ciao.txt' creato sopra<pre><code>file = open(\"ciao.txt\", \"r\")\ncontenuto = file.read()\nfile.close()\nprint(contenuto)\n</code></pre> <p>Che visualizzer\u00e0:</p> <pre><code>Ecco qua.\nCapito?\n</code></pre> <p>Penso sia tutto abbastanza intuitivo da capire. Facciamo un esempio con la modalit\u00e0 <code>append</code></p> Esempio 3: aggiunta a fine file<pre><code>file = open(\"ciao.txt\", \"a\")\nfile.write(\"\\nSperiamo di s\u00ec\")\nfile.close()\n</code></pre> <p>Se aprite il file \"ciao.txt\" DOPO aver eseguito il codice sopra, vedrete che il testo \u00e8 diventato di 3 righe:</p> <pre><code>Ecco qua.\nCapito?\nSperiamo di s\u00ec\n</code></pre> <p>Se avete osservato i 3 esempi proposti avrete notato che:</p> <ul> <li>la funzione <code>write()</code> scrive su file la stringa esatta che gli viene fornita come parametro senza aggiungere spazi      o andare a capo (come ad esempio fa la print())</li> <li>la funzione <code>read()</code> copia su una stringa tutto il contenuto del file in una volta sola.</li> </ul> <p>Se vogliamo leggere il file di testo riga per riga abbiamo due possibilit\u00e0:</p> <ol> <li>il ciclo for</li> <li>la funzione readline()</li> </ol> Esempio 4: lettura delle righe con ciclo for<pre><code>file = open(\"ciao.txt\", \"r\")\nfor riga in file:\n    print(riga)\nfile.close()\n</code></pre> <p>Che (ancora una volta) visualizzer\u00e0:</p> <pre><code>Ecco qua.\nCapito?\nSperiamo di s\u00ec\n</code></pre> <p>Stesso risultato lo si ottiene con la funzione <code>readline()</code> che, come dice il nome, legge una linea del file di testo.  Il difetto di questa seconda modalit\u00e0 \u00e8 che devi sapere quante righe contiene il file...</p> Esempio 5: lettura delle righe con funzione readline()<pre><code>file = open(\"ciao.txt\", \"r\")\nriga1 = file.readline()\nprint(riga1)\nriga2 = file.readline()\nprint(riga2)\nriga3 = file.readline()\nprint(riga3)\nfile.close()\n</code></pre> <p>Che (per l'ennesima volta) visualizzer\u00e0:</p> <pre><code>Ecco qua.\nCapito?\nSperiamo di s\u00ec\n</code></pre> <p>Attenzione!</p> <p>La visualizzazione degli ultimi due esempi non \u00e8 proprio... corretta!!! Se eseguite gli ultimi due spezzoni di codice vedrete infatti delle righe vuote in pi\u00f9...</p> <p>Se volete capire perch\u00e9... ragionate sul funzionamento della print e sul fatto che le righe dei file finiscono (ma comprendono) il carattere a capo <code>\\n</code></p> <p>Basta con gli esempi! Ma fra un attimo iniziamo con gli esercizi ;)</p>"},{"location":"basics/107_files/#file-objects","title":"File Objects","text":"<p>Un file object non \u00e8 nient\u2019altro che una variabile a cui \u00e8 stato assegnato l\u2019abbinamento con un file tramite la funzione open(). Se ad esempio scrivo:</p> <pre><code>file = open( \"file.txt\", \"w\" )\n</code></pre> <p>allora f diventa un file object! Questo tipo di variabile presenta alcune caratteristiche che permettono al programmatore di investigare sullo stato della relazione fra la variabile (e quindi il programma) e il file. Le caratteristiche esposte sono:</p> Caratteristica Descrizione Esempio file.name Contiene il nome del file \"file.txt\" file.mode Contiene il modo di apertura del file \"w\" file.closed Indica se il file \u00e8 chiuso oppure no False <p>Queste possono essere utilizzate ad esempio per verificare se \u00e8 possibile scrivere sul file oppure se il file \u00e8 gi\u00e0 stato chiuso.</p> <pre><code>if file.closed :\n    print(\"impossibile interagire con il file!\")\nelse:\n    if file.mode == \"w\" or file.mode == \"a\":\n        file.write(\"ciao\")\n    else:\n        print(\"file non aperto in scrittura!\")\n</code></pre> <p>Spero sia abbastanza chiaro. Nel dubbio\u2026 lo sapete gi\u00e0! Funzioni <code>dir()</code> ed <code>help()</code> !!!</p>"},{"location":"basics/107_files/#esercizi-sui-files","title":"Esercizi sui files","text":"<p>Esercizio 701 (parte 1)</p> <p>Scrivere un programma che chiede all\u2019utente di digitare il proprio nome e poi salva la stringa digitata sul file \"stringa.txt\".</p> <p>Esercizio 701 (parte 2)</p> <p>Scrivere un altro programma che carica in lettura il file \"stringa.txt\" creato nell\u2019esercizio precedente e ne visualizza  il contenuto sullo schermo (dovrebbe visualizzare la stringa digitata prima).</p> <p>Esercizio 702 (parte 1)</p> <p>Scrivere un programma che chiede all\u2019utente di digitare un numero intero e poi salva il numero digitato sul file \"intero.txt\".</p> <p>Suggerimento</p> <p>La lettura e scrittura da file funziona sempre e solo con le stringhe, quindi quando si lavora con interi bisogna ricordarsi di convertirli  in stringhe quando si scrive su file e riconvertirli in interi quando si leggono da file.</p> <p>Esercizio 702 (parte 2)</p> <p>Scrivere un altro programma che carica in lettura il file \"intero.txt\" creato nell\u2019esercizio precedente e salva il suo contenuto,  convertito in intero, su una variabile. Visualizzare la variabile e verificare il suo tipo con la funzione <code>type()</code>.</p> <p>Esercizio 703 (parte 1)</p> <p>Scrivere un programma che chiede all\u2019utente di digitare un numero reale e poi salva il numero digitato sul file \"reale.txt\".</p> <p>Esercizio 703 (parte 2)</p> <p>Scrivere un programma che carica in lettura il file \"reale.txt\" creato nell\u2019esercizio precedente e salva il suo contenuto, convertito in reale, su una variabile.  Visualizzare la variabile e verificare il suo tipo con la funzione type().</p> <p>Esercizio 704 (parte 1)</p> <p>Creare una lista contenente i nomi di alcuni animali, visualizzarla sullo schermo e poi andare a copiarne il contenuto nel file \"animali.txt\" avendo cura di mettere  ogni animale in una nuova riga. Eseguito il codice verificare che il file \u00e8 effettivamente ben formato con un animale per riga.</p> <p>Esercizio 704 (parte 2)</p> <p>Aprire in lettura il file \"animali.txt\" creato nella parte 1 e leggere il contenuto riga per riga visualizzando ogni volta l\u2019animale \"estratto\".</p> <p>Esercizio 704 (parte 3)</p> <p>Aprire il file \"animali.txt\" in modalit\u00e0 \"append\" (aggiunta a fine file). Chiedere all\u2019utente di inserire il nome di un animale e procedere all\u2019inserimento nel file.  Ripetere l\u2019operazione 2 o 3 volte, aggiungendo ogni volta l\u2019animale inserito nel file. Terminato l\u2019inserimento, chiudere il file e ripetere il codice dell\u2019esercizio precedente per visualizzarne il contenuto.</p> <p>Esercizio 704 (parte 4)</p> <p>Creare una lista, inizialmente vuota. Aprire il file \"animali.txt\" in lettura e inserire ogni animale presente nel file come elemento (stringa) nella lista. Visualizzare la lista cos\u00ec ottenuta (attenzione ai caratteri di a capo!!!\")</p> <p>Esercizio 710</p> <p>Creare a mano un file chiamato \"parola.txt\" nella stessa cartella del codice di questo esercizio, digitando al suo interno una parola qualsiasi.</p> <p>Scrivere un programma per provare ad aprire il file in modalit\u00e0 \"x\" per verificare se \u00e8 possibile andarlo a sovrascrivere. </p> <p>Ripetere l\u2019operazione in modalit\u00e0 \"w\" e infine controllare il contenuto del file: cosa contiene adesso???</p> <p>Esercizio 711: area rettangolo</p> <p>Creare a mano un file di testo, chiamato \"lati.txt\" salvando all'interno due numeri reali qualsiasi, uno per riga.</p> <p>Implementare un software che legge dal file \"lati.txt\" due valori reali per la base e l'altezza di un rettangolo, visualizza i dati su schermo,  calcola e visualizza l\u2019area del rettangolo e salva il valore calcolato nel file \"area.txt\".</p> <p>Esercizio 712: secondi trascorsi</p> <p>Creare a mano un file di testo chiamato \"secondi.txt\", contenente al suo interno un numero intero positivo qualsiasi.</p> <p>Implementare un software che legge dal file \"secondi.txt\" un valore intero che rappresenta i secondi trascorsi dalla mezzanotte di un dato giorno e che trasforma questo valore,  visualizzandolo su schermo in ore:minuti:secondi. Ad esempio, se il valore caricato dal file \"secondi.txt\" fosse 4000 (uguale a 3600, 1 ora, + 360, 6 minuti, + 40),  il programma dovr\u00e0 visualizzare a video 01:06:40, aggiungendo opportunamente uno ZERO in caso di cifra unica.</p> <p>I numeri vanno poi memorizzati nello stesso formato nel file \"orario.txt\".</p> <p>Esercizio 713: stringhe</p> <p>Dichiarare una lista di 5 stringhe e procedere ad un salvataggio su file delle parole, una per riga.</p> <p>Esercizio 714: media dei numeri</p> <p>Creare a mano un file di testo chiamato \"numeri.txt\" salvando al suo interno 10 numeri interi, uno per riga.</p> <p>Implementare un software che legge dal file \"numeri.txt\", caricarne il contenuto su una lista, procedere al calcolo della media aritmetica dei numeri inseriti,  visualizzare il risultato a video e salvarlo nel file \"media.txt\".</p> <p>Esercizio 715 (parte 1): ricerca elementi</p> <p>Creare a mano un file di testo chiamato \"sequenza.txt\", salvando al suo interno una certa quantit\u00e0 di numeri interi, uno per riga.</p> <p>Implementare un software che legge dal file \"sequenza.txt\" i dati, li carica su una lista e li visualizza a video. Chiedere poi all'utente di inserire un numero intero e procedere alla ricerca di questo nella sequenza caricata dal file. Visualizzare le posizioni ove questo numero si trovi. Scrivere tutte le posizioni trovate riga per riga nel file \"posizioni.txt\". Se il numero non viene mai trovato, si inserisca nel file la scritta maiuscola \"NON TROVATO\".</p> <p>Esercizio 715 (parte 2): ordinamenti</p> <p>Scrivete un programma che legge dal file \"sequenza.txt\" una sequenza di interi, la ordina in modo crescente e la salva ordinata sul file \"ordinati.txt\" (uno per riga).</p> <p>Esercizio 716</p> <p>Creare un file chiamato \"settings.txt\" contenente una serie di righe del tipo chiave = valore (ad esempio: nome=Andrea, cognome=Diamantini\u2026).  Importare i dati dal file e caricarli in un dizionario creato appositamente con la parte prima dell\u2019uguale \"strizzata\" degli spazi come chiave e la parte dopo l\u2019uguale,  \"strizzata\" di spazi e newline come valore.</p>"},{"location":"basics/107_files/#modulo-pathlib","title":"Modulo Pathlib","text":"<p>Il modulo Pathlib permette di ricavare informazioni sui percorsi ove si trovano file e directories all\u2019interno del sistema operativo che esegue lo script Python in oggetto.  In particolare, di solito viene utilizzato l\u2019oggetto Path importato dalla libreria pathlib.</p> <pre><code>from pathlib import Path\n\n# il file \"song.mp3\" della cartella \"musica\" su C: in Windows \ncanzone = Path(\"C:/musica/song.mp3\")\nprint(\"Percorso della canzone:\", canzone)\n\n# la cartella corrente (dove abbiamo salvato questo file Python)\ncur = Path.cwd()\nprint( \"Cartella corrente:\", cur )\n\n# la HOME utente\n# \"C:\\Users\\utente\" su Windows, \"/home/utente\" su Mac/Linux\nhomePath = Path.home()\nprint( \"Home dir:\", homePath )\n\n# il percorso del Desktop\n# il simbolo / congiunge i percorsi\ndesktop = home / \"Desktop\"\nprint( \"Il percorso del Desktop:\", desktop )\n</code></pre> <p>Negli esempi trattati sopra sono evidenziate alcune funzionalit\u00e0:</p> <ul> <li>un percorso pu\u00f2 essere descritto tramite una stringa, con il simbolo <code>/</code> (slash) come separatore di percorsi</li> <li>Un Path indica un percorso che non deve per forza deve esistere... anzi tra le funzionalit\u00e0 di Path c'\u00e8 quella di verificare se un percorso esiste ed eventualmente crearlo</li> </ul> <p>I percorsi delle cartelle principali</p> <p>Dopo qualche anno a parlare del modulo Pathlib, ho capito che gli studenti non hanno bene idea dell'organizzazione dei files in un Sistema Operativo.</p> <p>Cerchiamo di farla semplice: da una parte troviamo il Sistema Operativo Windows (che fa come gli pare), dall'altra tutto il resto del mondo (Linux, BSD, MacOS, iOS, Android) che segue una linea comune.</p> <p>Windows</p> <p>Il sistema operativo Windows gestisce gli HD in maniera unica: ogni HD viene abbinato ad una lettera, ma per motivi storici di solito si parte da C: (se hai 3 dischi saranno C: D: E:)</p> <p>In uno di questi, di solito C:, c'\u00e8 il sistema operativo vero e proprio, nella cartella <code>C:\\Windows</code>. Gli utenti hanno ognuno uno spazio personale (una home): queste cartelle si trovano tutte nel percorso <code>C:\\Users</code> e si chiamano con il relativo nome utente (la home dell'utente pippo sar\u00e0 <code>C:\\Users\\pippo</code>)</p> <p>All'interno della home ci sono alcune cartelle importanti per l'organizzazione dei file dell'utente. Le cartelle:</p> <ul> <li><code>Documents</code>: la cartella dei documenti</li> <li><code>Downloads</code>: la cartella dove vanno a finire i download</li> <li><code>Desktop</code>: la cartella che corrisponde al Desktop utente</li> <li>etc...</li> </ul> <p>Quindi ad esempio, il desktop dell'utente pippo si trova nella cartella <code>C:\\Users\\pippo\\Desktop</code>.</p> <p>Linux, Mac, BSD, etc...</p> <p>Tutti gli altri sistemi operativi uniscono tutti gli HD montati sul proprio PC in un unico spazio comune che identificano con il simbolo <code>/</code> e chiamano <code>root</code> (radice).</p> <p>Le cartelle degli utenti si trovano nella cartella <code>/home</code> e si chiamano ovviamente con il nome utente.  Ad esempio lo spazio personale dell'utente ciccio sar\u00e0 nel percorso <code>/home/ciccio</code>.</p> <p>Le cartelle importanti per l'utente si chiamano allo stesso modo, quindi ad esempio, la cartella Downloads di ciccio si trover\u00e0 su <code>/home/ciccio/Downloads</code></p> <p>Una partenza comune: <code>Path.home()</code></p> <p>In qualsiasi OS, Python identifica la cartella personale tramite la funzione Path.home(), cos\u00ec che (ad esempio) il Desktop di qualunque utente si trovi nel percorso:</p> <pre><code>percorsoDesktop = Path.home() / \"Desktop\"\n</code></pre> <p>Molto intelligente </p> <p>L\u2019oggetto Path espone fra le altre le seguenti funzioni:</p> Funzione Descrizione <code>cwd()</code> Ritorna il percorso della cartella corrente. Restituisce un Path. <code>home()</code> Ritorna il percorso della cartella utente (la <code>home</code>, vedi sopra). Restituisce un Path. ---------------------- ----------------------------------------------------------------------------------------- <code>exists()</code> Verifica se il percorso attuale esiste oppure no. Ritorna True o False. <code>is_dir()</code> Ritorna True se il path attuale \u00e8 una cartella, False altrimenti. <code>is_file()</code> Ritorna True se il path attuale \u00e8 un file, False altrimenti. ---------------------- ----------------------------------------------------------------------------------------- <code>iterdir()</code> Quando il percorso punta a una directory, ritorna la lista degli oggetti percorso del contenuto della directory <code>glob(pattern)</code> Ritorna la lista di tutti i file e le cartelle presenti nel Path e che rispettano il pattern. ---------------------- ----------------------------------------------------------------------------------------- <code>open(mode)</code> Apre il file indicato nel Path in modalit\u00e0 \"mode\". Ritorna un file object come fa la funzione predefinita \"open()\" <code>mkdir()</code> Crea la cartella abbinata al percorso del Path. ---------------------- ----------------------------------------------------------------------------------------- <code>unlink()</code> Rimuove un file (solo se \u00e8 un file).  Attenti a quello che fate, per favore!!! <code>rmdir()</code> Rimuove la cartella abbinata al percorso del Path, ma solo se la cartella \u00e8 vuota, altrimenti ERRORE!!! ---------------------- ----------------------------------------------------------------------------------------- <code>rename(target)</code> Rinomina il Path al percorso indicato nel Path \"target\". <p>Note</p> <p>Per vedere tutte le funzioni offerte dall'oggetto Path:</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; dir(Path)\n</code></pre> <p>(Ma questo lo sapevate gi\u00e0...)</p> <p>Vediamo alcuni esempi per capire il funzionamento delle funzioni pi\u00f9 \"ostiche\":  ovviamente ognuno di questi esempi dovrebbe iniziare con l\u2019import dell\u2019oggetto Path dalla libreria pathlib.</p> <pre><code>from pathlib import Path\n</code></pre> <p></p> Esempio 1: verificare se nella Home \u00e8 presente un file chiamato 'pippo'<pre><code>percorso = Path.home()\npippo = percorso / \"pippo\"\nif pippo.exists():\n    print(\"pippo esiste\")\n    if pippo.is_file():\n        print(\"ed \u00e8 un file\")\n    if pippo.is_dir():\n        print(\"ed \u00e8 una cartella\")\nelse:\n    print(\"pippo non esiste\")\n</code></pre> <p></p> Esempio 2: elenco dei file *.txt presenti nel Desktop dell\u2019utente 'pippo'<pre><code>desk = Path.home() / \"Desktop\"\nfor f in desk.glob(\"*.txt\"):\n    print(f, \"(file)\")\n</code></pre> <p></p> <p>Pattern</p> <p>Il parametro pattern della funzione glob \u00e8 una stringa che ammette la wildcard * dove per wildcard (in informatica) si intende il carattere  che pu\u00f2 sostituire qualunque altro, anche molti.  Cos\u00ec il pattern \"*.txt\" rappresenta tutti i file che finiscono per \".txt\", il pattern \"*\" rappresenta tutti i file con qualunque nome,  il pattern \"a*\" rappresenta tutti i file che iniziano per \"a\" e cos\u00ec via.</p> <p></p> Esempio 3: elenco del contenuto della home con suggerimento a fianco<pre><code>home = Path.home()\nfor f in home.iterdir():\n    if f.is_file():\n        print(f, \"(file)\")\n    elif f.is_dir():\n        print(f, \"(dir)\")\n    else:\n        print(f, \"(boh)\")    \n</code></pre> <p></p> Esempio 4: creazione, cambio nome ed eliminazione di una cartella nella home utente<pre><code>home = Path.home()\n\n# creazione della cartella \"ciao\" nella home\n# ATTENZIONE!!! mkdir da errore se la cartella esiste gi\u00e0... bisogna controllare!!!\ncartellaCiao = home / \"ciao\"\nif not cartellaCiao.exists():\n    cartellaCiao.mkdir()\n\n# cambio nome della cartella \"ciao\" in \"salve\" nella home\ncartellaSalve = home / \"salve\"\ncartellaCiao.rename(cartellaSalve)\n\n# eliminazione della cartella \"salve\"\ncartellaSalve.rmdir()\n</code></pre> <p></p> Esempio 5: creazione del file 'pippo.txt' nel Desktop<pre><code>desktop = Path.home() / \"Desktop\"\nfilePath = desktop / \"pippo.txt\"\nfile = filePath.open(\"w\")\nfile.write(\"Ciao Pippo\")\nfile.close()\n</code></pre> <p>Grazie alla funzione <code>open()</code> dell\u2019oggetto Path possiamo creare o aprire in lettura file in un percorso a nostra scelta. O a scelta dell\u2019utente. Adesso tocca a voi provare il codice degli esempi e poi procedere con gli esercizi!</p>"},{"location":"basics/107_files/#esercizi","title":"Esercizi","text":"<p>Esercizio 731</p> <p>Scrivere un programma che elenca tutto il contenuto del proprio Desktop e verificare per ogni elemento se esso \u00e8 un file oppure una cartella.</p> <p>Esercizio 732</p> <p>Scrivere un programma per creare sul Desktop una cartella di nome \"prova\". All'interno di essa dovr\u00e0 essere inserito un file di nome \"pippo.txt\". Dentro al file \"pippo.txt\" ci deve essere inserita una frase qualsiasi a scelta dell'utente.</p> <p>Esercizio 733</p> <p>Creare sul proprio Desktop un file di nome \"gatto\". Chiedere all'utente di inserire una parola (ad esempio: \"cane\") e rinominare il file precedentemente creato da \"gatto\" alla parola inserita dall'utente.</p> <p>Esercizio 733 bis</p> <p>Chiedere all'utente se vuole eliminare il file dell'esercizio precedente. Se s\u00ec, eliminarlo. Se il file non \u00e8 pi\u00f9 presente, comunicare all'utente che il file non \u00e8 pi\u00f9 presente sul Desktop.</p> <p>Esercizio 734</p> <p>Scrivere un programma creare una cartella di nome \"cartella\" sul Desktop e al suo interno un file vuoto di nome \"file\".</p> <p>Procedere ad eliminare la cartella \"cartella\", verificando che \u00e8 impossibile farlo se prima non si elimina ogni file al suo interno.</p> <p>Esercizio 735</p> <p>Creare sul Desktop la cartella \u201cesercizio\u201d. Al suo interno generare un file chiamato \u201cnumeri.txt\u201d contenente 10 numeri casuali compresi fra 1 e 100. I numeri vanno scritti in colonna (uno sotto l\u2019altro).</p> <p>Creare dentro la cartella \u201cesercizio\u201d un file chiamato \u201csommaPari\u201d contenente la somma dei numeri pari contenuti nel file \u201cnumeri.txt\u201d.</p> <p>Esercizio 736</p> <p>Ogni volta che esegui il programma \"es736.py\" questo aggiorna un file chiamato \"contatore.txt\", salvato nella home, a seconda del suo contenuto.  Se il file non esiste, si crea scrivendoci dentro il valore 1. Se esiste, se ne legge il contenuto e si modifica il file scrivendo in esso il numero successivo.  Ad esempio, se il file contiene il numero 3, si scriver\u00e0 al suo posto il numero 4. E cos\u00ec via, ad ogni esecuzione del programma.</p> <p>Esercizio 737</p> <p>Chiedere all'utente di inserire una stringa. Visualizzare l\u2019elenco di tutti i file con estensione <code>txt</code> oppure <code>py</code> presenti nella propria cartella Downloads al cui interno \u00e8 presente la stringa inserita.</p> <p>Esercizio 738</p> <p>Creare un programma per ripulire la cartella dei Downloads. Prima visualizza la stringa: \"Nella cartella Downloads ci sono TOT files. Vuoi cancellarli?\" (T) S\u00ec, tutti. (U) guardiamoli uno per volta (N) No  Se l\u2019utente seleziona T, cancella tutto e via. Se seleziona N, non fare niente  Se seleziona U, per ogni file visualizza il nome e chiedi: \"Vuoi cancellarlo? (S/N)\"</p> <p>Esercizio 739 (Sposta Files)</p> <p>Crea sul Desktop una cartella chiamata ESERCIZI. Cerca i files Python presenti nella tua cartella Documenti e spostali nella cartella ESERCIZI.</p> <p>Suggerimento: per spostare un file</p> <ol> <li>lo apri, </li> <li>copi il contenuto, </li> <li>lo chiudi, </li> <li>crei il file con lo stesso nome nella nuova cartella, </li> <li>ci copi il contenuto, </li> <li>elimini il vecchio file</li> </ol> <p> </p>"},{"location":"basics/108_csv/","title":"Modulo CSV","text":"<p>In questo capitolo, per lavorare con il modulo csv, introdurremo prima una struttura dati che completa la nostra conoscenza sulle sequenze: i dizionari!</p> <p>Questi saranno lo strumento tramite il quale lavoreremo poi con i dati su file e il modulo csv.</p>"},{"location":"basics/108_csv/#dizionari","title":"Dizionari","text":"<p>I dizionari (<code>dict</code>) sono un tipo Python predefinito, sequenza, mutabile, non ordinato (e non ordinabile) che contiene elementi (<code>items</code>)  formati ognuno da una coppia <code>chiave (key): valore (value)</code>.</p> <p>Per dichiarare gli elementi di un dizionario si utilizzano le parentesi graffe e questo ci fa capire che i tipi predefiniti sono finiti,  perch\u00e9 sono finiti i tipi di parentesi esistenti  </p> <p>Vediamo con un esempio il concetto:</p> <pre><code>prefisso = { \"IT\": 39, \"ES\": 34, \"DE\": 49}\n</code></pre> <p>In questo semplice esempio abbiamo memorizzato i prefissi internazionali di alcuni stati: data la chiave (il nome dello stato) si pu\u00f2 visualizzare il prefisso corrispondente (il \"valore\"), ricorrendo per\u00f2 alle parentesi quadre:</p> <pre><code>print( prefisso[\"IT\"] ) # scrive 39\n</code></pre> <p>Per completezza, ricordo che \u00e8 possibile verificare il tipo della variabile con il comando <code>type()</code></p> <pre><code>type(prefisso)    # vale &lt;class 'dict'&gt;\n</code></pre> <p>e che \u00e8 possibile creare un dizionario vuoto semplicemente utilizzando le parentesi graffe: essendo i dizionari un tipo mutabile sar\u00e0 sempre possibile aggiungervi dati successivamente.</p> <pre><code>dizionarioVuoto = {}\n</code></pre> <p>Torniamo all'esempio del dizionario dei prefissi e vediamo come \u00e8 semplice inserire un nuova coppia chiave: valore nel dizionario.  Occhio all'utilizzo delle parentesi, che in questo caso sono le quadre:</p> <pre><code>prefisso[\"FR\"] = 34\nprint(prefisso)\n</code></pre> <pre><code>{ \"IT\": 39 , \"ES\": 34 , \"DE\": 49 , \"FR\": 34 }\n</code></pre> <p>Come vedete ci sono 2 stati (\"ES\" e \"FR\") che hanno lo stesso valore, lo stesso prefisso. Questo \u00e8 assolutamente possibile nei dizionari.  I dizionari per\u00f2, non ammettono valori duplicati nelle chiavi, quindi non \u00e8 possibile inserire due chiavi uguali per valori diversi.  Da questa considerazione si capisce anche che le chiavi di un dizionario devono essere per forza tipi immutabili  (ad esempio numeri, stringhe, tuple, etc\u2026 solitamente interi o stringhe) mentre per i valori si pu\u00f2 dare spazio alla fantasia.</p> <p>L'inserimento dei dati dipende dall'esistenza o meno della chiave nel dizionario:</p> <pre><code># se la chiave non esiste, viene aggiunta una nuova coppia nel dizionario\nprefisso[\"UK\"] = 44\n# se la chiave \u00e8 gi\u00e0 presente, viene modificato il valore in essa\nprefisso[\"FR\"] = 33\nprint(prefisso)\n</code></pre> <pre><code>{ \"IT\": 39, \"ES\": 34, \"DE\": 49, \"FR\": 33, \"UK\": 44 }\n</code></pre> <p>I dizionari non possono essere ordinati!!!</p> <p>Non \u00e8 possibile ordinare i valori presenti in un dizionario. Per procedere ad una ricerca bisogna fare affidamento solo sulle chiavi!!!</p>"},{"location":"basics/108_csv/#lavorare-con-i-dizionari","title":"Lavorare con i dizionari","text":"<p>Per le nostre considerazioni, partiremo analizzando il dizionario \"prefisso\" gi\u00e0 definito:</p> <pre><code>print(prefisso)\n</code></pre> <pre><code>{ \"IT\": 39, \"ES\": 34, \"DE\": 49, \"FR\": 33, \"UK\": 44 }\n</code></pre> <p></p> <p>Come sappiamo, \u00e8 possibile interrogare una sequenza per sapere se un elemento \u00e8 presente in essa. Nei dizionari l'istruzione <code>IN</code> funziona con le chiavi:</p> <pre><code>\"IT\" in prefisso    # vale True\n\"US\" in prefisso    # vale False\n</code></pre> <p>Quindi, il seguente codice:</p> <pre><code>if \"IT\" in prefisso:\n    print(\"il prefisso \\\"IT\\\" \u00e8 presente e vale\", prefisso[\"IT\"])\nelse:\n    print(\"il prefisso \\\"IT\\\" non \u00e8 presente\")\n</code></pre> <p>scriver\u00e0:</p> <pre><code>il prefisso \"IT\" \u00e8 presente e vale 39\n</code></pre> <p></p> <p>L'istruzione <code>FOR...IN</code> che ben conosciamo, scorre le chiavi dei dizionari:</p> <pre><code>for chiave in prefisso:\n    print(chiave)\n</code></pre> <pre><code>IT\nES\nDE\nFR\nUK\n</code></pre> <p>Questo significa che \u00e8 semplicissimo usare il FOR...IN per ottenere le chiavi e visualizzare dunque i valori contenuti nel dizionario, con la sintassi <code>dizionario[chiave] = valore</code>:</p> <pre><code>for chiave in prefisso:\n    print( \"Prefisso\", chiave, \":\", prefisso[chiave] )\n</code></pre> <pre><code>Prefisso IT : 39\nPrefisso ES : 34\nPrefisso DE : 49\nPrefisso FR : 33\nPrefisso UK : 44\n</code></pre> <p></p> <p>I dizionari supportano inoltre alcuni metodi aggiuntivi tipici della classe <code>dict</code>. Dopo la tabella riassuntiva trovate alcuni esempi esplicativi.</p> Metodo Descrizione <code>dic.keys()</code> Restituisce una sequenza speciale (tipo una lista) che contiene tutte le chiavi del dizionario dic, aggiornate in tempo reale. <code>dic.values()</code> Restituisce una sequenza speciale (tipo una lista) che contiene tutti i valori del dizionario dic, aggiornati in tempo reale. <code>dic.get(key, default)</code> Restituisce il valore corrispondente a key, oppure <code>default</code> se non esiste. Se <code>default</code> \u00e8 nullo, non restituisce nulla. <code>dic.pop(key, default)</code> Restituisce il valore corrispondente a key e lo elimina dal dizionario. Se non presente restituisce <code>default</code>. Se non presente e default non impostato, genera un errore chiamato <code>KeyError</code>. <code>dic.copy()</code> Clona dic <code>dic.clear()</code> Cancella dic, ovvero rimuove tutti i suoi elementi <p>Esempio 1: keys</p> <pre><code>chiavi = prefisso.keys()\nprint(chiavi)    # scrive dict_keys( [\"IT\",\"ES\",\"DE\",\"FR\",\"UK\"] )... simile ad una lista, vedete?\n</code></pre> <pre><code>for k in chiavi:\n    print(k)\n</code></pre> <pre><code>IT\nES\nDE\nFR\nUK\n</code></pre> <pre><code>prefisso[\"PR\"] = 25 # aggiungo un elemento al dizionario\nprint(chiavi)\n</code></pre> <pre><code>dict_keys( [\"IT\",\"ES\",\"DE\",\"FR\",\"UK\",\"PR\"] ) # valori aggiornati\n</code></pre> <p>Esempio 2: values</p> <pre><code>valori = prefisso.values()\nprint(valori)     # scrive dict_values( [39, 34, 49, 33, 44] ) ... simile ad una lista, vedete?\n</code></pre> <pre><code>for v in valori:\n    print(k)\n</code></pre> <pre><code>39\n34\n49\n33\n44\n</code></pre> <pre><code>prefisso[\"PR\"] = 25 # aggiungo un elemento al dizionario\nprint(valori)\n</code></pre> <pre><code>dict_values( [39, 34, 49, 33, 44, 25] ) # valori aggiornati\n</code></pre> <p>Esempio 3: get</p> <pre><code># prefisso vale { \"IT\": 39, \"ES\": 34, \"DE\": 49, \"FR\": 33, \"UK\": 44 }\n\nprefisso.get(\"US\")      # la chiave \"US\" non c'\u00e8. Non ritorna nulla\nprefisso.get(\"US\", 0)   # \"US\" chiave non presente, ritorna 0\nprefisso.get(\"IT\")      # \"IT\" chiave presente, ritorna il valore 39\nprefisso.get(\"IT\", 0)   # essendo \"IT\" presente, ritorna comunque 39\n</code></pre> <p>Esempio 4: pop</p> <pre><code># prefisso vale { \"IT\": 39, \"ES\": 34, \"DE\": 49, \"FR\": 33, \"UK\": 44 }\n\nprefisso.pop(\"IT\")    # chiave \"IT\" presente, ritorna il valore 39\nprint(prefisso)       # scrive { \"ES\": 34, \"DE\": 49, \"FR\": 33, \"UK\": 44 }\n                      # la coppia \"IT\":39 \u00e8 stata eliminata dal dizionario\n\nprefisso.pop(\"US\")    # la chiave \"US\" non c'\u00e8. ERRORE\nKeyError\nprefisso.pop(\"US\", 0) # valore di default impostato a 0, ritorna 0\n</code></pre> <p>Tip</p> <p>con un valore di default impostato <code>pop()</code> non da mai errore!!!</p> <p>Spero che osservando gli esempi sia tutto chiaro sul funzionamento dei dizionari e sulle funzioni disponibili per essi.  Mi raccomando di provare voi stessi a riprodurre gli esempi per meglio capire quello che succede. E poi di provare a fare gli esercizi qui sotto :)</p>"},{"location":"basics/108_csv/#esercizi-sui-dizionari","title":"Esercizi sui dizionari","text":"<p>Esercizio 801</p> <p>Creare un dizionario vuoto, chiamato DatiPersonali. Chiedere all'utente di inserire i propri dati personali  (nome, cognome, indirizzo, numero civico, citt\u00e0, provincia, CAP) e inserirli nel dizionario con il tipo di dato come chiave (ad esempio \"nome\")  e il dato inserito dall'utente come valore.</p> <p>Visualizzare i dati contenuti nel dizionario tramite un ciclo for..in sulle chiavi del dizionario.</p> <p>Esercizio 802</p> <p>Definire un dizionario vuoto chiamato \"quadrati\" e inserirvi all'interno una serie di valori tramite codice:  le chiavi saranno i numeri interi da 1 a 100 e i valori saranno i quadrati delle chiavi.</p> <p>Visualizzare tutto il dizionario scrivendo per ogni riga: \"chiave\" al quadrato = \"valore\"</p> <p>Esercizio 803</p> <p>Definire un dizionario vuoto chiamato \"dispari\" e inserirvi all'interno una serie di valori tramite codice:  le chiavi saranno i numeri da 0 a 99 e i valori saranno i primi 100 numeri dispari.  Mostrare il dizionario cos\u00ec ottenuto, visualizzando per ogni elemento la stringa \"chiave: key, numero dispari abbinato: value\".</p> <p>Chiedere all'utente di inserire un numero intero e se esso \u00e8 una chiave del dizionario, visualizzare il numero corrispondente.  Altrimenti visualizzare la scritta \"chiave non presente nel dizionario\".</p> <p>Esercizio 804</p> <p>Definire il dizionario vuoto chiamato \"pari\" e inserirvi all'interno una serie di valori tramite codice:  le chiavi saranno i numeri da 1 a 50 e i valori saranno i primi 50 numeri pari.  Mostrare il dizionario cos\u00ec ottenuto, visualizzando per ogni elemento la stringa \"chiave: key, numero pari abbinato: value\".</p> <p>Chiedere all'utente di inserire un numero intero e se esso \u00e8 una chiave del dizionario, eliminare la coppia chiave:valore corrispondente.  Altrimenti visualizzare la scritta \"chiave non presente nel dizionario\".</p> <p>Esercizio 805</p> <p>Definire un dizionario, inizialmente vuoto, chiamato \"studentiDaInterrogare\".  All'inizio va riempito con una serie di coppie dove la chiave sono i numeri interi che vanno da 1 in avanti (la posizione sul registro) e il valore \u00e8 il cognome dello studente.</p> <p>Definire la lista \"interrogati\", inizialmente vuota. Estrarre 5 numeri casuali fra 1 e il numero di studenti da interrogare.  Se il numero estratto \u00e8 presente come chiave del dizionario, eliminare da esso l'elemento che corrisponde a quella chiave e inserire quel valore nella lista \"interrogati\".</p> <p>Al termine delle 5 estrazioni visualizzare la lista \"interrogati\" e il dizionario \"studentiDaInterrogare\".</p> <p>Esercizio 806</p> <p>Definire un dizionario vuoto chiamato \"Magazzino\", che sar\u00e0 riempito con elementi tali che le chiavi rappresentano il prodotto presente in esso  e i valori il numero di pezzi dello stesso. Inserire al suo interno i seguenti prodotti: 25 bastoni, 138 scaffali, 2000 scatole, 50 attaccapanni.</p> <p>Visualizzare il contenuto del magazzino. </p> <p>Chiedere all'utente di selezionare un prodotto; se il prodotto \u00e8 presente, visualizzare il numero di elementi di quel prodotto presenti nel magazzino e permettere all'utente di indicare quanti ne desidera. Il magazzino deve essere aggiornato togliendo dal magazzino i prodotti acquistati dall'utente. Ad esempio, se l'utente seleziona scaffali, si visualizzi una scritta tipo: \"Presenti 25 scaffali. Quanti vuole acquistarne? Se l'utente digita 30, ovviamente il programma insulta l'utente. Se digita, ad esempio, 5, si visualizza una frase tipo \"venduti 5 scaffali\" e il magazzino viene aggiornato al nuovo numero di scaffali presenti (25 erano, 5 sono stati venduti... 20!!!)</p> <p>Visualizzare il magazzino, elencando i prodotti rimasti. Per ognuno dei prodotti rimasti, togliere 1 pezzo. Visualizzare di nuovo il magazzino.</p> <p>Esercizio 807</p> <p>Definire un dizionario chiamato \"cartellaTombola\" e riempirlo con 5 numeri interi random fra 1 a 90 diversi fra loro.  Essi saranno la chiave dell'elemento inserito, mentre il valore sar\u00e0 per tutti il booleano False. Visualizzare le chiavi del dizionario \"cartellaTombola\".</p> <p>Ad esempio potrebbe essere generato un dizionario tipo <code>{ 23: False, 45: False, 56: False, 78: False, 90:False}</code>.</p> <p>Ripetere 10 volte l'estrazione casuale di un numero compreso fra 1 e 90. Se il numero \u00e8 una chiave della cartella, modificare a True il valore corrispondente. Alla fine delle 10 estrazioni verificare quanti e quali numeri della cartella sono stati estratti.</p> <p>Esercizio 808</p> <p>Permettere all'utente di inserire una parola e creare con questa il dizionario delle frequenze delle lettere.  Ad esempio, data una stringa \"ababcc\", otterremo in risultato <code>{\"a\": 2, \"b\": 2, \"c\": 2, \"d\": 0\u2026...}</code>. </p> <p>Visualizzare alla fine la parola e tutti gli elementi del dizionario.  Analizzando il dizionario trovare la lettera pi\u00f9 frequente nella parola inserita.  Visualizzare infine solo gli elementi del dizionario che hanno frequenza positiva.</p> <p>Esercizio 809</p> <p>Creare un dizionario ItalianoInglese e inserire una serie di termini con la parola italiana come chiave e la corrispondente traduzione inglese come valore.  Ad esempio alla chiave \"cane\" viene abbinato il valore \"dog\". </p> <p>Data una qualunque stringa da parte dell'utente procedere a visualizzare la stringa \"tradotta\" sostituendo tutte le parole trovate presenti  nel dizionario con la corrispondente parola inglese.</p> <p>Esercizio 810</p> <p>Definire un dizionario, chiamato \"voti\", inizialmente vuoto. In esso dovranno essere aggiunti i voti di tutte le vostre materie,  in modo tale che il nome della materia sia la chiave ed il voto corrispondente il valore. Visualizzare il dizionario con un ciclo,  visualizzando in ogni riga la chiave (il nome della materia) e il valore corrispondente (il voto).</p> <ul> <li>Calcolare la media aritmetica dei voti e visualizzarla.</li> <li>Visualizzare la materia con il voto pi\u00f9 alto (la materia preferita).</li> <li>Visualizzare i nomi di tutte le materie insufficienti (ahi ahi ahi...)</li> <li>Dato un nome di materia da parte dell'utente, visualizzare il voto se la materia \u00e8 presente nel dizionario, oppure scrivere \"materia non presente\".</li> </ul> <p>Esercizio 811</p> <p>Definire un dizionario chiamato \"ortofrutta\" inizialmente vuoto. In esso dovranno essere inserite una serie di informazioni,  che rappresentano ognuna un prodotto per un negozio di frutta e verdura, organizzate in questo modo:</p> <ul> <li>la chiave deve essere il nome del prodotto (es: \"pere\", \"patate\", ecc\u2026)</li> <li>il valore sar\u00e0 una tupla di 2 informazioni:<ul> <li>un numero per la quantit\u00e0 presente (in chilogrammi)</li> <li>un numero per il costo al chilo del prodotto</li> </ul> </li> </ul> <p>Inserire tramite codice una serie di almeno 6 prodotti da vendere all'ortofrutta e procedere ad una visualizzazione come indicato:</p> <pre><code>prodotto: NOME\nquantit\u00e0: VALORE kg\ncosto: VALORE euro al chilo\n(riga vuota)\n</code></pre> <p>Chiedere all'utente di inserire un prodotto. Se esso \u00e8 presente nel dizionario, chiedere quanti chili di esso se ne vogliono acquistare.  Se il numero inserito \u00e8 minore o uguale alla quantit\u00e0 presente, diminuire la quantit\u00e0 attuale dei chili venduti e  visualizzare all'utente il costo totale del prodotto acquistato.</p> <p>Esercizio 812</p> <p>Definire un dizionario chiamato \"squadra\" inizialmente vuoto. In esso dovranno essere inserite una serie di informazioni,  che rappresentano ognuna un giocatore della squadra, organizzate in questo modo:</p> <ul> <li>la chiave deve essere il numero di maglia del giocatore</li> <li>il valore sar\u00e0 una tupla di 2 informazioni:<ul> <li>una stringa per il nome del giocatore</li> <li>un carattere per il ruolo ('P per portiere, 'D' per difensore, 'C' per centrocampista, 'A' per attaccante)</li> </ul> </li> </ul> <p>Inserire tramite codice una serie di almeno 6 giocatori nella squadra e procedere ad una visualizzazione come indicato:</p> <pre><code>numero: NUMERO\nnome: NOME\nruolo: RUOLO\n(riga vuota)\n</code></pre> <p>Definire un nuovo dizionario chiamato \"ruoli\" ove vi saranno inseriti 4 elementi:  le chiavi saranno i ruoli \"P\", \"D\", \"C\", \"A\" possibili per i giocatori della squadra, i valori saranno il numero di giocatori  per quel ruolo presenti nel dizionario \"squadra\".</p> <p>Visualizzare il dizionario cos\u00ec completato.</p> <p>Esercizio 813</p> <p>Definire un dizionario chiamato \"rubrica\" inizialmente vuoto. In esso dovranno essere inserite una serie di informazioni,  che rappresentano ognuna un contatto della rubrica, organizzate in questo modo:</p> <ul> <li>la chiave deve essere il nickname del contatto (ad esempio: \"mamma\", \"prof\", etc...)</li> <li>il valore sar\u00e0 una tupla di 3 informazioni:<ul> <li>una stringa per il numero di telefono del contatto</li> <li>una stringa per l'indirizzo di residenza</li> <li>un intero per l'anno di nascita</li> </ul> </li> </ul> <p>Inserire tramite codice una serie di almeno 5 contatti nella rubrica e procedere ad una visualizzazione come indicato:</p> <pre><code>nome: NOME\ntelefono: NUMERO\nindirizzo: INDIRIZZO\nanno di nascita: ANNO\n(riga vuota)\n</code></pre> <p>Riempire una lista con i nickname dei contatti minorenni, visualizzare l'elenco e dire quanti sono in totale. Permettere all'utente di inserire un nick e se presente visualizzare il suo numero di telefono, altrimenti visualizzare la scritta \"CONTATTO NON PRESENTE\".</p> <p>Esercizio 814</p> <p>Definire un dizionario chiamato \"pazienti\" inizialmente vuoto. In esso dovranno essere inserite una serie di informazioni,  che rappresentano ognuna una persona in cura da un dietologo, organizzate in questo modo:</p> <ul> <li>la chiave deve essere il nome della persona</li> <li>il valore sar\u00e0 una tupla di 4 informazioni:<ul> <li>peso (in kg)</li> <li>altezza (in cm)</li> <li>et\u00e0 (in anni)</li> <li>sesso (<code>M' oppure</code>F')</li> </ul> </li> </ul> <p>Inserire tramite codice una serie di almeno 5 persone e procedere ad una visualizzazione come indicato:</p> <pre><code>nome: NOME\npeso: VALORE kg\naltezza: VALORE cm\nmaschio di TOT anni (oppure femmina di... a seconda del valore)\n(riga vuota)\n</code></pre> <ol> <li>Visualizzare i nomi di tutte le femmine.</li> <li>Contare il numero di minorenni pi\u00f9 alti di 180 cm e visualizzare i loro nomi.</li> <li>Visualizzare il nome del maschio e della femmina che pesano di pi\u00f9.</li> </ol>"},{"location":"basics/108_csv/#modulo-csv_1","title":"Modulo CSV","text":"<p>Il modulo <code>csv</code> \u00e8 un modulo della libreria predefinita che serve per trattare i file in formato CSV (Comma Separated Value).</p> <p>Il CSV \u00e8 un formato di testo utilizzato per l'importazione ed esportazione di una tabella di dati da fogli elettronici o da basi di dati. Essere in grado di manipolarlo ci permette dunque di migliorare di molto (ma con poco sforzo) le nostre attuali capacit\u00e0 di programmatori!</p> <p>Per fare un esempio semplice con il formato CSV, immaginate di voler memorizzare la seguente tabella dati:</p> Nome Ruolo Squadra Maradona Centrocampista Napoli Gullit Attaccante Milan Brehme Difensore Inter Falcao Centrocampista Roma <p>Ogni riga della tabella nel formato CSV termina quando si va a capo. Ogni colonna della tabella termina con una virgola. Da cui si ottiene:</p> Esempio 0: il file 'giocatori.csv'<pre><code>Nome,Ruolo,Squadra\nMaradona,Centrocampista,Napoli\nGullit,Attaccante,Milan\nBrehme,Difensore,Inter\nFalcao,Centrocampista,Roma\n</code></pre> <p>Mi sembra molto semplice da capire :)</p> <p>Note</p> <p>Il modulo CSV permette di caricare in maniera automatica i dati estratti  in strutture dati che noi ben conosciamo: i dizionari!</p> <p>Da tutte queste considerazioni insieme capite la necessit\u00e0 di studiare questo modulo. Per caricare i dati da un file csv si pu\u00f2 semplicemente utilizzare la funzione <code>DictReader()</code> del modulo CSV, che carica ogni riga del file (successiva alla prima) in un dizionario, con la prima riga che  diventa la chiave di ogni voce.</p> <p>Facciamo alcuni esempi caricando i dati dal file \"giocatori.csv\" di cui conosciamo gi\u00e0 la struttura.</p> Esempio 1: lettura del file CSV e caricamento dati in una LISTA di DIZIONARI<pre><code>import csv\n\n# la lista su cui caricheremo i dati\ndati = []\n\nfile = open(\"giocatori.csv\", \"r\")\nlettore = csv.DictReader(file)\n\nfor riga in lettore:\n    dati.append(riga)\n\nfile.close()\n\n# da adesso in poi basta lavorare sulla variabile dati\n# ...\n\n# visualizzazione dati\nfor giocatore in dati:\n    print(giocatore)\n</code></pre> <p>L'output di questo codice diventa questo:</p> <pre><code>{'Nome': 'Maradona', 'Ruolo': 'Centrocampista', 'Squadra': 'Napoli'}\n{'Nome': 'Gullit', 'Ruolo': 'Attaccante', 'Squadra': 'Milan'}\n{'Nome': 'Brehme', 'Ruolo': 'Difensore', 'Squadra': 'Inter'}\n{'Nome': 'Falcao', 'Ruolo': 'Centrocampista', 'Squadra': 'Roma'}\n</code></pre> <p>ATTENTI a EXCEL!!!</p> <p>Se create il file CSV con Microsoft Excel questo imporr\u00e0 come separatore il punto e virgola <code>;</code> invece della virgola <code>,</code>.</p> <p>Invece di mettersi a cambiare tutti i file, \u00e8 pi\u00f9 semplice indicare a Python quale \u00e8 il simbolo delimitatore dei campi,  con questa sintassi:</p> <pre><code>file = open(\"giocatori.csv\", \"r\")\nlettore = csv.DictReader(file, delimiter=\";\")\n</code></pre> <p>In maniera analoga \u00e8 possibile scrivere in un file CSV partendo da una serie di dizionari (una... lista di dizionari!!!) utilizzando la funzione <code>DictWriter</code>.</p> Esempio 2: salvataggio su file dei dati presenti in una lista di dizionari<pre><code>import csv\n\ndati = []\ndati.append( {\"nome\":\"Gino\",\"cognome\":\"Panino\",\"professione\":\"imbianchino\"} )\ndati.append( {\"nome\":\"Pino\",\"cognome\":\"Pinguino\", \"professione\":\"spazzacamino\"} )\n\ncampi = [\"nome\",\"cognome\", \"professione\"]\n\n# il parametro newline cos\u00ec impostato assicura che il codice funzioni uguale su Win,Mac,Linux\nfile = open(\"esempio.csv\", \"w\", newline=\"\") \nscrittore = csv.DictWriter(file, campi)\n\n# inserisce l\u2019intestazione nel file\nscrittore.writeheader()\n\nfor riga in dati:\n    scrittore.writerow(riga)\n\nfile.close()\n</code></pre> <p>Questo codice produce un file CSV chiamato \"esempio.csv\" contenente i seguenti dati:</p> <pre><code>nome, cognome, professione\nGino, Panino, imbianchino\nPino, Pinguino, spazzacamino\n</code></pre> <p>Spero sia tutto chiaro!</p> <p>ATTENZIONE!!!</p> <p>Se avete una lista di dizionari con tanti campi e volete creare un file CSV con un numero ristretto (di campi) fate cos\u00ec:</p> <pre><code># ...\n\n# indicate i campi che volete scrivere nel file\ncampi = [\"nome\",\"cognome\"]\n\nfile = open(\"giocatori.csv\", \"w\", newline=\"\") \n# dite a DictWriter di ignorare i campi mancanti\nscrittore = csv.DictWriter(file, campi, extrasaction='ignore')\n\n# ...\n</code></pre> <p>Arrivati qui dovete semplicemente riprovare il codice proposto in questi esempi e poi mettervi alla prova con i seguenti esercizi!</p>"},{"location":"basics/108_csv/#esercizi","title":"Esercizi","text":"<p>Nota</p> <p>Gli esercizi che seguono si basano tutti sui file CSV reperibili su https://www.adjam.org/csv/.</p> <p>Ogni esercizio indica il file da scaricare per poter eseguire l'esercizio correttamente.</p> <p>Esercizio 851</p> <p>Si basa sulla mappa dei cinema italiani.</p> Step 0 Caricare i dati dal file CSV in una opportuna lista dati. Step 1 Visualizzare, per ogni cinema, il \"Nome\" (del cinema) e il \"Comune\", ove esso \u00e8 locato. Step 2 Come lo step precedente, ma limitandosi solo a quelli della regione \"Marche\". La regione si trova nel campo \"Regione\". Step 3 Estrapolare i cinema inseriti dopo il 2015 per la regione \"Lombardia\". Con i suddetti dati creare un nuovo file CSV chiamato \"LombardiaPost2015.csv\" con i dati delle colonne \"Nome\", \"Comune\", \"Provincia\", \"Longitudine\", \"Latitudine\". <p>Esercizio 852</p> <p>Si basa sull'anagrafica delle scuole italiane.</p> Step 0 Caricare i dati dal file CSV in una opportuna lista dati. Step 1 Dato un codice scuola, digitato dall'utente, visualizzare il nome, l'indirizzo, la citt\u00e0, il numero di telefono,  la mail e il sito web della scuola corrispondente. Oppure la scritta \"Codice Scuola non esistente\". Step 2 Contare le tipologie di scuole, dividendo tra scuola dell'infanzia, prima, e secondaria di primo e secondo grado e fra scuola statale e paritaria.  Il risultato dovr\u00e0 essere visualizzato in un formato tipo:<pre><code>Scuola dell'infanzia (statale): 98\nScuola dell'infanzia (paritarie): 34\n...\n</code></pre> Step 3 Inserita una citt\u00e0 da parte dell'utente, visualizzare tutte le scuole (nome e via) divise per tipologia  (es: prima quelle dell'infanzia, poi le scuole primarie, etc...) Step 4 Selezionato un CAP da parte dell'utente, visualizzare i nomi e i codici scuola di tutte le scuole presenti in quel CAP. <p>Esercizio 853</p> <p>Si basa sulla mappa dei monumenti italiani.</p> Step 0 Caricare i dati dal file CSV in una opportuna lista dati. Step 1 Creare una tupla con i nomi delle regioni italiane. Visualizzare i nomi delle regioni e permettere all'utente di selezionarne una.  Visualizzare tutti i nomi dei monumenti di quella regione (tra virgolette) con accanto il nome della citt\u00e0 in cui si trova (separata da virgola) e tra parentesi il \"tipo\" di monumento. Ad esempio, selezionata \"Puglia\", uno dei monumenti potrebbe essere:<pre><code>\"Eraclio\", Barletta (Monumento)\n</code></pre> Step 2 Creare nella home dell'utente il file \"MonumentiPuglia.txt\" (se la regione selezionata \u00e8 la Puglia) con i monumenti elencati uno per riga (ripeto, nella stessa visualizzazione dello step precedente). Step 3 Inserito un anno a scelta a dell'utente visualizzare il numero di monumenti inseriti nel file in quell'anno. Step 4 Per ognuno degli anni dal 2010 al 2019, visualizzare il numero di monumenti inseriti in quell'anno. Step 5 Inserito un ID OpenStreetMap da parte dell'utente, visualizzare tutti i dati relativi al monumento selezionato oppure visualizzare la scritta: \"nessun monumento esistente con ID:\" e visualizzare l'ID inserito. <p>Esercizio 854</p> <p>Si basa sulla mappa delle strutture ricettive marchigiane.</p> Step 0 Caricare i dati dal file CSV in una opportuna lista dati. Step 1 Inserito dall'utente un numero S compreso fra 1 e 5, visualizzare tutte le strutture ricettive classificate come \"Alberghi S stelle\" dove S \u00e8 il numero inserito dall'utente Step 2 Come il precedente ma permettendo all'utente di selezionare anche una provincia (da scegliere in un elenco opportuno). Saranno dunque visualizzate tutte le strutture classificate in un certo modo di quella provincia. Step 3 Visualizzare il numero totale di strutture ricettive per provincia. Step 4 Selezionata una provincia, visualizzare i nomi di tutte le citt\u00e0 della provincia che presentano strutture ricettive. <p> </p>"},{"location":"insights/00_intro/","title":"Il capitolo degli approfondimenti","text":"<p>Gli Insights sono un capitolo dedicato a degli approfondimenti che ho voluto inserire nel mio materiale.</p> <p>Pi\u00f9 che un capitolo, qui troverete una raccolta di argomenti inseriti in ordine sparso e tipicamente scollegati fra di loro.  Che si trovano qui significa almeno una volta ognuno di questi argomenti ha suscitato il mio o il vostro interesse ad una delle nostre lezioni.  E quindi io ho cercato di documentarmi al meglio e di scriverne in maniera accessibile agli studenti.</p> <p>Almeno questo \u00e8 quello che ho cercato di fare.</p> <p>L'obiettivo di queste pagine \u00e8 quella di farvi perdere un pomeriggio, di farvi spendere tempo (e soldi) dietro alla programmazione, di... farvi venire fame.</p> <p>Chiss\u00e0...</p>"},{"location":"insights/02_venv/","title":"Gli ambienti virtuali","text":"<p>Un ambiente virtuale \u00e8 uno spazio indipendente dal resto del sistema in cui \u00e8 possibile lavorare e fare test con python e pip con la certezza di non andare a sporcare o rovinare il proprio ambiente fisico, ovvero l'installazione originale di Python nel nostro sistema!</p> <p>La loro grande popolarit\u00e0 \u00e8 dovuta sostanzialmente ai seguenti fatti:</p> <ul> <li>\u00e8 possibile creare molti ambienti virtuali contemporaneamente e     quindi lavorare su progetti anche potenzialmente in conflitto tra     loro senza farli \"scontrare\" minimamente;</li> <li>\u00e8 possibile installare moduli nuovi con pip senza i privileggi di     amministratore, cosa che rende possibile sviluppare su qualunque     dispositivo connesso alla rete;</li> <li>\u00e8 possibile installare su ambienti virtuali diverse versioni diverse     dello stesso modulo o dello stesso software (basato su Python) per     motivi di test e/o di sviluppo;</li> <li>\u00e8 possibile entrare e uscire velocemente da un ambiente virtuale     \"entrando\" nell'ambiente di sviluppo e \"ritornando\" al sistema     immacolato dell'utente</li> </ul> <p>Fisicamente, un ambiente virtuale non \u00e8 altro che una cartella selezionata da noi in cui il modulo venv (Virtual ENVironment, ricordate?) creer\u00e0 una copia dei programmi \"python\" e \"pip\" e una copia di tutte le librerie loro necessarie, cos\u00ec come della cartella \"site-packages\" dove verranno installati i moduli eventualmente aggiunti con pip.</p> <p>L'attivazione dell'ambiente virtuale fa in modo che l'utente l\u00ec dentro possa usare solo \"le copie\" di python e pip, cos\u00ec come solo i moduli locali installati nella cartella \"virtuale\", cos\u00ec come i moduli della libreria standard python: infatti i moduli della libreria standard sono installati direttamente nelle cartelle \"base\" di python e sono sempre disponibili per la versione a cui si riferiscono.</p> <p>Facciamo una prova per capire il (semplice) funzionamento di un ambiente virtuale</p>"},{"location":"insights/02_venv/#gestire-un-ambiente-virtuale","title":"Gestire un ambiente virtuale","text":"<p>Un ambiente virtuale si crea con il modulo venv che fa parte della libreria standard di Python 3, dalla versione 3.4 in avanti. La scelta di includere questo modulo nella libreria standard sottolinea due fatti:</p> <ol> <li> <p>Creare ambienti virtuali \u00e8 un'operazione \"standard\" per chi lavora     in Python, incoraggiata da tutta la comunit\u00e0 tanto da includere il     modulo che li gestisce nella libreria standard</p> </li> <li> <p>il modulo venv \u00e8 la modalit\u00e0 prescelta dai progettisti python per la     creazione di ambienti virtuali. In rete si trovano varie altre     modalit\u00e0 per crearli e utilizzarli, ma il modulo venv \u00e8 la modalit\u00e0     da considerare maggiormente.</p> </li> </ol> <p>Creiamo nel nostro sistema una cartella da destinare al nostro primo ambiente virtuale; chiamiamola per esempio \"TestAmbientiVirtuali\" e procediamo alla creazione dello stesso</p> <p>Per creare l'ambiente virtuale</p> <pre><code>$ python -m venv Percorso/Fino/Alla/Cartella/TestAmbientiVirtuali\n</code></pre> <p>Dopo un paio di secondi, l'ambiente virtuale \u00e8 pronto!</p> <p>Con l'operazione precedente abbiamo creato un ambiente virtuale che si chiama \"TestAmbientiVirtuali\" (come la cartella). All'interno della stessa il modulo venv avr\u00e0 creato tutte le copie dell'eseguibile python, di pip e della cartella (vuota) \"site-packages\" dove verranno installati i moduli scaricati con il pip virtuale</p> <p>Per attivare e disattivare l'ambiente virtuale, all'interno della cartella \"TestAmbientiVirtuali\" venv ha creato gli script \"activate\" e \"deactivate\". Su Windows si trovano dentro la cartella \"Scripts\", su Mac e Linux si trovano dentro la cartella \"bin\".</p> <p>Per attivare l'ambiente virtuale</p> <p>Su Windows</p> <pre><code>&gt; cd Percorso/Fino/Alla/Cartella/TestAmbientiVirtuali\n&gt; Scripts/activate.bat\n</code></pre> <p>Su Mac o Linux</p> <pre><code>$ cd Percorso/Fino/Alla/Cartella/TestAmbientiVirtuali\n$ source bin/activate\n</code></pre> <p>Ovviamente, in maniera analoga alle istruzioni per l'attivazione, lo script \"deactivate\" disattiva l'ambiente virtuale creato.</p> <p>Se prima e dopo controllate i moduli installati con pip (oppure utilizzate un altro prompt dei comandi) potete apprezzare la differenza tra l'ambiente fisico e quello virtuale.</p> <p>Ecco una schermata del mio computer.</p> <p></p> <p>Tutto qui!</p> <p>Basta provare un paio di volte.</p>"},{"location":"insights/02_venv/#lavorare-con-un-ambiente-virtuale","title":"Lavorare con un ambiente virtuale","text":"<p>Ok, siamo in grado di creare e attivare un ambiente virtuale. E adesso? Cosa ci facciamo? Gli ambienti virtuali sono un grandissimo aiuto quando si vuole sviluppare un'applicazione che si basa su moduli specifici non solitamente installati sul sistema. Proviamo con un esempio.</p> <p>Lo sviluppatore 1 crea un ambiente virtuale</p> <p>Lo sviluppatore 1 vuole implementare nell'ambiente virtuale \"TestAmbientiVirtuali\" appena creato un progetto per calcolare la distanza fra le stelle conosciute e capire quali universi potrebbero essere visitati dall'uomo, etc...</p> <p>Il progetto sar\u00e0 basato su skyfield e astropy, che sono due moduli python utilizzati per i calcoli astronomici. All'interno del suo ambiente virtuale installa i moduli a lui necessari:</p> <pre><code>(TestAmbientiVirtuali) $ pip install skyfield astropy\n</code></pre> <p>A questo punto, si crea una cartella che chiamer\u00e0 \"StarsTrips\" e utilizzer\u00e0 i due moduli citati per scrivere il codice necessario per il suo obiettivo.</p> <pre><code>(TestAmbientiVirtuali) $ cd StarsTrips\n\n... ore di coding, parolacce, merende varie ...\n</code></pre> <p>Terminato il suo lavoro, nella cartella StarsTrips ci sar\u00e0 la sua fantastica applicazione: per permettere a chiunque di eseguire direttamente il suo codice gli manca solo di indicare quali moduli ha utilizzato per lo sviluppo cos\u00ec che chiunque possa installarli e aiutarlo nella sua impresa. Per fare ci\u00f2 basta fare, dentro la cartella StarsTrips:</p> <p>Elenca i moduli installati nell'ambiente virtuale scrivendoli nel file \"requirements.txt\"</p> <pre><code>(TestAmbientiVirtuali) $ pip freeze &gt; requirements.txt\n</code></pre> <p>Questo comando crea un file chiamato \"requirements.txt\" che elenca tutti i moduli installati nel nostro ambiente virtuale. Fatto questo, lo sviluppatore 1 pu\u00f2 condividere con chiunque il proprio lavoro, presente nella cartella StarsTrips e cancellare eventualmente l'ambiente virtuale, semplicemente eliminando la cartella \"TestAmbienteVirtuale\".</p> <p>Lo sviluppatore 2 vuole provare il programma dello sviluppatore 1</p> <p>Lo sviluppatore 2, che vuole testare il lavoro del suo amico/collega, prende la cartella StarsTrips, crea un ambiente virtuale, lo attiva e l\u00ec esegue il comando:</p> <pre><code>(NuovoAmbienteVirtuale) $ pip install --r requirements.txt\n</code></pre> <p>Questo comando installa tutti i moduli python elencati nel file <code>requirements.txt</code>. A questo punto lo sviluppatore 2 \u00e8 pronto per testare il lavoro importato.</p> <p> </p>"},{"location":"insights/11_turtle/","title":"Turtle Crash Course","text":"<p>Il modulo della tartaruga :) E' un modulo didattico predefinito in Python (non occorre installarlo, \u00e8 gi\u00e0 presente). Tramite codice si muove una tartaruga (o pi\u00f9, o qualche forma che gli assomiglia) e si realizza qualche disegno pi\u00f9 o meno complicato imparando a programmare in maniera naturale.</p> <p>Questo che trovate sotto \u00e8 un Crash Course: non ci sono spiegazioni, ma informazioni buttate l\u00e0 e qualche obiettivo da raggiungere...</p> <p>Buon divertimento!!!</p>"},{"location":"insights/11_turtle/#fare-cose-con-turtle","title":"Fare cose con turtle","text":"<p>Cominciamo dal programma assolutamente minimo, che per\u00f2 in realt\u00e0 contiene gi\u00e0 parecchie cosine su cui riflettere!</p> Programma di base<pre><code># qui importi la libreria turtle e tutte le sue cose\nfrom turtle import *\n\n# s \u00e8 una variabile che rappresenta lo sfondo dove la tartaruga si muover\u00e0\ns = Screen()\n\n# il titolo della finestra (guarda in alto)\ns.title(\"Prima Prova\")\n\n# imposta la dimensione (in pixel) della finestra: width x height\ns.setup(800,600)\n\n# il colore di sfondo!\n# Puoi anche indicarlo con la notazione esadecimale RGB: \"#00FF00\"\ns.bgcolor(\"green\")\n\n# t \u00e8 una variabile che rappresenta la tartaruga sullo schermo\nt = Turtle()\n\n# la forma della tartaruga. Pu\u00f2 essere:\n# \"arrow\" , \"turtle\" , \"circle\" , \"square\" , \"triangle\" , \"classic\"\nt.shape(\"turtle\")\n\n# la dimensione della tartaruga. Il valore di base \u00e8 1. Se metti 2 significa il doppio...\nt.shapesize(1.5)\n\n# ... qui fai cose...\n\n# quando clicchi sulla pagina il programma si chiude\ns.exitonclick()\n</code></pre> <p>Leggi i commenti! Prova a modificare il colore di sfondo. Prova a modificare la forma e la dimensione della tartaruga. Prova a cliccare sulla pagina. Prova a cambiare il titolo. </p> <p>Hai capito, dai... passiamo avanti!!!</p> <p>Nota</p> <p>Hai visto il commento \"qui fai cose\" nel codice sopra?</p> <p>Da ora in poi inserir\u00f2 semplici parti di codice che andranno inserite in quel punto per ogni programma. In questo modo potr\u00f2 mettere in evidenza meglio il codice importante senza ripetere ogni volta le parti di base</p>"},{"location":"insights/11_turtle/#disegnare-con-turtle","title":"Disegnare con Turtle","text":"<p>La tartaruga (o qualunque forma scegliate) pu\u00f2 disegnare sullo schermo tramite una penna. In base alla direzione in cui essa \u00e8 posizionata, quando le dici di camminare, se ha la penna abbassata scrive!</p> <p>Le funzioni che supporta la tartaruga (nei nostri esempi, l'oggetto t), sono:</p> <p></p> <ul> <li><code>t.forward( ppp )</code>: muove la tartaruga di <code>ppp</code> pixel in avanti (dritto al suo muso)</li> <li> <p><code>t.backward( ppp )</code>: muove la tartaruga di <code>ppp</code> pixel all'indietro</p> </li> <li> <p><code>t.left( ggg )</code>: gira la tartaruga di <code>ggg</code> gradi verso sx (in senso antiorario)</p> </li> <li><code>t.right( ggg )</code>: gira la tartaruga di <code>ggg</code> gradi verso dx (in senso orario)</li> <li> <p><code>t.setheading( dir )</code>: orienta la tartaruga verso <code>dir</code>: </p> <ul> <li><code>0</code> --&gt; destra , <code>90</code> --&gt; alto , <code>180</code> --&gt; sinistra , <code>270</code> --&gt; basso</li> </ul> </li> </ul> <p></p> <p>Vediamo l'utilizzo di alcune di queste per disegnare 2 quadrati col bordo colorato.</p> Quadrati Colorati<pre><code># colore e dimensione della penna\nt.pencolor(\"blue\")\nt.pensize(5) # in pixel\n\n# disegno un quadrato blue di 100 pixel di lato\nfor n in range(4):\n    t.forward(100)\n    t.right(90)\n\n# alzo la penna, cos\u00ec mi sposto senza scrivere\nt.penup()\n\n# mi muovo di 200 pixel, riabbasso la penna\nt.forward(200)\nt.pendown()\n\n# disegno un quadrato rosso...\nt.pencolor(\"red\")\nfor n in range(4):\n    t.forward(100)\n    t.right(90)\n</code></pre>"},{"location":"insights/11_turtle/#riempire-le-forme","title":"Riempire le forme","text":"<p>Quando disegni una forma chiusa \u00e8 possibile colorare il suo interno con un colore a scelto, anche diverso da  quello del bordo (cio\u00e8 della penna)!</p> <p>Le funzioni in gioco sono le seguenti:</p> <p></p> <ul> <li><code>t.fillcolor( \"color\" )</code>: imposta a <code>color</code> il colore di riempimento di una forma chiusa </li> <li><code>t.begin_fill()</code>: inizia a riempire una forma</li> <li><code>t.end_fill()</code>: smette di riempire una forma</li> </ul> <p></p> <p>La logica da applicare \u00e8 molto semplice:</p> <ol> <li>Imposti il colore scelto con <code>fillcolor</code></li> <li>lanci la funzione <code>begin_fill</code></li> <li>disegni una forma chiusa </li> <li>lanci la funzione <code>end_fill</code></li> </ol> <p>Al termine vedrai una forma chiusa colorata. Guardiamo un esempio di codice che \u00e8 sempre pi\u00f9 facile!</p> Triangoli!!!<pre><code>t.pencolor(\"blue\")\nt.pensize(2) # in pixel\n\nt.fillcolor(\"yellow\")\n\n# disegno un triangolo blue, riempito di giallo\nt.begin_fill()\nfor n in range(3):\n    t.forward(100)\n    t.left(120)\nt.end_fill()\n\n# alzo la penna, mi giro a dx, avanzo ....\nt.penup()\nt.setheading(0) # 0 = dx...\nt.forward(200)\nt.pendown()\n\n# disegno un triangolo blue, riempito di giallo\nt.begin_fill()\nfor n in range(3):\n    t.forward(100)\n    t.left(120)\nt.end_fill()\n</code></pre>"},{"location":"insights/11_turtle/#cose-con-la-tartaruga","title":"Cose con la tartaruga","text":"<p>Mostra, nascondi, stampa la tartaruga!</p> <ul> <li><code>t.showturtle()</code>: mostra la tartaruga</li> <li><code>t.hideturtle()</code>: nasconde la tartaruga</li> <li><code>t.stamp()</code>: stampa una copia della tartaruga (o della <code>forma</code>) nel punto ove essa si trova.</li> </ul> <p>Disegna cerchi, punti, parole</p> <ul> <li><code>t.circle ( ppp )</code>: disegna un cerchio di diametro <code>ppp</code> pixel</li> <li><code>t.dot ( ppp ,\"color\" )</code>: disegna un punto (un cerchio pieno) di diametro <code>ppp</code> pixel e colore <code>color</code> </li> <li><code>t.write ( \"words\" )</code>: scrive le parole indicate nella posizione corrente</li> </ul> <p>Muovi, velocizza, riporta a casa (al centro)</p> <ul> <li><code>t.speed( vvv )</code>: imposta la velocit\u00e0 della tartaruga</li> <li><code>t.goto( x , y )</code>: porta la tartaruga al punto <code>(x,y)</code></li> <li><code>t.home()</code>: porta la tartaruga a casa (al centro)</li> </ul>"},{"location":"insights/11_turtle/#disegni-con-turtle","title":"Disegni con Turtle","text":"<p>Ok... ormai avete capito tutto di Turtle... vi inserisco alcuni esercizi disegni che ho fatto io... Provate a farli uguale o a rifarli meglio!!!</p> <p> </p> <p> </p>"},{"location":"insights/12_pygame1/","title":"PyGame","text":"<p><code>pygame</code> \u00e8 un modulo Python, disponibile su <code>PyPi</code> che implementa la libreria SDL.</p> <p>Questa fornisce accesso cross-platform alle componenti hardware multimediali, come suono, video, mouse, tastiera, joystick, etc...</p> <p>Per installare la libreria <code>pygame</code> su Thonny, cercate dal sistema di gestione dei pacchetti il nome corrispondente e cliccate (incredibilmente) INSTALLA!!!</p> <p>PyGame: sito e documentazione ufficiale</p> <p>Attualmente non ve ne frega nulla, me ne rendo conto. Ma lasciatemi scrivere qui un paio di info utili!</p> <p>Il sito ufficiale della libreria PyGame \u00e8 https://www.pygame.org/</p> <p>Il sito della documentazione ufficiale \u00e8 https://www.pygame.org/docs/</p>"},{"location":"insights/12_pygame1/#fare-cose-con-pygame","title":"Fare cose con PyGame","text":"<p>Cominciamo dal programma assolutamente minimo, che per\u00f2 in realt\u00e0 contiene gi\u00e0 parecchie cosine su cui riflettere!</p> Primo programma<pre><code># importa ed inizializza la libreria pygame\nimport pygame\n\npygame.init()\n\n# lo screen (con titolo)\nscreen = pygame.display.set_mode( (800, 600) )\npygame.display.set_caption(\"Il mio primo gioco con PyGame!\")\n\n# facile...\nrunning = True\n\nwhile running:\n    # serve a gestire la X di chiusura in alto\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # colora lo schermo di verde\n    screen.fill(\"green\")\n\n    # aggiorna il contenuto dello schermo\n    pygame.display.flip()\n\n# Chiude pygame\npygame.quit()\n</code></pre> <p>Questo codice crea un rettangolo verde, di grandezza 800x600 pixel, con titolo \"Il mio primo gioco con PyGame!\".</p> <p>Quando clicchi sulla X rossa in alto, il gioco si chiude tranquillamente. Per verificare che sia cos\u00ec, potreste aggiungere una print in fondo. Oppure provare a modificare colore e dimensione della finestra principale!</p> <p>Vediamo pezzo per pezzo cosa abbiamo scritto:</p> <ul> <li> <p><code>import pygame</code>... ormai dovremmo aver capito. Importa la libreria pygame</p> </li> <li> <p><code>pygame.init()</code>. Inizializza la libreria pygame. Permette il funzionamento di tutto il resto</p> </li> <li> <p><code>screen ...</code> \u00e8 una variabile che contiene una <code>PyGame Surface</code>, una superficie (un... rettangolo) gestito da PyGame per fare le cose. Questo in particolare, sar\u00e0 il nostro schermo.</p> </li> <li> <p><code>screen.fill(\"color\")</code>: prende come parametro una stringa o una tupla RGB. Colora lo sfondo della surface.</p> </li> <li> <p><code>pygame.display.flip()</code>: aggiorna il contenuto dello schermo. Senza questa funzione ripetuta nel loop non funziona nulla!!!</p> </li> </ul> <p>Per adesso basta cos\u00ec con le spiegazioni.... proviamo ad andare avanti con il codice!!!</p>"},{"location":"insights/12_pygame1/#uscire-con-il-tasto-esc","title":"Uscire con il tasto ESC","text":"<p>Una cosa che a me piace molto \u00e8 quella di dare la possibilit\u00e0 di uscire semplicemente premendo il tasto <code>ESC</code>:  questa funzionalit\u00e0 si pu\u00f2 ottenere aggiungendo il seguente codice!</p> Uscire con il tasto ESC<pre><code>import pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode( (800, 600) )\npygame.display.set_caption(\"Il mio primo gioco con PyGame!\")\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        # Se l'evento \u00e8 la pressione di un tasto...\n        # ... e il tasto \u00e8 il tasto ESC.. esc(i)!\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_ESCAPE:\n                running = False\n\n    screen.fill(\"green\")\n    pygame.display.flip()\n\npygame.quit()\n</code></pre> <p>Ragionate su come modificare il codice per fare qualunque cosa alla pressione di un tasto qualsiasi!</p> <p>suggerimento</p> <p>Potrebbe essere carino impostare l'uscita dal gioco con il tasto Q (QUIT), oppure con un tasto a propria scelta! </p> <p>L'elenco completo dei codici relativi ai tasti si trova qui: pygame keys</p>"},{"location":"insights/12_pygame1/#aggiungere-scritte","title":"Aggiungere scritte","text":"<p>In questa parte del tutorial, vedremo come \u00e8 possibile aggiungere una scritta (o pi\u00f9 di una) su pygame.</p> <p>Si tratta semplicemente di selezionare un oggetto font (Ad esempio \"Times\", 12) e utilizzarlo per fare il render (cio\u00e8 il disegno) della scritta che ci interessa.  Il risultato sar\u00e0 un <code>rettangolo</code> di una certa dimensione e colore, che andr\u00e0 disegnato (con <code>blit</code>) su un qualche punto dello schermo.</p> Aggiungere scritte<pre><code>import pygame\n\npygame.init()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))\npygame.display.set_caption(\"Aggiungere scritte\") \n\n# Definizione dei font: Quello \"grosso\" e quello \"giusto\"\nTitlefont = pygame.font.SysFont('Impact', 70)\nNormalfont = pygame.font.SysFont('Impact', 30)\n\n# oggetto_testo = oggetto_font.render(stringa, True, colore, sfondo (opzionale) )\ngame_end = Titlefont.render(\"Hai Perso!\", True, \"red\")\nclose_tip = Normalfont.render(\"Click ESC to exit\", True, \"blue\",\"yellow\")\n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n\n    screen.fill(\"white\") \n    screen.blit(game_end, (100,100))\n    screen.blit(close_tip, (100,300))\n    pygame.display.flip()\n\npygame.quit()\n</code></pre>"},{"location":"insights/12_pygame1/#aggiungere-pulsanti","title":"Aggiungere pulsanti","text":"<p>\u00c8 possibile creare pulsanti semplicemente modificando il comportamento delle scritte in due modi:</p> <ol> <li>reagendo (ad esempio, cambiando colore) quando ci passi sopra con il mouse</li> <li>eseguendo una qualche operazione quando viene fatto click sopra di esse</li> </ol> <p>Il codice sotto fa esattamente questo!</p> <ul> <li> <p>Crea una scritta bianca su sfondo rosso disegnata in un opportuno rettangolo inserita in qualche punto sullo schermo.</p> </li> <li> <p>Modifica il colore di sfondo del rettangolo che rappresenta il pulsante quando il mouse ci passa sopra (nell'esempio ho scelto il blu)</p> </li> <li> <p>Reagisce quando si clicca nell'area del pulsante eseguendo una qualche porzione di codice (in questo caso, semplicemente facendo ESCI!)</p> </li> </ul> Aggiungere Pulsanti<pre><code>import pygame\n\npygame.init()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n\nfont = pygame.font.SysFont('Arial',30) \ntextRect = font.render('Esci' , True , \"white\") \nbuttonRect = pygame.Rect(SCREEN_WIDTH // 2, SCREEN_HEIGHT //2, 140, 40)\n\nrunning = True\n\nwhile running:\n\n    # posizione del mouse\n    mPos = pygame.mouse.get_pos() \n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n        # quando clicchi SOPRA il pulsante... FAI QUALCOSA!!!\n        if event.type == pygame.MOUSEBUTTONDOWN: \n            if buttonRect.collidepoint(mPos):\n                running = False\n\n    screen.fill(\"yellow\")\n\n    # ANIMAZIONE DEL PULSANTE (cambia colore quando ci passi sopra)\n    buttonColor = \"red\"\n    if buttonRect.collidepoint(mPos):\n        buttonColor = \"blue\"\n    button = pygame.draw.rect(screen,buttonColor,buttonRect) \n\n    screen.blit(textRect , (SCREEN_WIDTH //2 + 50, SCREEN_HEIGHT// 2) )\n\n    pygame.display.flip()\n\n\npygame.quit()\n</code></pre>"},{"location":"insights/12_pygame1/#aggiungere-forme-geometriche","title":"Aggiungere forme geometriche","text":"<p>L'esempio di questo pezzo di codice ha un puro scopo didattico, cio\u00e8 quello di mostrare come si creano e posizionano alcune figure geometriche su pygame.</p> <p>Se pensate ad un gioco e avete bisogno di una figura geometrica particolare... adesso non potete fingere di non sapere come si fa!!!!</p> Aggiungere forme geometriche<pre><code>import pygame\n\npygame.init()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Aggiungere forme geometriche\") \n\nrunning = True\n\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n\n    screen.fill(\"white\")\n\n    # cerchio ROSSO di raggio 80 al centro dello screen\n    # c \u00e8 il \"rettangolo\" che contiene il cerchio disegnato\n    c = pygame.draw.circle(screen, \"red\", (SCREEN_WIDTH//2, SCREEN_HEIGHT//2), 80)\n\n    # rettangolo BLUE che va dal punto (600,400) lungo 180, largo 100\n    # r \u00e8 il rettangolo che contiene il rettangolo disegnato\n    r = pygame.draw.rect(screen, \"blue\", (600, 400, 180, 100))\n\n    # linea VERDE dal punto... al punto ... di spessore ...\n    # l \u00e8 il \"rettangolo\" che contiene la linea disegnata \n    l = pygame.draw.line(screen, \"green\", (600, 100), (700, 300), 8)\n\n    # ellisse VIOLA contenuto nel rettangolo che parte da (100,400) lungo 60, largo 90. Di spessore...\n    # el \u00e8 il rettangolo che contiene l'ellisse disegnata\n    el = pygame.draw.ellipse(screen, \"purple\" , (100, 400, 60, 90), 8)\n\n    # poligono GIALLO (riempito) che collega i punti...\n    # pol \u00e8 il rettangolo che contiene il poligono disegnato\n    pol = pygame.draw.polygon(screen, \"yellow\",((146, 0), (291, 106),(236, 277), (56, 277), (0, 106)))\n\n    pygame.display.flip()\n\npygame.quit()\n</code></pre>"},{"location":"insights/12_pygame1/#muovere-un-rettangolo","title":"Muovere un rettangolo","text":"<p>In questa parte del tutorial iniziamo davvero a fare le cose sul serio!!!</p> <p>In questo pezzo di codice vediamo come si muove un rettangolo dentro allo schermo comandandolo con le frecce!</p> <p>Il mio rettangolo parte dal centro (guarda la posizione iniziale) ed ha un movimento di coda in quanto gira il retro  quando si curva in una direzione (guarda come inverto le dimensioni w,h).</p> <p>Alla fine ogni volta si ripittura lo schermo di nero e si disegna il rettangolino nella posizione ove dovrebbe trovarsi.</p> Muovere un rettangolo<pre><code>import pygame   \n\npygame.init()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) \npygame.display.set_caption(\"Rettangolo che si muove\") \n\n# posizione iniziale\nx = SCREEN_WIDTH // 2\ny = SCREEN_HEIGHT // 2\n\n# dimensioni rettangolo\nw = 40\nh = 20\n\n# velocit\u00e0 di spostamento\nspeed = 8\n\nrunning = True\n\nwhile running: \n    pygame.time.delay(10) \n\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_LEFT] and x &gt; 0: \n        w,h = 40,20\n        x -= speed \n    if keys[pygame.K_RIGHT] and x &lt; SCREEN_WIDTH - w: \n        w,h = 40,20\n        x += speed \n    if keys[pygame.K_UP] and y &gt; 0: \n        w,h = 20,40\n        y -= speed \n    if keys[pygame.K_DOWN] and y &lt; SCREEN_HEIGHT - h: \n        w,h = 20,40\n        y += speed \n\n    screen.fill(\"black\")\n    player = pygame.draw.rect(screen, \"red\", (x, y, w, h)) \n    pygame.display.flip()  \n\npygame.quit()\n</code></pre> <p>Se per voi \u00e8 tutto chiaro quello che succede qui sopra, vi sfido ad aggiungere una funzionalit\u00e0: il controllo della velocit\u00e0! Con un tasto (a vostra scelta) si accelera, con un altro si rallenta!</p> <p>Buon divertimento!!!</p>"},{"location":"insights/12_pygame1/#nemici-e-collisioni","title":"Nemici e Collisioni","text":"<p>Adesso \u00e8 il momento di aggiungere dei nemici... o meglio... degli ostacoli! Questi appariranno ogni tanto in posti pi\u00f9 o meno casuali  e noi andremo a controllare le (eventuali) collisioni fra il giocatore e questi!</p> <p>Per far funzionare una cosa del genere dobbiamo organizzare un p\u00f2 di cose:</p> <ol> <li> <p>un evento che capiti ogni TOT ms che ci permetta, quando si scatena, di fare qualcosa (ad esempio: aggiungere un nemico)</p> </li> <li> <p>una lista che ci ricordi l'elenco (soprattutto... la posizione) di tutti i nemici presenti sul campo di gioco</p> </li> <li> <p>per ogni elemento nemico, il controllo della eventuale collisione con il giocatore</p> </li> </ol> <p>Osservate bene il codice qui sotto!</p> Nemici e Collisioni<pre><code>import pygame   \nimport random\n\npygame.init()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) \npygame.display.set_caption(\"Rettangolo che si muove con nemici a caso\") \n\n# crea un nuovo (tipo di) evento (da gestire nel for degli eventi sotto)\n# che verr\u00e0 scatenato ogni TOT ms\nADD_ENEMY = pygame.USEREVENT + 1\npygame.time.set_timer(ADD_ENEMY, 1000)\n\n# l'elenco dei nemici\nenemies = []\n\n# info utili per il rettangolo giocatore:\n# (x,y) la posizione, (w,h) la dimensione, speed... indovina!!!!!\nx = SCREEN_WIDTH // 2\ny = SCREEN_HEIGHT // 2\nw = 40\nh = 20\nspeed = 8\n\nrunning = True\n\nwhile running: \n    pygame.time.delay(10) \n\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n        if event.type == ADD_ENEMY:\n            posx = random.randint(0,SCREEN_WIDTH - 20)\n            posy = random.randint(0,SCREEN_HEIGHT - 20)\n            enemies.append( (posx,posy) )\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_LEFT] and x &gt; 0: \n        w,h = 40,20\n        x -= speed \n    if keys[pygame.K_RIGHT] and x &lt; SCREEN_WIDTH - w: \n        w,h = 40,20\n        x += speed \n    if keys[pygame.K_UP] and y &gt; 0: \n        w,h = 20,40\n        y -= speed \n    if keys[pygame.K_DOWN] and y &lt; SCREEN_HEIGHT - h: \n        w,h = 20,40\n        y += speed \n\n    screen.fill(\"black\") \n    player = pygame.draw.rect(screen, \"red\", (x, y, w, h)) \n\n    # in questo caso i nemici sono fermi: sono ostacoli\n    for posx,posy in enemies:\n        # en \u00e8 il rettangolo disegnato \n        en = pygame.draw.rect(screen, \"white\", (posx, posy, 20, 20)) \n\n        # se questo rettangolo \"collide\" con il punto (x,y) ove si trova il giocatore...\n        if player.colliderect(en):\n            print(\"HAI PERSO!\")\n            running = False\n\n    pygame.display.flip()  \n\npygame.quit() \n</code></pre> <p>Collisioni!!</p> <p>Puoi controllare se un punto attraversa un'area, se due rettangoli si sovrappongono, se un punto passa dentro un rettangolo... praticamente ogni tipo di incrocio fra oggetti!!!</p> <p>la documentazione per ognuno di questi la trovi qui: Documentazione pygame.Rect</p>"},{"location":"insights/12_pygame1/#lavorare-con-le-immagini","title":"Lavorare con le Immagini","text":"<p>Questo pezzetto di codice presuppone che abbiate nella stessa cartella due immagini:</p> <ul> <li>pere.jpg, lo sfondo con le pere</li> <li>mosca.png, la mosca con bordo trasparente</li> </ul> lavorare con le immagini<pre><code>import pygame\n\npygame.init()   \n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) \npygame.display.set_caption(\"Lavorare con le Immagini\") \n\nimgSfondo = pygame.image.load(\"pere.jpg\") \nimgSfondo = pygame.transform.scale(imgSfondo,(SCREEN_WIDTH,SCREEN_HEIGHT))\n\nimgMosca = pygame.image.load(\"mosca.png\") \nimgMosca = pygame.transform.scale(imgMosca,(30,30))\n\nx = SCREEN_WIDTH // 2\ny = SCREEN_HEIGHT // 2\n\nwidth = 30\nheight = 30\n\nspeed = 8\n\nrunning = True\n\nwhile running:  \n\n    pygame.time.delay(10)\n\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_LEFT] and x &gt; 0: \n        x -= speed \n    if keys[pygame.K_RIGHT] and x &lt; SCREEN_WIDTH - width: \n        x += speed \n    if keys[pygame.K_UP] and y &gt; 0: \n        y -= speed \n    if keys[pygame.K_DOWN] and y &lt; SCREEN_HEIGHT - height: \n        y += speed\n\n    # invece di screen.fill(\"white\")\n    screen.blit(imgSfondo,(0,0) )\n\n    # invece di pygame.draw.rect(screen, \"red\", (x, y, width, height)) \n    screen.blit(imgMosca,(x,y))\n\n    pygame.display.flip() \n\n# \npygame.quit()\n</code></pre> <p>Modificare le immagini</p> <p>Sarebbe fighissimo se la mosca si girasse nella direzione opportuna di volo!!! Per farlo non serve modificare l'immagine (il file \"mosca.png\")  ma solo l'oggetto immagine (imgMosca).</p> <p>Per sapere come, controlla tutta la documentazione qui: Documentazione pygame.transform</p>"},{"location":"insights/12_pygame1/#aggiungere-suoni","title":"Aggiungere suoni","text":"<p>Per far vedere come fermare e far ripartire una musichetta ho implementato anche la pausa :)</p> Aggiungere suoni<pre><code>import pygame\n\npygame.init()   \n\npygame.mixer.init() \npygame.mixer.music.load(\"zanzara.mp3\") \npygame.mixer.music.set_volume(0.5) \npygame.mixer.music.play()\n\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) \npygame.display.set_caption(\"Lavorare con le Immagini e i suoni\") \n\nimgSfondo = pygame.image.load(\"pere.jpg\") \nimgSfondo = pygame.transform.scale(imgSfondo,(SCREEN_WIDTH,SCREEN_HEIGHT))\nimgMosca = pygame.image.load(\"mosca.png\") \nimgMosca = pygame.transform.scale(imgMosca,(30,30))\n\nx = SCREEN_WIDTH // 2\ny = SCREEN_HEIGHT // 2\n\nwidth = 30\nheight = 30\n\nspeed = 8\n\nrunning = True\npaused = False\n\nwhile running:  \n\n    pygame.time.delay(10)\n\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            running = False\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            running = False\n        # PREMI \"P\" per mettere in pausa (o uscire dalla pausa)\n        if event.type == pygame.KEYDOWN and event.key == pygame.K_p:\n            if paused:\n                paused = False\n                pygame.mixer.music.play()\n            else:\n                paused = True\n                pygame.mixer.music.pause()\n\n    if paused:\n        continue\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_LEFT] and x &gt; 0: \n        x -= speed \n    if keys[pygame.K_RIGHT] and x &lt; SCREEN_WIDTH - width: \n        x += speed \n    if keys[pygame.K_UP] and y &gt; 0: \n        y -= speed \n    if keys[pygame.K_DOWN] and y &lt; SCREEN_HEIGHT - height: \n        y += speed\n\n    # invece di screen.fill(\"white\")\n    screen.blit(imgSfondo,(0,0) )\n\n    # invece di pygame.draw.rect(screen, \"red\", (x, y, width, height)) \n    screen.blit(imgMosca,(x,y))\n\n    pygame.display.flip() \n\n# \npygame.quit()\n</code></pre> <p> </p>"},{"location":"insights/21_opencv/","title":"OpenCV","text":"<p>Il modulo Apri Curriculum Vitae :)</p> <p>Partirei da questo sito su GitHub dove ci sono esempi e codice funzionante: https://github.com/jasmcaus/opencv-course/tree/master.</p> <p>Basics:</p> <ul> <li>Reading Images and Video</li> <li>Image Transformations</li> <li>Drawing Shapes</li> </ul> <p>Advanced:</p> <ul> <li>Color Spaces</li> <li>BITWISE operations</li> <li>Masking</li> <li>Histogram Computation</li> <li>Edge Detection</li> </ul> <p>Faces:</p> <ul> <li>Face Detection</li> <li>Face Recognition</li> </ul> <p>Buon divertimento!!!</p>"},{"location":"insights/21_opencv/#install","title":"install","text":"<p>Secondo loro:</p> <ul> <li>opencv-contrib-python (contiene tutto quello che serve)</li> <li>caer (boh)</li> </ul>"},{"location":"insights/21_opencv/#leggere-immagini-e-video","title":"leggere immagini e video","text":"<p>Cominciamo dal programma assolutamente minimo, che per\u00f2 in realt\u00e0 contiene gi\u00e0 parecchie cosine su cui riflettere!</p> Programma di base<pre><code># blah blah... opencv...\n</code></pre> <p> </p>"},{"location":"insights/41_mysql/","title":"Python &amp; MySQL","text":"<p>Per sviluppare applicazioni in Python con interazione con un DBMS servono sostanzialmente 2 cose:</p> <ul> <li>un modulo Python per il collegamento con il DBMS</li> <li>l'installazione di un DBMS per il testing dell'applicazione</li> </ul>"},{"location":"insights/41_mysql/#modulo-python","title":"Modulo Python","text":"<p>Il modulo necessario per le implementazioni che vedremo si chiama \"MySQL Connector\". Per l'installazione dello stesso basta utilizzare pip, con il comando indicato sotto</p> <pre><code>$ pip install mysql-connector\n</code></pre> <p>oppure dalla linea di comando, invocando l'interprete Python</p> <pre><code>$ python -m pip install mysql-connector\n</code></pre> <p>I comandi elencati funzionano sicuramente su Linux e Mac. Su Windows dipende da come \u00e8 stata fatta l'installazione di Python e in particolare se l'eseguibile Python \u00e8 stato inserito nel PATH.</p> <p>Se cos\u00ec non fosse bisogna spostarsi con la console della riga di comando fino alla cartella di installazione di Python ed eseguire il comando sopra da l\u00ec.</p> <p>Ad esempio se l'installazione \u00e8 stata fatta su <code>C:\\Python</code>, allora il comando va eseguito in quella cartella.</p> <p>Per verificare che l'installazione del modulo \u00e8 andata a buon fine basta aprire l'interprete Python e provare a importare il modulo:</p> <pre><code>&gt;&gt;&gt; import mysql.connector\n</code></pre> <p>Se Python non si lamenta di nulla, siamo pronti per il prossimo step :)</p>"},{"location":"insights/41_mysql/#installazione-dbms","title":"Installazione DBMS","text":"<p>Per testare il codice che scriveremo dobbiamo installare un DBMS. Bene... installeremo MariaDB! Cio\u00e8... come scusa? Non installiamo MySQL? E tutti discorsi fatti fino ad ora? E... il titolo di questa dispensa???</p> <p>Provo a spiegare con una frase: MariaDB \u00e8 un software libero nato come fork di MySQL e studiato come Drop-In Replacement dello stesso. Credo che come spiegazione sia un po' criptica ma sufficientemente esaustiva :)</p> <p>Se volete maggiori informazioni sulle motivazioni della scelta, vi rimando alla loro pagina wikipedia: https://it.wikipedia.org/wiki/MariaDB.</p> <p>Per installare MariaDB basta seguire le istruzioni che trovate nel loro sito ufficiale: https://mariadb.org/</p>"},{"location":"insights/41_mysql/#connessione-al-db","title":"Connessione al DB","text":"<p>Cominciamo stabilendo una connessione fra il nostro script Python e il database:</p> <pre><code>import mysql.connector\n\npydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"username\",\n    passwd=\"password\",\n    database=\"dbname\"\n)\n</code></pre> <p>Ovviamente se c'\u00e8 un problema qualunque nella connessione questo pezzo di codice fallir\u00e0. E sar\u00e0 inutile andare avanti...</p>"},{"location":"insights/41_mysql/#ddl-execution","title":"DDL execution","text":"<p>DDL (Data Definition Language) \u00e8 quella parte di codice SQL che serve per la definizione dei dati. Per estrema semplicit\u00e0 dir\u00f2 semplicemente che DDL si riferisce ai comandi SQL <code>CREATE</code> (ad esempio: CREATE TABLE...), <code>ALTER</code>, <code>DROP</code>.</p> <p>Questo tipo di comandi non ritornano \"valori\" o tabelle come risultato, ma generano semplicemente una risposta del tipo \"OK, tutto fatto!\" oppure \"Mannaggia, qualcosa \u00e8 andato storto!!!\".</p> <p>Per eseguire questo tipo di comandi abbiamo bisogno di un \"cursore\" che si occupi di attualizzare l'istruzione descritta.</p> <pre><code>pycur = pydb.cursor()\npycur.execute(\"CREATE TABLE if not exists tbl_seven(number int);\")\n</code></pre>"},{"location":"insights/41_mysql/#dml-execution","title":"DML execution","text":"<p>DML (Data Manipulation Language) \u00e8 quella parte di codice SQL che serve per la manipolazione dei dati. Per estrema semplicit\u00e0 dir\u00f2 semplicemente che DML si riferisce ai comandi SQL <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.</p> <p>Questo tipo di operazioni sulle tabelle del database non modifica in alcun modo la struttura dello stesso, ma si occupa semplicemente di andare ad aggiungere, modificare, eliminare dati dalla tabella.</p> <p>Per eseguire i comandi abbiamo ancora bisogno di un cursore. Vediamo l'esempio:</p> <p>Inserimento di un valore</p> <pre><code>pycur = pydb.cursor()\n\nfor n in range(1,11):\n    sql = 'INSERT INTO tbl_seven(number) VALUES (' + str(n*7) + ')'\n    pycur.execute(sql)\n\n    # per applicare l'aggiornamento dei dati, va fatto il commit sul DB\n    pydb.commit()\n</code></pre>"},{"location":"insights/41_mysql/#ql-execution","title":"QL execution","text":"<p>QL (Query Language) \u00e8 quella parte di codice SQL che serve per l'interrogazione dei dati. Per estrema semplicit\u00e0 dir\u00f2 semplicemente che QL si riferisce al comando SQL <code>SELECT</code>.</p> <p>Questo tipo di operazioni sulle tabelle del database genera come risultato una tabella \"provvisoria\" contenente il risultato dell'interrogazione.</p> <p>Neanche a dirlo, per eseguire i comandi abbiamo ancora bisogno di un cursore. Vediamo l'esempio:</p> <pre><code>pycur = pydb.cursor()\n\nsql = \"SELECT number FROM tbl_seven WHERE number % 2 = 0\"\npycur.execute(sql)\n\nresults = pycur.fetchall()\n\nfor r in results:     \n    print(r)\n</code></pre> <p>Tutto qua!</p> <p>Rimane da provare e sperimentare un po'...</p> <p> </p>"},{"location":"insights/42_sqlite/","title":"Python &amp; sqlite","text":"<p>Blah blah</p> <p> </p>"},{"location":"insights/43_mongodb/","title":"Python &amp; MongoDB","text":"<p>blah blah</p> <p> </p>"},{"location":"insights/51_arduino/","title":"Python &amp; Arduino","text":"<p>Per sviluppare applicazioni in Python con interazione con un dispositivo Arduino servono sostanzialmente 4 cose:</p> <ul> <li>Python installato sul Computer :)</li> <li>La libreria pyserial, per il collegamento con Arduino tramite     seriale</li> <li>Un dispositivo Arduino (dovrebbe funzionare con tutti i tipi)</li> <li>L'ambiente di sviluppo per Arduino installato sul Computer</li> </ul>"},{"location":"insights/51_arduino/#python-pyserial","title":"Python &amp; PySerial","text":"<p>Il modulo necessario per le implementazioni che vedremo si chiama \"PySerial\". Per l'installazione dello stesso basta utilizzare pip, con il comando indicato sotto</p> <pre><code>$ pip install pyserial\n</code></pre> <p>oppure dalla linea di comando, invocando l'interprete Python</p> <pre><code>$ python -m pip install pyserial\n</code></pre> <p>I comandi elencati funzionano sicuramente su Linux e Mac. Su Windows dipende da come \u00e8 stata fatta l'installazione di Python e in particolare se l'eseguibile Python \u00e8 stato inserito nel PATH.</p> <p>Se cos\u00ec non fosse bisogna spostarsi con la console della riga di comando fino alla cartella di installazione di Python ed eseguire il comando sopra da l\u00ec.</p> <p>Ad esempio se l'installazione \u00e8 stata fatta su \"C:\\Python\", allora il comando va eseguito in quella cartella.</p> <p>Per verificare che l'installazione del modulo \u00e8 andata a buon fine basta aprire l'interprete Python e provare a importare il modulo:</p> <pre><code>&gt;&gt;&gt; import serial\n</code></pre> <p>Se Python non si lamenta di nulla, siamo pronti per il prossimo step :)</p>"},{"location":"insights/51_arduino/#ambiente-arduino","title":"Ambiente Arduino","text":"<p>Il MicroProcessore libero Arduino si pu\u00f2 acquistare a poco prezzo in un negozio di prodotti informatici: una scheda singola costa fra i 10 e i 30 euro, mentre uno starter kit, che comprende una breadboard e alcuni sensori semplici per le prime prove, si aggira intorno ai 40-70 euro.</p> <p>Se economicamente possibile, uno starter kit \u00e8 la scelta migliore. Vi consiglio di cercare il prezzo migliore controllando i vari negozi online di articoli informatici.</p> <p>Il sito di riferimento ufficiale \u00e8 https://www.arduino.cc. L\u00ec si trovano riferimenti per l'acquisto e per scaricare il software di sviluppo, che si chiama Arduino IDE.</p> <p>Non dovrebbe essere incredibilmente difficile riuscire nell'impresa di acquistare un arduino e installare il suo IDE.</p>"},{"location":"insights/51_arduino/#collegamento-fra-i-dispositivi","title":"Collegamento fra i dispositivi","text":"<p>I due esempi che seguono servono per verificare che sia possibile instaurare una comunicazione nei due sensi: da Arduino al dispositivo che esegue lo script Python e viceversa. I due esempi sono i pi\u00f9 semplici che sia possibile: nonostante ci\u00f2, richiedono comunque la comprensione completa sia dei circuiti fisici che si vanno a implementare con Arduino, sia dei collegamenti che si instaurano fra i vari dispositivi.</p>"},{"location":"insights/51_arduino/#da-arduino-a-python","title":"Da Arduino a Python","text":"<p>L'esempio da implementare \u00e8 di una semplicit\u00e0 estrema: Arduino ogni TOT secondi invier\u00e0 un testo semplice tramite la porta seriale e Python dovr\u00e0 ogni volta individuare il testo inviarlo e trascriverlo sullo schermo. Vediamo il codice:</p> <p>Su Arduino:</p> <pre><code>void setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    Serial.print(\"Funziona!!!\");\n    delay(2000);\n}\n</code></pre> <p>Tramite l'ambiente di sviluppo, creare un nuovo progetto, copiare il codice sovrastante in esso e \"passarlo\" al proprio Arduino.</p> <p>Sul Computer con Python:</p> <pre><code>import serial\nimport time\n\n# Va individuata la porta seriale abbinata ad Arduino\n# Aiutatevi con Arduino IDE\n# Su Win, dovrebbe essere una \"COMx\" (con x che pu\u00f2 essere 1,2,3,4)\n# Su Mac/Linux, dovrebbe essere \"/dev/ttyACMx\" (con x che va da 0 a...)\n\nportaSeriale = \"boh\"\nad = serial.Serial(portaSeriale, 9600)\n\nwhile True:\n    print( ad.realine() )\n\ntime.sleep(2)\n</code></pre> <p>Eseguite questo pezzo di codice e \"dovreste\" vedere, ogni 2 secondi, la scritta \"Funziona!!!\" apparire...</p>"},{"location":"insights/51_arduino/#da-python-ad-arduino","title":"Da Python ad Arduino","text":"<p>Per il secondo esempio le cose sono leggermente pi\u00f9 complicate. L'idea \u00e8 quella di inviare una informazione tramite Python e fare in modo che Arduino se ne accorga. Come facciamo per\u00f2 NOI ad essere sicuri che Arduino se ne sia accorto???</p> <p></p> <p>La cosa pi\u00f9 semplice \u00e8 fargli fare qualcosa, ad esempio... accendere un led!  Per fare ci\u00f2, occorre implementare il seguente circuito con Arduino, una breadboard, un led e una resistenza.</p> <p>Implementato il circuito come in figura, andremo a caricare sulla scheda il seguente codice per Arduino:</p> <p>Codice per Arduino</p> <pre><code>#define LED 13\n\nvoid setup() {\n    pinMode(LED, OUTPUT);\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    if (Serial.available()) {\n        char c = Serial.read();\n        if (c == \\'S\\')\n            digitalWrite(LED, HIGH);\n        if (c == \\'N\\')\n            digitalWrite(LED, LOW);\n    }\n}\n</code></pre> <p>Il codice \u00e8 molto semplice da capire: il LED \u00e8 collegato al pin 13, che viene impostato in OUTPUT, ovvero i dati usciranno dalla scheda Arduino al LED. Arduino \u00e8 in ascolto sulla porta seriale e legge un carattere per volta: se il carattere \u00e8 'S' imposta come acceso il LED; se il carattere \u00e8 'N' lo imposta come spento.</p> <p>Analogamente Python deve essere in grado di inviare i due caratteri ad Arduino.</p> <p>Codice Python</p> <pre><code>import serial\nimport time\n\nportaSeriale = \"boh\" # VEDI SOPRA\n\narduino = serial.Serial(portaSeriale,9600)\ntime.sleep(2)\n\ncarattere = 'A'\n\nwhile carattere != 'C':\n    carattere = input(\"S accende il LED, N lo spegne, C stop\")\n    c = carattere.encode('latin_1')\n    arduino.write(c)    \n    time.sleep(2)\n\narduino.close()\n</code></pre> <p>Tutto qua!</p> <p>Rimane da provare e sperimentare un po'...</p> <p> </p>"},{"location":"insights/91_reals/","title":"Python e i numeri reali","text":"<p>Python sembra fare parecchi errori per calcolare i numeri con la virgola... non sembra preciso... guardate questo esempio:</p> <pre><code>1.1 + 2.2 == 3.3\nFalse (ma come False???)\n</code></pre> <p>Ho capito: Python \u00e8 scemo!</p> <p>La dispensa \u00e8 finita :)</p> <p>No... il problema non \u00e8 Python, ma la rappresentazione dei numeri reali IEEE754 utilizzata dai nostri dispositivi per memorizzare un numero reale.</p> <p>Forse in prima l'abbiamo accennata... difficilmente l'abbiamo studiata... vi ricorder\u00f2 2 semplici cose:</p> <ul> <li>i computer salvano i dati nelle memorie come sequenze binarie</li> <li>le memorie hanno il brutto difetto di avere uno spazio limitato, \"finito\"</li> </ul> <p>Ora... per capire con un semplice esempio il problema, facciamo un ragionamento con i numeri decimali.</p> <p>Immagina di voler memorizzare il valore della frazione <code>1/4</code> (un quarto):</p> <pre><code>viene 0.25 (facile, finito!!!)\n</code></pre> <p>Immagina adesso di voler memorizzare il valore della frazione <code>1/3</code></p> <p>viene <code>0.3333333333333333</code> (facile, ma infinito... un problemino in un posto finito)</p> <p>Certo... tu a occhio hai capito che basta mettere infiniti 3 l\u00ec dietro... ma per quanto ti impegni quella rappresentazione non sar\u00e0 mai esattamente <code>1/3</code> !!!</p> <p>A volte, nella traduzione binaria di un numero reale in decimale si creano situazioni analoghe: numeri che in decimale hanno una rappresentazione semplice hanno rappresentazione infinita in binario. Di cui noi (ulteriore problema) possiamo memorizzarne solo un pezzo!</p> <p>Ecco spiegato l'arcano.</p> <p>Se vogliamo rappresentazioni precise \"all'infinito\" (per i numeri reali razionali) possiamo usare alcuni moduli Python adatti allo scopo:</p> <ul> <li>decimal</li> <li>fractions</li> <li>math</li> </ul> <p>Segui i link indicati e continua tu </p> <p> </p>"},{"location":"insights/92_ibs/","title":"Interi, bytes, stringhe","text":"<p>In questa sezione vorrei regalare alcune piccole delucidazioni su come funzionano gli interi in Python e come si confrontano con i bytes e la loro rappresentazione sotto forma di stringhe.</p> <p>Questo approfondimento \u00e8 necessario soprattutto quando si lavora con dati in rete, in cui il formato privilegiato per la trasmissione \u00e8 chiaramente quello in <code>bytes</code>.</p> <p>Ma andiamo con ordine.</p>"},{"location":"insights/92_ibs/#interi-base-2-8-10-16","title":"Interi, base 2, 8, 10, 16","text":"<p>Le basi numeriche pi\u00f9 comuni sono chiaramente (in rigoroso ordine crescente) le basi 2, 8, 10, 16. A dire la verit\u00e0, la base pi\u00f9 comune \u00e8 la base 10 (e questo perch\u00e9 abbiamo 10 dita...). Le altre sono diventate comuni soprattutto grazie all'informatica.</p> <p>Vediamo come rappresentare cifre nelle diverse basi:</p> <pre><code>interoBase10 = 27       # come ovvio... \u00e8 27 in base 10. 27...\ninteroBase2  = 0b1101   # 1101 in base 2. Ovvero 13 in base 10.\ninteroBase8  = 0o13     # 13 in base 8. Ovvero 11 in base 10.\ninteroBase16 = 0xAF     # AF in base 16. Ovvero 175 in base 10.\n</code></pre> <p>Come si vede Python fornisce dei prefissi semplici per indicare un numero nelle basi comuni. Facile!</p> <p>Attenzione!</p> <p>Quando andate a visualizzare questi numeri, ad esempio con una print, vedrete sempre e comunque la loro rappresentazione decimale:</p> <pre><code>print(interoBase10) # scrive 27\nprint(interoBase2)  # scrive 13\nprint(interoBase8)  # scrive 11\nprint(interoBase16) # scrive 175\n</code></pre> <p>Se invece avete un numero decimale e lo volete rappresentare in binario, ottale, esadecimale, Python fornisce delle comodissime funzioni predefinite.  Occhio che per cristallizzare la rappresentazione dei numeri in quella base, Python in realt\u00e0 crea delle stringhe!</p> <p>Vediamo il codice:</p> <pre><code>a = 67\nb = bin(a)   # b \u00e8 la stringa '0b1000011'\nc = oct(a)   # c \u00e8 la stirnga '0o103'\nd = hex(a)   # d \u00e8 la stringa '0x43'\n</code></pre> <p>Se invece abbiamo delle stringhe che rappresentano dei numeri in base 2,8,10,16, lo strumento da utilizzare \u00e8 la funzione <code>int()</code> con accortezza!</p> <p>Infatti!</p> <pre><code>s1 = '89'\nn1 = int(s1)            # Vale l'intero 89. Questo lo sapevamo gi\u00e0...\n\ns2 = '0b101'\nn2 = int(s2)            # ERRORE!!! Non sa come convertire la b...\nn2 = int(s2, base = 2)  # Vale l'intero 5, la conversione di 101(2) in decimale\n\ns3 = '0o23'\nn3 = int(s3)            # ERRORE!!! Non sa come convertire la o...\nn3 = int(s3, base = 8)  # Vale l'intero 19, la conversione di 23(8) in decimale\n\ns4 = '0x2E'\nn4 = int(s4)            # ERRORE!!! Non sa come convertire la x...\nn4 = int(s4, base = 16) # Vale l'intero 47, la conversione di 2E(16) in decimale\n</code></pre>"},{"location":"insights/92_ibs/#stringhe-e-codifiche","title":"Stringhe e codifiche","text":"<p>In Python il tipo stringa (<code>str</code>) codifica i dati in UNICODE, utilizzando il sistema di codifica UTF-8.</p> <p>Codifca dei caratteri (pi\u00f9 in breve possibile)</p> <p>All'inizio c'era solo <code>ASCII</code>, in cui c'era una corrispondenza 1 a 1 fra un byte e un carattere della lingua americana. Poich\u00e9 con un byte puoi distinguere massimo 256 caratteri diversi, <code>ASCII</code> non \u00e8 sufficiente per tutte le lingue (con tutti i loro simboli) del mondo. Quindi ognuno ha pensato al proprio standard di rappresentazione dei caratteri.</p> <p>Un bordello!</p> <p>Entra in scena <code>UNICODE</code>. Un unico codice per tutti i caratteri del mondo. Per farceli stare tutti, codifica ogni carattere in due byte, per un totale di 65.536 caratteri  diversi! Abbastanza... Il problema con questa codifica \u00e8 che tutto diventa grosso il doppio!!! Una parola di 4 lettere (ad esempio: \"ciao\") diventa pesante 8 byte...</p> <p>Bestemmiano tutti!</p> <p>L'idea di usare un unico codice per TUTTI i caratteri \u00e8 una figata... la teniamo! Pensiamo una codifica per risparmiare spazio: nascono le codifiche a lunghezza variabile. La migliore sembra essere <code>UTF-8</code> (lo standard de facto attuale). In UTF-8 un carattere pu\u00f2 occupare 1,2,3,4 bytes, ma nel 98% dei casi la rappresentazione delle stringhe \u00e8 pi\u00f9 corta di quella a lunghezza fissa a 2 bytes!!</p> <p>Il bello \u00e8 che contiene anche tutte le faccine </p> <p>Con le stringhe in Python dunque, mentre osservandola (o usando la funzione <code>len</code>) puoi sapere con certezza da quanti caratteri questa \u00e8 formata, a meno di non conoscere a fondo UTF-8, non possiamo sapere ad occhio quanti bytes occupa in memoria! </p> <p>Se per\u00f2 sei veramente determinato a saperlo... puoi usare la funzione predefinita <code>ord()</code>. Questa, dato un carattere, ritorna il valore esadecimale che corrisponde alla sua rappresentazione in UTF-8. Prima di fare qualche esempio, fatemi dire solo che esiste anche la funzione che fa l'inverso, ovvero dato un intero ritorna il carattere corrispondente in UTF-8 (o in ASCII. Ve l'ho detto che UTF-8 \u00e8 stato progettato per essere identico ad ASCII nei primi 127 caratteri???).</p> <pre><code>print( ord('a') )       # scrive 97. In UTF-8, come in ASCII\nprint( chr(97) )        # scrive 'a'\ni = 8364\nprint( chr(i) )         # simbolo dell'Euro \u20ac\n</code></pre>"},{"location":"insights/92_ibs/#bytes-e-bytearray","title":"bytes e bytearray","text":"<p>Per gestire i bytes originati da una conversione (ad esempio di una stringa) o da una trasmissione di rete, Python 3 mette a disposizione 2 tipi di dati:</p> <ul> <li>la classe <code>bytes</code>, immutabile, paragonabile ad una tupla di byte.</li> <li>la classe <code>bytearray</code>, mutabile, paragonabile ad una lista di byte.</li> </ul> <p>Sostanzialmente, i dati in una di queste classi possono arrivare in pochi modi:</p> <ol> <li>tramite la conversione di una stringa (encoding)</li> <li>come prodotto di una trasmissione di rete</li> <li>generando una nuova sequenza tramite le funzione predefinite <code>bytes()</code> e <code>bytearray()</code></li> </ol> <p>Partiamo dall'ultima opzione! Possiamo usare entrambe le funzioni in due modi analoghi: l'unica differenza fra loro \u00e8 che una crea un oggetto di tipo <code>bytes</code> e l'altra un oggetto di tipo <code>bytearray</code>.</p> <p>Vediamo il codice:</p> <pre><code># bytes(size:int) oppure bytearray(size:int). Se passi un intero, crea una sequenza di \"size\" bytes tutti a zero!\n\nb = bytes(3)            # b  vale b'\\x00\\x00\\x00' ,            una sequenza IMMUTABILE di 3 bytes (8x3 = 24 bit) tutti a zero.\nba = bytearray(3)       # ba vale bytearray(b'\\x00\\x00\\x00') , una sequenza MUTABILE   di 3 bytes tutti a zero.\n\n# bytes(iterable) oppure bytearray(iterable). Prende la sequenza di dati e crea una sequenza di byte con i dati della sequenza.\n\ntupla = (1, 2, 3)\nb1 = bytes(tupla)       # b1 vale b'\\x01\\x02\\x03',             una sequenza immutabile, riempita con i byte ricavati dalla conversione dei dati della tupla\nba1 = bytearray(tupla)  # ba1 vale bytearray(b'\\x01\\x02\\x03'), una sequenza mutabile,   riempita con i byte ricavati dalla conversione dei dati della tupla\n</code></pre>"},{"location":"insights/92_ibs/#string-encoding","title":"String encoding","text":"<p>Il passaggio da stringa a bytes \u00e8 davvero semplice, considerando che le stringhe utilizzano la codifica UTF-8.</p> <p>Per passare da stringa a bytes, usiamo la funzione <code>str.encode(self, encoding='utf-8')</code>:</p> <pre><code>s = \"Andrea\"\nb = s.encode()    # b \u00e8 un bytes che vale b'Andrea'\n</code></pre> <p>Se invece hai una sequenza di bytes e vuoi ottenere una stringa, devi utilizzare la funzione <code>bytes.decode(self, encoding='utf-8')</code>.</p> <pre><code>b = b'Andrea'\ns = b.decode()    # s \u00e8 una stringa che vale 'Andrea'\n</code></pre>"},{"location":"insights/92_ibs/#int-conversion","title":"Int conversion","text":"<p>Il passaggio da interi a bytes \u00e8 analogo a quello delle stringhe, ma con una piccola difficolt\u00e0 in pi\u00f9: intuire quanti bytes saranno necessari per stanziare la  conversione dell'intero in questione non \u00e8 banale! Nel dubbio... esagerate un p\u00f2!!</p> <p>Le funzioni da utilizzare sono queste:</p> <ul> <li>da int a bytes: funzione <code>int.to_bytes(len:int)</code> occorre specificare quanti bytes occuper\u00e0 il numero convertito. Se ne metti troppo pochi da errore!!! Se ne metti troppi... sprechi memoria.</li> <li>da bytes a int: funzione <code>int.from_bytes(b)</code>: una semplice conversione 1:1 del bytes in intero.</li> </ul> <p>Vediamo due esempi</p> <pre><code>n = 13\nb = n.to.bytes(3)       # b \u00e8 un bytes che vale b'\\x00\\x00\\r'\n\n# adesso, per riconvertirlo in int:\na = int.from_bytes(b)   # a \u00e8 un intero che vale 13\n</code></pre> <p> </p>"},{"location":"insights/99_asyncio/","title":"asyncio","text":"<p>Prima c'erano Python <code>threading</code> e Python <code>multiprocessing</code>... o librerie di terze parti come <code>Twisted</code> e <code>Tornado</code>... adesso si utlizza <code>asyncio</code>.</p> <p>La libreria <code>asyncio</code> \u00e8 predefinita in Python sin dalla versione <code>3.7</code>!!! Se volete utilizzarla (e in molti casi... fate molto bene!!) dovete solo aver cura di avere una versione recente di Python installata.</p> <p>Documentazione ufficiale</p> <p>La documentazione ufficiale di <code>asyncio</code> \u00e8 disponibile nella documentazione ufficiale di Python. Link veloce per i pi\u00f9 pigri: Clicca qui!. Questo piccolo tutorial serve solo come introduzione al discorso...</p> <p><code>asyncio</code> \u00e8 un framework asincrono di I/O che permette di scrivere codice concorrente tramite la sintassi <code>await</code> e <code>async</code>. Si basa sui concetti di event loop e di coroutines per la gestione delle operazioni asincrone. Vediamoli:</p>"},{"location":"insights/99_asyncio/#event-loop","title":"Event Loop","text":"<p>L'event loop (letteralmente, il ciclo degli eventi) \u00e8 il concetto alla base del modello di esecuzione di asyncio. Quando viene attivato, esso si occupa di pianificare e gestire le operazioni di I/O e le attivit\u00e0 (asincrone) definite nelle coroutines e di alternarsi con il sistema operativo nel controllo dell'hardware: in questo modo si mantiene il sistema fluido (cio\u00e8 in esecuzione di operazioni non bloccanti).</p>"},{"location":"insights/99_asyncio/#coroutines","title":"Coroutines","text":"<p>Le coroutine(s) non sono altro che funzioni asincrone, ovvero definite con la sintassi <code>async def</code>. La loro caratteristica principale, rispetto alle normali funzioni \u00e8 che hanno la facolt\u00e0 di restituire il controllo all'event loop tramite l'utilizzo della keyword <code>await</code>, permettendo ad altre operazioni di essere eseguite nel frattempo.</p> Esempio base: saluto asyncrono<pre><code>import asyncio\n\nasync def saluta(nome, delay):\n    \"\"\" Aspetta {delay} secondi (asincrono) e poi saluta {nome}\"\"\"\n    await asyncio.sleep(delay)\n    print(f\"Ciao, {nome}!\")\n\nasync def main():\n    \"\"\" esegue TOT operazioni 'contemporaneamente'!!! \"\"\"\n\n    # asyncio.gather permette di eseguire 'insieme' un gruppo di operazioni asincrone\n    await asyncio.gather(\n        saluta(\"Andrea\", 2),\n        saluta(\"Barbara\", 1),\n        saluta(\"Cristina\", 3),\n    )\n\nif __name__ == \"__main__\":\n    # codice per avviare l'event loop\n    asyncio.run(main())\n</code></pre>"},{"location":"insights/99_asyncio/#tasks","title":"Task(s)","text":"<p>Un task asyncio \u00e8 una coroutine in programma per l'esecuzione e gestita in maniera indipendente.</p> Creazione ed esecuzione di task asincroni<pre><code>import asyncio\n\nasync def operazioneLunga(n):\n    print(f\"Inizio operazione {n}\")\n    await asyncio.sleep(n)\n    print(f\"Fine operazione {n}\")\n\nasync def main():\n    # asyncio.create_task... fa quello che dice!\n    task1 = asyncio.create_task(operazioneLunga(2))\n    task2 = asyncio.create_task(operazioneLunga(4))\n\n    # aspetta il completamento dei task\n    await task1\n    await task2\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"insights/99_asyncio/#gestione-errori-e-timeout","title":"Gestione errori e Timeout","text":"<p>Con tutta la buona volont\u00e0 di portare avanti e terminare pi\u00f9 operazioni possibili contemporaneamente, \u00e8 praticamente certo che prima o poi qualcosa andr\u00e0 storto... bisogna rendere il codice pi\u00f9 robusto possibile, ovvero in grado di gestire al meglio ogni eventuale problematica incontrata.</p> <p>Le soluzioni offerte da Python sono tipicamente due:</p> <ul> <li>la gestione delle eccezioni tramite il codice <code>try... except</code>: questa vale sempre!!!</li> <li>l'impostazione di un timeout per le coroutine in esecuzione (oltre il quale non possono andare): questa vale solo per asyncio!!!</li> </ul> <p>Per gestire ogni problema al meglio bisognerebbe considerare entrambi gli approcci. Vediamo un esempio di codice semplice e ben commentato!</p> Se non finisci entro 2 secondi, muori!<pre><code>import asyncio\n\nasync def fai_in_fretta():\n    \"\"\" aspetta 5 secondi e via! \"\"\"\n    try:\n        await asyncio.sleep(5)\n        print(\"Fatto!\")\n    except asyncio.CancelledError:\n        print(\"Operazione cancellata!!!\")\n\nasync def main():\n    task = asyncio.create_task(fai_in_fretta())\n\n    try:\n        # concede al massimo 2 secondi di tempo per l'esecuzione del task\n        await asyncio.wait_for(task, timeout=2)\n    except asyncio.TimeoutError:\n        print(\"Time OUT\")\n        task.cancel()\n        await task\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"insights/99_asyncio/#asyncio-networking","title":"Asyncio Networking","text":"<p>La libreria <code>asyncio</code> rende molto semplice lavorare con le operazioni I/O di rete. L'esempio sotto presenta un echo server (una applicazione che ripete tutto quello che dici) che utilizza le classi asyncio <code>StreamReader</code> e <code>StreamWriter</code></p> async(io) echo server<pre><code>import asyncio\n\nasync def echo(reader, writer):\n    while True:\n        data = await reader.read(100)\n        if not data:\n            break\n\n        writer.write(data)\n        await writer.drain()\n\n    writer.close()\n    await writer.wait_closed()\n\nasync def main():\n    server = await asyncio.start_server(echo, \"127.0.0.1\", 8888)\n\n    async with server:\n        await server.serve_forever()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Debugging</p> <p>Per fare il debug di una applicazione basata su asyncio, ti basta inserire la riga <code>asyncio.set_debug(True)</code> prima di eseguire l'event loop.  Fornir\u00e0 all'applicazione la possibilit\u00e0 di essere controllata al meglio!!!</p>"},{"location":"insights/99_asyncio/#3rd-party-libraries","title":"3rd party libraries","text":"<p>Vista la grande qualit\u00e0 per cui asyncio si \u00e8 subita distinta, sono immediatamente state implementate librerie specifiche, basate su di essa per i casi pi\u00f9 disparati:</p> <ul> <li><code>aiohttp</code>, una libreria che implementa framework HTTP client/server</li> <li><code>aiomysql</code>, una libreria asincrona per interagire con il database MySQL e MariaDB</li> <li><code>AsyncSSH</code>, una libreria asincorna per implementare un client o un server SSH</li> <li><code>aiodns</code>, un semplice DNS resolver basato su asyncio</li> <li><code>aioping</code>, una libreria asincrona per il protocollo ICMP (su cui si basa ping)</li> <li><code>asynctest</code>, una libreria per i test su funzioni e librerie asincrone-</li> </ul> <p>Molti (ma non tutti) sono genericamente indicati su questo strano sito: Awesome AsyncIO. Trovare esempi in rete di utilizzo di queste librerie diventa ogni giorno pi\u00f9 facile.</p>"},{"location":"insights/99_asyncio/#best-practices","title":"Best Practices","text":"<ul> <li>Usa <code>async def</code> per definire una coroutine e <code>await</code> per metterla in pausa.</li> <li>Usa <code>asyncio.gather()</code> o <code>asyncio.create_task()</code> per eseguire coroutine in maniera concorrente.</li> <li>Gestisci le eccezioni nei blocchi <code>try... except</code>.</li> <li>Usa <code>asyncio.wait_for()</code> per impostare timeout alle coroutines.</li> <li>Chiudi sempre le risorse, come i file o le connessioni di rete, quando non le usi pi\u00f9.</li> <li>Usa librerie di terze parti basate su asyncio per le migliori performance su compiti specifici.</li> <li>Usa il debug mode di asyncio per controllare il codice.</li> </ul>"},{"location":"insights/99_uv/","title":"uv","text":""},{"location":"wx/000_intro/","title":"La libreria grafica wxPython","text":""},{"location":"wx/000_intro/#introduzione","title":"Introduzione","text":"<p>wxPython (https://wxpython.org/) \u00e8 una libreria grafica open source, adatta alla creazione di GUI (interfacce grafiche) per sistemi Windows, Mac e Linux.</p> <p>WxPython deriva dal toolkit wxWidgets (https://wxwidgets.org), libreria grafica C++ con una tradizione pi\u00f9 che ventennale.  Con la versione 4.x che noi utilizzeremo (codenamed Phoenix) ha sub\u00ecto una profonda revisione e modernizzazione, fino a diventare la libreria grafica preferita dallo stesso von Rossum (l'inventore di Python).  E chiss\u00e0 che presto non diventi la libreria grafica predefinita!</p> <p>Si presenta come una libreria Python 3.x completamente orientata agli oggetti e quindi sar\u00e0 di immediato utilizzo per tutti noi,  non appena avremo introdotto la sua struttura e gli oggetti principali.</p>"},{"location":"wx/000_intro/#installazione","title":"Installazione","text":"<p>La libreria wxPython \u00e8 una libreria OOP Python in tutto e per tutto.  La trovate come tantissime altre sul Python Package Index (pypi.org) e per installarla seguite questi semplici passaggi.</p> <p>Aprite Thonny e accedete al suo gestore dei pacchetti:</p> <p></p> <p>Da l\u00ec digitate la stringa wxpython e cliccate su Cerca in PyPi:</p> <p></p> <p>A questo punto vi basta semplicemente cliccare INSTALLA e aspettare :)</p> <p></p> <p>Quando il download e l'installazione sono finiti, passiamo a verificare il funzionamento del tutto con un Hello Wordl!</p>"},{"location":"wx/000_intro/#hello-world","title":"Hello World!","text":"<p>Vediamo innanzitutto un primo assaggio di codice, il famoso programma Hello World! per la libreria wxPython:</p> <pre><code># si importa la libreria wx\nimport wx\n\n# si crea un oggetto Applicazione\napp = wx.App()\n\n# si crea una finestra con titolo \"Hello, World!\"\nwindow = wx.Frame(parent=None, title=\"Hello, World!\")\nwindow.Show()\n\n# si avvia il \"Main Event Loop\"\napp.MainLoop()\n</code></pre> <p>Hello World Programs</p> <p>Gli Hello World Programs sono programmi che scrivono (o mostrano) semplicemente la scritta \"Hello, World!\".</p> <p>Sono tipicamente i primi programmi che si vuole scrivere in un qualsiasi linguaggio di programmazione e servono soprattutto a vedere la struttura e la sintassi del linguaggio, oltre che ad assicurarsi che tutto funzioni.</p> <p>Il risultato dell'esecuzione di quel codice \u00e8 questo!</p> <p></p> <p>Se avete visto anche voi una finestra grigia vuota con il titolo \"Hello, World!\" significa che l'installazione e il primo programma sono andati a buon fine e siete pronti per studiare la libreria wxPython (a partire dalla prossima pagina!).</p> <p> </p>"},{"location":"wx/101_first_things/","title":"Primi concetti","text":"<p>wxPython \u00e8 un toolkit Python cross-platform per la creazione di applicazioni con GUI e che espone una lunga lista di widgets per i compiti pi\u00f9 disparati. Le sue classi sono organizzate in moduli che pian piano andremo a studiare: per adesso ci baster\u00e0 sapere che le classi principali sono disponibili nel modulo wx, lo stesso che abbiamo importato nell'esempio Hello, World!.</p> <p>Capisco che arrivato a questo punto, prima di andare avanti, \u00e8 necessario che io faccia una pausa e spieghi una serie di termini che ho utilizzato qua e l\u00e0 e che probabilmente ancora non conoscete.</p> <ul> <li> <p>toolkit    Letteralmente \"cassetta degli attrezzi\", rappresenta l'insieme di strumenti necessari per eseguire un compito.    Il compito del toolkit wxPython \u00e8 la creazione di applicazioni grafiche, gli strumenti che utilizza sono classi Python.</p> </li> <li> <p>GUI    Acronimo di Graphical User Interface, indica la capacit\u00e0 di alcune applicazioni di interagire con gli utenti    tramite la modalit\u00e0 WIMP (e adesso spiego WIMP...)</p> </li> <li> <p>cross-platform    Rappresenta la capacit\u00e0 di alcuni software di essere utilizzati su vari sistemi operativi.    Per quanto riguarda wxPython essa \u00e8 disponibile su tutti i sistemi operativi desktop, in particolare \u00e8 sicuramente    disponibile su Windows, Mac OS e Linux.</p> </li> <li> <p>Widget    Si tratta di un generico oggetto grafico. Nel contesto wxPython si tratta di una classe wxPython che implementa    un oggetto grafico, ad esempio la classe che implementa un pulsante (e quindi il pulsante), la classe che implementa una finestra,    una checkbox, etc...</p> </li> </ul> <p>Benissimo! Detto questo passiamo a reimplementare l'unico esempio che abbiamo finora visto e ragioniamoci un p\u00f2 s\u00f9</p>"},{"location":"wx/101_first_things/#widget-derivata","title":"Widget Derivata","text":"<p>Riguardiamo l'esempio iniziale Hello, World! con la differenza che, invece di istanziare direttamente la classe <code>wx.Frame</code> verr\u00e0 creata una classe derivata a partire da questa.</p> <p>Questa sar\u00e0 la modalit\u00e0 operativa con cui lavoreremo fino a nuovo ordine! Per meglio comprendere quanto da ora in poi eseguirete con obbedienza e rassegnazione, in questo esempio banale troverete tantissimi commenti:</p> <pre><code># IMPORTA LA LIBRERIA wxPython (modulo wx)\nimport wx\n\n# --------------------------------------------------------\n# QUI SI DEFINISCE LA CLASSE LaMiaPrimaFinestra (derivata dalla classe wx.Frame)\nclass LaMiaPrimaFinestra(wx.Frame):\n\n    def __init__(self):\n        super().__init__(parent=None, title=\"La mia prima finestra\")\n        # ... (altro codice)...\n\n# --------------------------------------------------------\n\n# QUI SI UTILIZZA LA CLASSE LaMiaPrimaFinestra DEFINITA SOPRA\nif __name__ == \"__main__\":\n\n    # si crea un oggetto Applicazione.\n    # Ce ne sar\u00e0 sempre uno (e solo uno) in ogni applicazione.\n    # Gestisce l'interazione con l'esterno (l'utente e il sistema operativo)\n    app = wx.App()\n\n    # si definisce un oggetto della classe LaMiaPrimaFinestra\n    # Gi oggetti grafici principali (le finestre) vengono creati nascosti e quindi devono essere mostrati\n    window = LaMiaPrimaFinestra()\n    window.Show()\n\n    # si avvia il \"Main Event Loop\"    \n    app.MainLoop()\n</code></pre> <p>Main Event Loop</p> <p>Il Main Event Loop o ciclo principale degli eventi \u00e8 uno stato di grazia in cui si pone ogni applicazione grafica dopo aver disegnato le proprie widgets.</p> <p>In questo particolare stato di colloquio perenne tra il sistema operativo, l'utente e l'applicazione stessa, quest'ultima diventa in grado di intercettare gli eventi che accadono nel sistema (un click su un pulsante, un movimento del mouse, la carta della stampante che finisce, la rete che si sconnette, etc...) e di rispondere (eventualmente) eseguendo una funzione tra quelle disponibili fra gli oggetti che la compongono.</p> <p>In questo modo impareremo a strutturare ogni finestra in una classe e se necessario a strutturare i nostri progetti dividendo ogni classe in un file diverso, in modo da favorire al massimo l'organizzazione fortemente orientata agli oggetti e tutti le buone cose che ne derivano (organizzazione del codice, chiara divisione dei compiti fra le classi, semplicit\u00e0 nel riutilizzare il codice, etc..)</p>"},{"location":"wx/101_first_things/#dimensione-e-posizionamento","title":"Dimensione e posizionamento","text":"<p>Se vogliamo modificare la dimensione di una finestra possiamo farlo in 2 modi:  o fornendo una dimensione iniziale nel costruttore della stessa, oppure utilizzando la funzione <code>SetSize(width, height)</code>. </p> <p>Faccio notare che tutte le misure sono espresse in pixel.</p> <pre><code>import wx\n\napp = wx.App()   \nwindow = wx.Frame(None, title=\"Finestra 800x600\", size=(800,600))\nwindow.Show()\napp.MainLoop()\n</code></pre> <p>...oppure...</p> <pre><code>import wx\n\napp = wx.App()   \nwindow = wx.Frame(None, title=\"Finestra 800x600\")\nwindow.SetSize(800,600)\nwindow.Show()\napp.MainLoop()\n</code></pre> <p>Entrambi i metodi sono semplici ed efficaci. Dal punto di vista operativo, il metodo <code>SetSize()</code> pu\u00f2 essere chiamato all'interno della funzione <code>__init__</code> quando si definisce una finestra derivata.</p> <p>In maniera analoga, se vogliamo specificare il posizionamento della finestra all'interno dello schermo possiamo  specificare la posizione iniziale nel costruttore o eseguire successivamente la funzione <code>Move(x,y)</code></p> <pre><code>import wx\n\napp = wx.App()   \nwindow = wx.Frame(None, title=\"Finestra al punto (5,5)\", pos=(5,5))\nwindow.Show()\napp.MainLoop()\n</code></pre> <p>...oppure...</p> <pre><code>import wx\n\napp = wx.App()   \nwindow = wx.Frame(None, title=\"Finestra 800x600\")\nwindow.Move(5,5)\nwindow.Show()\napp.MainLoop()\n</code></pre> <p>Anche qui, dal punto di vista operativo, eseguiremo questo codice nel costruttore della classe grafica derivata o all'interno della funzione <code>__init__</code>.</p> <p>Un'ultima cosa, semplice e molto utile pu\u00f2 essere quella relativa al posizionamento automatico con la funzione <code>Centre()</code>, che posiziona automaticamente la finestra al centro dello schermo:</p> <pre><code>import wx\n\napp = wx.App()\n\nwindow = wx.Frame(None, title=\"Finestra Centrata\")\n\n# esegui questo codice, poi commenta la riga qui sotto e rieseguilo\nwindow.Centre()\nwindow.Show()\n\napp.MainLoop()\n</code></pre> <p>Adesso avanti! Il prossimo step \u00e8 quello di interagire un p\u00f2 con l'applicazione!  Inserire un pulsante e fargli fare qualcosa! </p> <p>Prima per\u00f2... una doverosa precisazione!!!</p>"},{"location":"wx/101_first_things/#documentazione-ufficiale","title":"Documentazione Ufficiale","text":"<p>La libreria wxPython contiene circa 1000 classi grafiche, molte delle quali sono collegate fra loro tramite ereditariet\u00e0. </p> <p>Questa informazione \u00e8 decisiva anche dal punto di vista della documentazione: ad esempio, le funzioni di posizionamento e ridimensionamento viste sopra, vengono dalla classe <code>wx.Window</code> da cui la classe <code>wx.Frame</code> deriva, cos\u00ec come ogni oggetto grafico della libreria wxPython (avete letto bene,,, tutti!!!!). Questo significa che tutte le classi hanno questi metodi e che voi gi\u00e0 da qualche minuto sapete spostare e ridimensionare ogni oggetto grafico!!!</p> <p>Da un altro punto di vista, in questa dispensa introdurremo (non studieremo approfonditamente... introdurremo) una cinquantina circa fra gli oggetti grafici pi\u00f9 importanti. Qualsiasi funzionalit\u00e0 o caratteristica interessante che non viene descritta nella dispensa sar\u00e0 da ricercare nella documentazione ufficiale!!!</p> <p>La documentazione ufficiale wxPython si trova sul sito https://docs.wxpython.org/.</p> <p>Da l\u00ec, dovrete imparare a cercare le classi che vi interessano, capire per ognuna da quali classi deriva, quali sono i suoi metodi, le sue propriet\u00e0, le sue caratteristiche principali.</p> <p>Per comodit\u00e0, metto qui i link diretti alle due classi che abbiamo studiato finora:</p> <ul> <li> <p>wx.App: Gestisce le applicazioni con GUI implementate tramite wxPython.</p> </li> <li> <p>wx.Frame: Finestra vuota generica, con barra del titolo, bordi e ridimensionamento funzionanti.</p> </li> </ul> <p>Provate a curiosare un p\u00f2 e a capire come ricercare informazioni.</p> <p>Buon lavoro!!</p> <p></p>"},{"location":"wx/102_events/","title":"Gestione degli eventi","text":"<p>Una volta iniziato il Main Event Loop, le applicazioni wxPython sono in grado di intercettare gli eventi utente, come ad esempio un click su un pulsante o sulla tastiera o un movimento del mouse. </p> <p>Tutte questi eventi sono catalogati negli oggetti, ovvero ogni widget sa quali eventi intercettare: ad esempio un pulsante sapr\u00e0 intercettare un click su di esso, una linea di testo sar\u00e0 in grado di capire quando ci scrivi dentro, etc...</p> <p>Deciso l'evento a cui rispondere (ad esempio, un click su pulsante) \u00e8 possibile abbinare a questo una funzione, in modo che quando l'evento accade, la funzione venga eseguita!</p> <p>Per farlo dobbiamo utilizzare la funzione Bind:</p> <pre><code>widget.Bind ( EVENTO, FUNZIONE_EVENTO )\n</code></pre> <p>Vediamo un esempio di codice di una Finestra con un grosso pulsante dentro: al click sul pulsante viene eseguita una funzione e... provate a copiare il codice e ad eseguirlo per vedere cosa succede!</p> Eseguire una funzione al click di un pulsante<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Cliccami\")\n\n        pulsante = wx.Button(self, label=\"Chiudi tutto\")\n        pulsante.Bind(wx.EVT_BUTTON, self.funzioneEvento)\n\n    def funzioneEvento(self, evt):\n        self.Close()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Funzioni Evento</p> <p>Le funzioni che possono essere collegate con un Bind ad un evento si dicono <code>funzioni evento</code>. Questo tipo di funzioni ha sempre (e solo) due parametri:</p> <ul> <li><code>self</code>, poich\u00e9 sono sempre funzioni membro di una classe</li> <li><code>evt</code>, che rappresenta l'evento che le ha scatenate.</li> </ul> <p>Provate a sostituire la funzione <code>self.Close()</code> con altre funzioni tipo:</p> <ul> <li><code>self.Maximize()</code>: massimizza la finestra</li> <li><code>self.Iconize()</code>: riduce a icona la finestra</li> <li><code>self.Move(0,0)</code>: sposta la finestra nel punto (0,0)</li> <li><code>self.SetSize(400,300)</code>: ridimensiona la finestra</li> <li>etc...</li> </ul> <p>Ormai avete capito tutto... io nel dubbio scrivo un p\u00f2 di deduzioni a partire da questi esempi...</p> <ol> <li>L'oggetto che rappresenta un pulsante si chiama <code>wx.Button</code>.</li> <li>L'evento predefinito per un pulsante \u00e8 il click su di esso: questo evento, per un pulsante, si chiama <code>wx.EVT_BUTTON</code>.</li> <li>Probabilmente (ed \u00e8 proprio cos\u00ec) se una widget si chiamasse <code>wx.Pippo</code>, il suo evento predefinito si chiamerebbe <code>wx.EVT_PIPPO</code></li> <li>Le funzioni che rispondono agli eventi hanno tutte la struttura <code>nomeFunzione (self, event)</code>.</li> </ol> <p>Come si fa a sapere quali (altri) eventi pu\u00f2 gestire un pulsante (wx.Button)?</p> <p>Leggi la documentazione ufficiale della classe wx.Button)</p>"},{"location":"wx/102_events/#identificare-le-widgets","title":"Identificare le widgets","text":"<p>La libreria <code>wxPython</code> mette a disposizione una serie di funzionalit\u00e0 utili per identificare una widget. Vediamo le principali soluzioni offerte:</p> <p>Indentificare la widget che ha scatenato un evento</p> <p>La funzione evento prende come parametro l'evento che l'ha scatenata. Questo pu\u00f2 ritornare l'evento che l'ha generato tramite la funzione <code>evt.GetEventObject()</code>. Vediamo:</p> Identificare la widget che ha generato un evento<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Cliccami\")     \n        pulsante = wx.Button(self, label=\"Fai Qualcosa\")\n        pulsante.Bind(wx.EVT_BUTTON, self.funzioneEvento)\n\n    def funzioneEvento(self, evt):\n        # btn \u00e8 il pulsante che ha generato l'evento\n        btn = evt.GetEventObject()\n        btn.SetLabel(\"Fatto!\")\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Identificare una widget tramite un Id</p> <p>La libreria wxPython identifica in maniera automatica tutte le widget con un ID sempre diverso e sempre negativo</p> <p>\u00c8 comunque possibile impostare un identificativo a scelta, con una importante raccomandazione: scegliete ID positivi e crescenti. Partite da 1 e andate avanti: in questo modo sarete sicuri di non fare confusione con gli ID assegnati automaticamente alle widget  da wxPython e di non sbagliarvi da soli mettendo due volte lo stesso ID!</p> <p>Nel prossimo esempio abbiamo due pulsanti (con ID impostato) collegati alla stessa funzione. L'id permette di distinguere quale dei due ha scatenato l'evento.</p> Esempio con funzione GetId<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"2 pulsanti, 1 funzione\")\n\n        # i due pulsanti sono identificati con ID 1 e 2\n        pulsante1 = wx.Button(self, label=\"pulsante 1\", pos=(5,5), size=(100,30), id=1)\n        pulsante2 = wx.Button(self, label=\"pulsante 2\", pos=(120,5), size=(100,30), id=2)\n        pulsante1.Bind(wx.EVT_BUTTON, self.faiQualcosa)\n        pulsante2.Bind(wx.EVT_BUTTON, self.faiQualcosa)\n\n    def faiQualcosa(self, evt):\n        # la funzione GetId ci dice l'ID della widget che ha scatenato l'evento\n        id = evt.GetId()\n        print(\"Hai cliccato il pulsante con ID =\", id)\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Recuperare una widget conoscendo il suo Id</p> <p>Vi risparmio qualunque esempio, ma immaginate di avere assegnato gli Id da 1 a 10 ad altrettante widgets. Per riottenere una qualsiasi delle widgets in oggetto, basta eseguire la funzione <code>FindWindow(id)</code></p> <pre><code># per ottenere la widget con ID = 5\nwidget = self.FindWindow(5)\n</code></pre>"},{"location":"wx/102_events/#gestire-levento-close","title":"Gestire l'evento Close()","text":"<p>La funzione <code>Close()</code>, che abbiamo gi\u00e0 precedentemente incontrato, provoca la chiusura di una finestra. In realt\u00e0 per\u00f2, essa genera un evento di chiusura per la finestra (CloseEvent), che poi questa potr\u00e0 gestire per programmare la sua chiusura.</p> <p>Il caso tipico in programmazione per questa problematica \u00e8 quando l'utente prova a chiudere un editor con il file non ancora salvato! In quel caso l'applicazione blocca la chiusura suggerendo di salvare prima il file!</p> <p>Nell'esempio che segue la finestra che appare \u00e8 chiudibile dall'utente (con scorciatoia, cliccando sulla x in alto, etc..) solo se massimizzata.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Massimizza per chiudere\")        \n        self.Bind(wx.EVT_CLOSE, self.chiudi)\n\n    def chiudi(self, evt):\n        if (self.IsMaximized()):\n            self.Destroy()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Come al solito... copiate e provate!</p> <p>Attenzione!</p> <p>Quando ci si connette all'evento wx.EVT_CLOSE (e tipicamente... solo in questo caso) \u00e8 necessario chiudere la finestra utilizzando  la funzione <code>Destroy()</code> invece della funzione <code>Close()</code>. </p> <p>Infatti: funzione <code>Close()</code> ---&gt; evento <code>wx.EVT_CLOSE</code> ---&gt; bind alla funzione chiudi ---&gt; funzione <code>Close()</code> ---&gt; CICLO INFINITO!</p> <p>Ok, definiti gli eventi pi\u00f9 semplici e capito come collegarli alle widget, vediamo le widgets e i layout per creare delle applicazioni con un look consistente.</p> <p> </p>"},{"location":"wx/110_widgets/","title":"Le widgets","text":"<p>Attenzione!</p> <p>Negli esempi che seguono, scritti con l'unico obiettivo di presentare le widget, andremo a posizionare pi\u00f9 oggetti nella stessa finestra tramite il cosiddetto posizionamento assoluto, inserendo tutte le widget in un <code>wx.Panel</code> e indicando posizione (pos) e  dimensione (size) degli oggetti.</p> <p>Questo modo di fare, pur semplice e intuitivo, \u00e8 comunque assolutamente sconsigliato e sar\u00e0 sostituito nel prossimo capitolo da un concetto molto pi\u00f9 avanzato e funzionale: i layout!.</p> <p>Per adesso... cerchiamo di capire bene come funzionano le widgets!!!</p> <p>In questa sezione andremo ad inserire le Widgets pi\u00f9 semplici, per capire come sono fatte e come funzionano. Per ognuna di esse sar\u00e0 proposta una descrizione sommaria delle sue caratteristiche, un'immagine esplicativa, un semplice esempio di codice per testare il funzionamento di base e alcuni esercizi basilari per prendere confidenza con il codice.</p> <p>Documentazione Ufficiale</p> <p>Ricordo che la documentazione completa di ognuna di queste widget \u00e8 disponibile nel sito ufficiale</p> <p>All'inizio di ognuna delle classi che vado ad introdurre metter\u00f2 invece un link diretto alla documentazione ufficiale della classe!</p>"},{"location":"wx/110_widgets/#wxframe","title":"wx.Frame","text":"<p>Documentazione ufficiale wx.Frame</p> <p>Finestra vuota generica, con barra del titolo, bordi e ridimensionamento funzionanti.</p> <p>La classe <code>wx.Frame</code> rappresenta una finestra vuota, con bordo e aspetto nativo nel sistema operativo ospite, con le funzionalit\u00e0 tipiche delle finestre gi\u00e0 implementate e funzionanti senza fare nulla: trascinamento, ridimensionamento, barra del titolo, riduzione ad icona, massimizzazione, etc...</p> <p></p> <p>Non c'\u00e8 molto da spiegare su questo che non abbiamo gi\u00e0 visto... provate a copiare l'esempio sotto e a giocare un p\u00f2 con la finestra. Poi magari date un occhio alla documentazione.</p> <pre><code>import wx\n\napp = wx.App()\nwin = wx.Frame(None, title=\"Un Esempio con wx.Frame\")\nwin.Show()\napp.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#wxpanel","title":"wx.Panel","text":"<p>Documentazione ufficiale wx.Panel</p> <p>Pannello utile per organizzare il layout.</p> <p>La classe <code>wx.Panel</code> rappresenta una widget vuota, adatta ad essere utilizzata come contenitore delle altre che vedremo.</p> <p>La sua utilit\u00e0 sta nel fatto che fornisce nativamente interazione con la tastiera (Tab Traversal, lo spostamento fra una widget e l'altra premendo Tab) per s\u00e8 e per tutte le widget al suo interno.</p> <p>Da ora in poi la utilizzeremo in tutti i nostri progetti!. Anche dal punto di vista visivo, un Frame senza un Panel sembra vuoto, mentre un frame con dentro un panel sembra normalmente pieno.</p> <p>Suggerimento (anzi no... Obbligo Perentorio!!!)</p> <p>Da ora in poi utilizzeremo il <code>wx.Panel</code> in tutti i nostri progetti. Esso costituir\u00e0 anche un livello  intermedio di parentela fra le widgets in maniera che:</p> <ul> <li>il Frame nasce senza <code>parent</code></li> <li>il Panel nasce con <code>parent</code> il Frame (tipicamente <code>self</code>)</li> <li>Tutte le widget inserite nella finestra, che giacciono sopra il Panel, hanno il panel stesso come <code>parent</code></li> </ul> <p>Tutti gli esempi da qui in poi sono strutturati in questo modo: vi baster\u00e0 osservarli un minimo :)</p> <p></p> <p></p>"},{"location":"wx/110_widgets/#wxbutton","title":"wx.Button","text":"<p>Documentazione ufficiale wx.Button</p> <p>Pulsante cliccabile.</p> <p>La classe <code>wx.Button</code> rappresenta una widget che implementa un pulsante cliccabile con una etichetta di testo dentro.</p> <p></p> <p>Nell'esempio proposto quando si clicca il pulsante (evento <code>wx.EVT_BUTTON</code>) si riduce ad icona l'applicazione.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Iconificami\")\n        panel = wx.Panel(self)\n        pulsante = wx.Button(panel, label=\"Riduci ad icona\", pos=(5,5), size=(150,40))\n        pulsante.Bind(wx.EVT_BUTTON, self.iconifica)\n\n    def iconifica(self, evt):\n        self.Iconize()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi","title":"Esercizi","text":"<p>Esercizio 2111 (Button)</p> <p>Creare una applicazione con un pulsante CHIUDI. Quando lo clicchi, l'applicazione si chiude.</p> <p>Esercizio 2112 (Button)</p> <p>Creare una applicazione con un pulsante MASSIMIZZA. Quando lo clicchi, l'applicazione si massimizza.</p> <p>Esercizio 2113 (Button)</p> <p>Creare una applicazione con un pulsante NUOVA FINESTRA. Quando lo clicchi, si apre una nuova finestra, identica alla precedente.</p> <p></p>"},{"location":"wx/110_widgets/#wxtogglebutton","title":"wx.ToggleButton","text":"<p>Documentazione ufficiale wx.ToggleButton</p> <p>Pulsante con due stati: cliccato e non cliccato.</p> <p>La classe <code>wx.ToggleButton</code> rappresenta una widget che implementa un pulsante con due stati: cliccato e non cliccato.</p> <p></p> <p>Nell'esempio proposto quando si clicca il ToggleButton (evento <code>wx.EVT_TOGGLEBUTTON</code>) si mette a schermo intero  la finestra e si cambia la scritta sul pulsante (che rimane cliccato).  Cliccandolo di nuovo si ritorna alla situazione iniziale.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Fullscreen(er)\")\n        panel = wx.Panel(self)\n        self.fullScreenButton = wx.ToggleButton(panel, label=\"Metti fullscreen\", pos=(5,5), size=(150,40))\n        self.fullScreenButton.Bind(wx.EVT_TOGGLEBUTTON, self.mettiFullScreen)\n\n    def mettiFullScreen(self, evt):\n        if not self.IsFullScreen():\n            self.ShowFullScreen(True)\n            self.fullScreenButton.SetLabel(\"Esci dal fullscreen\")\n        else:\n            self.ShowFullScreen(False)\n            self.fullScreenButton.SetLabel(\"Metti fullscreen\")\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_1","title":"Esercizi","text":"<p>Esercizio 2115 (ToggleButton)</p> <p>Creare una applicazione con una finestra con titolo Ciccio che contiene un pulsante \"Toggle\". Quando clicchi il pulsante, il titolo diventa Pippo, quando lo clicchi di nuovo ritorna ad essere Ciccio e cos\u00ec via.</p> <p>Esercizio 2116 (ToggleButton)</p> <p>Creare una applicazione con una finestra che contiene un pulsante \"Toggle\".  Quando clicchi il pulsante, appare una nuova finestra vuota di fianco a questa; quando lo clicchi di nuovo la finestra scompare.</p> <p></p>"},{"location":"wx/110_widgets/#wxstatictext","title":"wx.StaticText","text":"<p>Documentazione ufficiale wx.StaticText</p> <p>Etichetta dove il programmatore pu\u00f2 inserire un testo da visualizzare all'utente.</p> <p>La classe <code>wx.StaticText</code> rappresenta una widget che implementa una etichetta dove il programmatore  pu\u00f2 inserire un testo da visualizzare all'utente.</p> <p></p> <p>Nel semplicissimo esempio proposto, viene utilizzata la widget <code>wx.StaticText</code> per visualizzare una poesia in pi\u00f9 righe.  La widget \u00e8 inserita a \"tutta finestra\".</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Soldati\")\n        panel = wx.Panel(self)\n        etichetta = wx.StaticText(panel, label = \"Si sta come\\nd'autunno\\nsugli alberi\\nle foglie\\n\")\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#wxstaticline","title":"wx.StaticLine","text":"<p>Documentazione ufficiale wx.StaticLine</p> <p>Linea decorativa, orizzontale o verticale.</p> <p>La classe <code>wx.StaticLine</code> rappresenta una widget che implementa una linea decorativa, orizzontale o verticale.</p> <p></p> <p>Inserire una <code>wx.StaticLine</code> \u00e8 veramente semplice e serve solo a scopo decorativo.  Approfitto di questa per farvi vedere come modificare il font di una <code>wx.StaticText</code> e realizzare una widget con  titolo, linea e testo, come vedete nella figura.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Poesia\")\n        panel = wx.Panel(self)\n\n        # Font grassetto di 20pt\n        bigBoldFont = wx.Font( wx.FontInfo(20).Bold() )\n        titolo = wx.StaticText(panel, label=\"Soldati\",pos=(10,10), size=(200,30))\n        titolo.SetFont(bigBoldFont)\n\n        linea = wx.StaticLine(panel, pos=(10,50), size=(200,3))\n\n        testo = \"\\nSi sta come\\nd'autunno\\nsugli alberi\\nle foglie\\n\"\n        etichetta = wx.StaticText(panel, label=testo, pos=(10,60), size=(200,150))\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#wxtextctrl","title":"wx.TextCtrl","text":"<p>Documentazione ufficiale wx.TextCtrl</p> <p>Casella di testo.</p> <p>La classe <code>wx.TextCtrl</code> rappresenta una widget che implementa una casella di testo, con vari stili supportati,  definibili in fase di inizializzazione:</p> <pre><code>casella = wx.TextCtrl( window , style=OPTIONS )\n</code></pre> <p>Cito qui i pi\u00f9 importanti:</p> Stile Descrizione (default) Linea singola di testo, digitabile dall'utente wx.TE_MULTILINE Permette alla TextCtrl di utilizzare pi\u00f9 righe wx.TE_PASSWORD Ogni carattere viene visualizzato con un asterisco wx.TE_READONLY Testo non modificabile dall'utente wx.TE_PROCESS_ENTER Gestisce il tasto INVIO come evento separato <p>Nota</p> <p>Per inserire 2 o pi\u00f9 stili nella stessa TextCtrl utilizza il <code>pipe</code> (<code>|</code>) in questo modo:</p> <pre><code># TextCtrl multilinea con gestione del pulsante INVIO\ntext = wx.TextCtrl(panel, style = wx.TE_MULTILINE | wx.TE_PROCESS_ENTER\n</code></pre> <p>la TextCtrl non ha un evento di default, ma ben due utilizzabili distintamente:</p> <ul> <li><code>wx.EVT_TEXT</code>: viene scatenato ogni volta che cambia il testo contenuto nella widget</li> <li><code>wx.EVT_TEXT_ENTER</code>: viene scatenato quando hai impostato lo stile <code>wx.TE_PROCESS_ENTER</code> e si preme INVIO nella widget</li> </ul> <p>Nell'esempio proposto ho inserito una TextCtrl con caratteri oscurati (password).  Man mano che si digita su di essa, il testo appare nella StaticText a fianco. Provate a testare l'esempio autonomamente e a modificare il codice per visualizzare ci\u00f2 che \u00e8 stato digitato solo alla fine, quando si preme INVIO nella TextCtrl.</p> <p></p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"TextCtrl Examples\")\n        panel = wx.Panel(self)\n\n        self.text1 = wx.TextCtrl(panel, style=wx.TE_PASSWORD, pos=(5,5), size=(200,50))\n        self.static1 = wx.StaticText(panel, label=\"\", pos=(5,70))\n        self.text1.Bind(wx.EVT_TEXT, self.aggiornaTesto)\n\n    def aggiornaTesto(self, evt):\n        self.static1.SetLabel( self.text1.GetValue() )\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_2","title":"Esercizi","text":"<p>Esercizio 2131 (Button, StaticText, TextCtrl)</p> <p>Creare una applicazione con una finestra che contiene una StaticText, inizialmente vuota, una TextCtrl e un pulsante. Quando l'utente clicca sul pulsante, il testo contenuto nella TextCtrl viene copiato nella StaticText e la TextCtrl ripulita.</p> <p>Esercizio 2132 (TextCtrl, Button)</p> <p>Salvate questo esercizio come <code>es132.py</code> in una cartella e nella stessa creerete un file chiamato <code>testo.txt</code> contenente un testo a piacere.</p> <p>Create una Finestra con una TextCtrl multilinea vuota e un pulsante. Quando l'utente clicca il pulsante, il programma carica dal file <code>testo.txt</code> il contenuto  e lo visualizza nella TextCtrl.</p> <p></p>"},{"location":"wx/110_widgets/#wxcombobox","title":"wx.ComboBox","text":"<p>Documentazione ufficiale wx.ComboBox</p> <p>Men\u00f9 a tendina</p> <p>La classe <code>wx.ComboBox</code> rappresenta una widget che implementa un men\u00f9 a tendina</p> <p></p> <p>La ComboBox supporta i seguenti stili di lavoro:</p> Stile Descrizione (default) Linea singola di testo editabile + men\u00f9 a tendina wx.CB_READONLY Linea di testo NON editabile. wx.CB_SORT Ordina automaticamente le voci wx.TE_PROCESS_ENTER Gestisce il tasto INVIO come evento separato <p>Nell'esempio proposto vediamo una etichetta e un men\u00f9 a tendina. Selezionando una voce del men\u00f9 a tendina (evento <code>wx.EVT_COMBOBOX</code>) si modifica il contenuto dell'etichetta.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Cambia l'etichetta\")\n\n        panel = wx.Panel(self)       \n        self.etichetta = wx.StaticText(panel, label=\"seleziona una voce\", pos=(5,5), size=(200,30))\n        frutta = [\"pere\", \"mele\", \"arance\", \"banane\"]\n        self.combo = wx.ComboBox(panel, choices=frutta, style=wx.CB_READONLY, pos=(5,40), size=(200,30))\n        self.combo.Bind(wx.EVT_COMBOBOX, self.visualizzaSelezione)\n\n    def visualizzaSelezione(self, evt):\n        f = self.combo.GetValue()\n        self.etichetta.SetLabel(\"Hai selezionato: \" + f)\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_3","title":"Esercizi","text":"<p>Esercizio 2136 (TextCtrl, Button, ComboBox)</p> <p>Inserite nella finestra una ComboBox inizialmente vuota, una TextCtrl e un Button. L'utente digita qualcosa nella TextCtrl e quando clicca il pulsante, se la TextCtrl non \u00e8 vuota, aggiunge la parola alla ComboBox e pulisce la TextCtrl.</p> <p>Esercizio 2137 (Frame, ComboBox)</p> <p>la finestra presenta una ComboBox con opzioni '600x400', '800x600', 'massimizza'. Quando l'utente seleziona una delle opzioni la finestra si ridimensiona secondo quanto indicato.</p> <p>Esercizio 2138 (StaticText, ComboBox, TextCtrl, Button)</p> <p>Inserite nella finestra una StaticText con scritto \"nome\" e accanto una TextCtrl per l'inserimento. Nella riga sotto, una nuova StaticText con scritto \"cognome\" e accanto una TextCtrl per l'inserimento. Nella riga sotto una StaticText con scritto \"sesso\" e accanto una ComboBox contenente le opzioni \"M\" e \"F\". Nella riga sotto un pulsante STAMPA.</p> <p>Quando si clicca il pulsante viene creato il file \"dati.txt\" nella stessa cartella dello script python con scritto \"Signor Nome Cognome\" oppure \"Signora Nome Cognome\" a seconda del sesso selezionato.</p> <p>PS: Ovviamente sul file non dovete scrivere veramente Nome e \"Cognome*...</p> <p></p>"},{"location":"wx/110_widgets/#wxcheckbox","title":"wx.CheckBox","text":"<p>Documentazione ufficiale wx.CheckBox</p> <p>Casella di spunta.</p> <p>La classe <code>wx.CheckBox</code> rappresenta una widget che implementa una casella di spunta, tipicamente di forma squadrata.</p> <p></p> <p>Nell'esempio proposto abbiamo una sola casella di spunta che quando viene abilitata imposta lo sfondo rosso della finestra, riportando quello originale se deselezionata.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Cambia il colore di sfondo\")\n        self.panel = wx.Panel(self)\n\n        self.color = self.panel.GetBackgroundColour()\n\n        self.check = wx.CheckBox(self.panel, label=\"sfondo rosso\", pos=(5,5))\n        self.check.Bind(wx.EVT_CHECKBOX, self.cambiaSfondo)\n\n    def cambiaSfondo(self, evt):\n        if self.check.GetValue():\n            self.panel.SetBackgroundColour(\"red\")\n            self.check.SetForegroundColour(\"white\")\n        else:\n            self.panel.SetBackgroundColour(self.color)\n            self.check.SetForegroundColour(\"black\")\n\n        self.Refresh()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_4","title":"Esercizi","text":"<p>Esercizio 2141 (StaticText, CheckBox)</p> <p>Serie di 5 CheckBox con una selezione di cibi (es: pasta, pizza, etc...). Man mano che l'utente seleziona cibi la StaticText sotto alle CheckBox si aggiorna mostrando tutti i cibi selezionati.</p> <p>Esercizio 2142 (StaticText, CheckBox)</p> <p>Identico all'esercizio precedente, ma la StaticText non visualizza il testo delle CheckBox selezionate ma il numero di queste. Ad esempio all'inizio vi sar\u00e0 scritto \"0 CheckBox selezionate\" e il numero crescer\u00e0 o diminuir\u00e0 a seconda che vengono attivate o no le CheckBox.</p> <p>Esercizio 2143 (Button, CheckBox)</p> <p>la finestra contiene 3 pulsanti: il primo massimizza la finestra, il secondo la iconizza sulla barra delle applicazioni, il terzo la chiude. Sotto i pulsanti ci sono 3 CheckBox che corrispondono ognuna ad un pulsante: se la CheckBox \u00e8 spuntata, il pulsante corrispondente \u00e8 abilitato, altrimenti \u00e8 disabilitato. Fate attenzione a sincronizzare la spunta sulla CheckBox con l'abilitazione del pulsante corrispondente e viceversa.</p> <p>Esercizio 2144 (Frame, ComboBox, CheckBox)</p> <p>Dichiarate una tupla di valori qualsiasi e con essa create sia una ComboBox che elenca tutti gli elementi della tupla, sia una serie di CheckBox, una per ogni valore della tupla. Quando l'utente seleziona uno dei valori della ComboBox, la CheckBox corrispondente cambia stato, venendo spuntata oppure no a seconda del suo stato precedente.</p> <p>PS: se non avete pensato ad usare un dizionario... beh... ricominciate a pensare!</p> <p></p>"},{"location":"wx/110_widgets/#wxradiobutton","title":"wx.RadioButton","text":"<p>Documentazione ufficiale wx.RadioButton</p> <p>Casella selezionabile in maniera mutualmente esclusiva.</p> <p>La classe <code>wx.RadioButton</code> rappresenta una widget che implementa una casella, tipicamente rotonda, selezionabile in maniera mutualmente esclusiva.</p> <p></p> <p>Per definire il comportamento tipico dei RadioButton della mutua esclusivit\u00e0 si deve dichiarare nella prima widget lo stile <code>wx.RB_GROUP</code>: tutte le RadioButton seguenti faranno parte del gruppo del primo. Se si vuole iniziare un nuovo gruppo,  baster\u00e0 inserire di nuovo lo stile necessario.</p> <p>Nell'esempio proposto saranno inserite 2 radio buttons per selezionare il sesso (M/F).  Al click su una di loro (evento <code>wx.EVT_RADIOBUTTON</code>) l'altra si deselezioner\u00e0 automaticamente e l'etichetta sotto verr\u00e0 aggiornata.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Seleziona una opzione\")\n        panel = wx.Panel(self)\n\n        self.rbM = wx.RadioButton(panel, label=\"Maschio\", style=wx.RB_GROUP, pos=(5,5))\n        self.rbF = wx.RadioButton(panel, label=\"Femmina\", pos=(5,35))\n        self.testo = wx.StaticText(panel, label=\"Voce selezionata: Maschio\", pos=(5,65))\n\n        self.rbM.Bind(wx.EVT_RADIOBUTTON, self.impostaSesso)\n        self.rbF.Bind(wx.EVT_RADIOBUTTON, self.impostaSesso)\n\n    def impostaSesso(self, evt):\n        if self.rbM.GetValue():\n            self.testo.SetLabel(\"Hai selezionato: Maschio\")\n        else:\n            self.testo.SetLabel(\"Hai selezionato: Femmina\")\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_5","title":"Esercizi","text":"<p>Esercizio 2146 (RadioButton, StaticText)</p> <p>Implementare un testo con domanda: Dimmi come vieni a scuola e un elenco di opzioni a vostra scelta, tra cui ad esempio auto, moto, bici, bus, etc.. Sotto a questo, un'altra StaticText, che alla selezione di un mezzo di trasporto selezioner\u00e0 la scritta: vieni a scuola in MEZZODITRASPORTO.</p> <p>Esercizio 2147 (TextCtrl, RadioButton, Button, StaticText)</p> <p>Applicazione con una TextCtrl per inserire il nome e un RadioButton per selezionare il sesso (opzioni Maschio, Femmina) pi\u00f9 un pulsante e una StaticText. Al click sul pulsante va visualizzata nella StaticText la scritta Buongiorno signor NOME oppure Buongiorno signora NOME a seconda del sesso selezionato.</p> <p>Come ulteriore difficolt\u00e0 si pu\u00f2 aggiungere il controllo dell'ora: se il pulsante viene cliccato fra le 6 e le 14, si utilizza Buongiorno, fra le 14 e le 22 si scrive Buonasera, fra le 22 e le 6 si scrive Buonanotte.</p> <p>Esercizio 2148 (TextCtrl, RadioButton, Button)</p> <p>Applicazione con una TextCtrl e un pulsante. L'utente scrive una serie di parole separate da virgola nella TextCtrl e quando preme il pulsante appare un RadioButton con le opzioni indicate nella TextCtrl e separate da virgole.</p> <p></p>"},{"location":"wx/110_widgets/#wxslider","title":"wx.Slider","text":"<p>Documentazione ufficiale wx.Slider</p> <p>Barra di scorrimento lineare.</p> <p>La classe <code>wx.Slider</code> rappresenta una widget che implementa un cursore ad avanzamento lineare.</p> <p></p> <p>Nell'esempio proposto ho implementato uno slider che va da 0 a 10 (il range predefinito \u00e8 0-100) e ho impostato il valore iniziale a 5.  Sotto c'\u00e8 una etichetta che si aggiorna automaticamente quando si muove lo slider (evento <code>wx.EVT_SLIDER</code>)</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Muovi lo slider\")\n        panel = wx.Panel(self)\n        self.slide = wx.Slider(panel, pos=(5,5), size=(250,-1))\n        self.slide.SetRange(0,10)\n        self.slide.SetValue(5)\n        self.testo = wx.StaticText(panel, label=\"Valore: 5\", pos=(5,35))\n\n        self.slide.Bind(wx.EVT_SLIDER, self.aggiornaValore)\n\n    def aggiornaValore(self, evt):\n        v = self.slide.GetValue()\n        self.testo.SetLabel(\"Valore: \" + str(v))\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_6","title":"Esercizi","text":"<p>Esercizio 2151 (Slider, StaticText)</p> <p>Inserite nella finestra uno Slider che va da 1 a 10 e aggiungete una StaticText che visualizza il suo valore aggiornato in tempo reale.</p> <p>Esercizio 2152 (TextCtrl, Button, Slider)</p> <p>Inserite nella finestra due coppie TextCtrl/Button. La prima coppia decide il valore minimo dello Slider, la seconda coppia il valore massimo. I pulsanti aggiornano lo stato dello Slider.</p> <p>Esercizio 2153 (Slider, Button)</p> <p>Inserite nella finestra due Slider, uno orizzontale che va da 200 a 800 per la larghezza e uno verticale che va da 100 a 500 per l'altezza. L'utente muove gli slider a piacimento e quando clicca il pulsante si modifica la dimensione della finestra.</p> <p></p>"},{"location":"wx/110_widgets/#wxspinctrl","title":"wx.SpinCtrl","text":"<p>Documentazione ufficiale wx.SpinCtrl</p> <p>Selettore numerico con pulsanti di avanzamento.</p> <p>La classe <code>wx.SpinCtrl</code> rappresenta una widget che implementa un selettore numerico con pulsanti di avanzamento.</p> <p></p> <p>Nell'esempio proposto quando muovo il controllo della <code>wx.SpinCtrl</code> l'etichetta si aggiorna automaticamente (evento <code>wx.EVT_SPINCTRL</code>). Come ormai tradizione in questi esempi, approfitto di una widget facile per introdurre una piccola novit\u00e0: Il pulsante a due stati serve per abilitare e disabilitare la widget. Provate!</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Seleziona numero\")\n        panel = wx.Panel(self)\n        self.spin = wx.SpinCtrl(panel, value=\"0\", pos=(5,5), size=(150,30))\n        self.spin.SetRange(-10,10)\n        self.testo = wx.StaticText(panel, label=\"Valore: 0\", pos=(5,45), size=(150,30))\n        self.pulsante = wx.ToggleButton(panel, label=\"Blocca spin\", pos=(5,85), size=(150,30))\n\n        self.spin.Bind(wx.EVT_SPINCTRL, self.aggiornaValore)\n        self.pulsante.Bind(wx.EVT_TOGGLEBUTTON, self.bloccaSpinCtrl)\n\n    def aggiornaValore(self, evt):\n        v = self.spin.GetValue()\n        self.testo.SetLabel(\"Valore: \" + str(v))\n        return\n\n    def bloccaSpinCtrl(self, evt):\n        if self.pulsante.GetValue():\n            self.spin.Enable(False)\n            self.pulsante.SetLabel(\"Sblocca\")\n        else:\n            self.spin.Enable(True)        \n            self.pulsante.SetLabel(\"Blocca spin\")\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#esercizi_7","title":"Esercizi","text":"<p>Esercizio 2156 (SpinCtrl, Button, StaticText)</p> <p>Inserite nella finestra una SpinCtrl per inserire un intero fra 1 e 10. Quando si clicca il pulsante nella StaticText sotto appare il countdown dal numero selezionato fino a zero.</p> <p>Esercizio 2157 (SpinCtrl...)</p> <p>Un altro esercizio con la SpinCtrl</p> <p></p>"},{"location":"wx/110_widgets/#wxstaticbox","title":"wx.StaticBox","text":"<p>Documentazione ufficiale wx.StaticBox</p> <p>Contenitore decorativo con bordo.</p> <p>La classe <code>wx.StaticBox</code> rappresenta una widget che implementa una decorazione per raggruppare le widget.  Utile per organizzare il layout.</p> <p></p> <p>Nell'esempio proposto vediamo come la StaticBox, con etichetta \"Informazioni Personali\" serva a raggruppare logicamente le widget che permettono all'utente di inserirli. Non sapendo ancora organizzare un layout (lo vedremo a breve!!!) voglio farvi notare che gli oggetti sono dentro la StaticBox solo perch\u00e9 a livello di dimensione essa riesce a contenerli tutti tranne il pulsante in fondo!!!</p> <p>Provate a giocare un p\u00f2 con i valori del parametro <code>size</code> per rendervene conto.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Esempio con StaticBox\")\n        panel = wx.Panel(self)\n        self.box = wx.StaticBox(panel, label='Informazioni personali', pos=(5, 5), size=(240, 170))\n        self.sex = wx.CheckBox(panel, label='Maschio', pos=(15, 30))\n        self.married = wx.CheckBox(panel, label='Sposato', pos=(15, 55))\n        self.text = wx.StaticText(panel, label='Et\u00e0', pos=(15, 95))\n        self.age = wx.SpinCtrl(panel, value='1', pos=(55, 90), size=(120, -1), min=1, max=120)\n\n        self.button = wx.Button(panel, label=\"Chiudi\", pos=(90, 185), size=(120, -1))\n        self.button.Bind(wx.EVT_BUTTON, self.chiudi)\n\n    def chiudi(self, evt):    \n        self.Close()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/110_widgets/#wxlistbox","title":"wx.ListBox","text":"<p>Documentazione ufficiale wx.ListBox</p> <p>Lista verticale di elementi di testo.</p> <p>La classe <code>wx.ListBox</code> rappresenta una widget che implementa una lista di voci selezionabili in maniera singola o multipla.</p> <p></p> <p>Questa widget supporta 2 eventi considerabili di default:</p> <ul> <li><code>wx.EVT_LISTBOX</code>: scatenato quando si seleziona un elemento della lista</li> <li><code>wx.EVT_LISTBOX_DCLICK</code>: scatenato quando si fa doppio click su un elemento della lista</li> </ul> <p>Come al solito vediamo il codice che genera l'immagine che vedete sopra:</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"ListBox (ce l'ho con la frutta...)\")\n        panel = wx.Panel(self)\n        frutta = [\"pere\", \"mele\", \"arance\", \"banane\"]\n        self.list = wx.ListBox(panel, choices=frutta, pos=(10,10), size=(200,300))\n        self.etichetta = wx.StaticText(panel, pos=(250,10), size=(200,50))\n        self.list.Bind(wx.EVT_LISTBOX, self.updateLabel)\n\n    def updateLabel(self, evt):\n        index = self.list.GetSelection()\n        self.etichetta.SetLabel( self.list.GetString(index) )\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Provate a cambiare l'evento nel Bind per vedere la differenza di funzionamento.</p>"},{"location":"wx/110_widgets/#esercizi_8","title":"Esercizi","text":"<p>Esercizio 2166 (ListBox, Button, StaticText)</p> <p>Inserite nella finestra una ListBox con una sequenza di voci e la possibilit\u00e0 di selezionarne contemporaneamente pi\u00f9 di una. Quando l'utente clicca il pulsante nella StaticText vengono visualizzate tutte le voci selezionate, separate da virgola.</p> <p>Esercizio 2167 (ListBox, TextCtrl, Button)</p> <p>Inserite nella finestra una ListBox inizialmente vuota, una TextCtrl e un pulsante. L'utente digita qualcosa nella TextCtrl e quando clicca il pulsante, se la TextCtrl non \u00e8 vuota, aggiunge la parola alla ListBox e pulisce la TextCtrl.</p> <p>Esercizio 2168 (ListBox, Button)</p> <p>Inserite nella finestra una ListBox vuota e un pulsante. Quando l'utente clicca il pulsante, il programma carica dal file dati.txt presente nella stessa cartella (dovete crearlo voi, con una parola ogni riga: ogni riga del file diventer\u00e0 una voce nella ListBox).</p> <p></p>"},{"location":"wx/120_layout/","title":"Gestione del Layout","text":"<p>Il layout management, ovvero la gestione del posizionamento delle widget all'interno della finestra \u00e8 l'arte di collocare gli oggetti tramite strumenti che permettano un posizionamento semplice e allo stesso tempo all'applicazione di avere elasticit\u00e0 nei movimenti e nei ridimensionamenti.</p> <p>Invece di chiacchierare oltre, partiamo con un esempio: ricordate la solita finestrella con pulsante chiudi collegato in un certo punto con una certa dimensione? Bene! Vi ripropongo il codice che abbiamo gi\u00e0 visto un paio di volte:</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Chiudi\")\n        pannello = wx.Panel(self)\n        self.pulsante = wx.Button(pannello, label=\"Chiudi\", pos=(100,100), size=(150,40))\n        self.pulsante.Bind(wx.EVT_BUTTON, self.chiudiFinestra)\n\n    def chiudiFinestra(self, evt):\n        self.Close()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Ok... questa \u00e8 l'immagine della finestra creata con questo codice:</p> <p></p> <p>Bene, adesso invece di cliccare sul pulsante provate a ridimensionare la finestra... visto cosa succede? Il pulsante rimane fermo nella sua posizione senza ridimensionarsi o spostarsi minimamente e viene presto coperto dalla finestra contenitrice, anche se avrebbe spazio a sinistra per rendersi visualizzabile.</p> <p></p> <p>Infatti con il posizionamento assoluto, ovvero inserendo le widget con pos e size, il contenitore (ovvero la finestra con bordo) non ha voce in capitolo sul posizionamento delle widget contenute. Immaginate una finestra con parecchie widget, un disastro!!</p> <p>Per implementare correttamente un layout in wxPython dobbiamo ricorrere ai contenitori di ridimensionamento (sizers)!!!  Questi oggetti (non grafici) possono contenere oggetti grafici secondo una disposizione a fila o a griglia e organizzano la dimensione del contenente (tipicamente la finestra o il pannello) in base alle dimensioni del contenuto (tipicamente... le widgets). Questi contenitori presentano una serie di caratteristiche comuni:</p> <ul> <li> <p>Una dimensione minima: che \u00e8 tipicamente identica alla dimensione iniziale delle widget contenute in esso    ma che pu\u00f2 essere esplicitata dal programmatore tramite codice.</p> </li> <li> <p>Un bordo: uno spazio vuoto utile solo a distanziare minimamente le widgets dal bordo reale del contenitore (la finestra o altro).    Il programmatore ha pieno controllo di esso nelle quattro direzioni.</p> </li> <li> <p>Un allineamento: questo \u00e8 tipicamente il compito principale del sizer. Ogni sizer induce un allineamento caratteristico.    Li vedremo nel dettaglio studiandoli uno ad uno.</p> </li> <li> <p>Un fattore di allungamento: una caratteristica che controlla il ridimensionamento delle widgets quando viene ridimensionato    il loro contenitore. Cosa succede se aumentiamo la larghezza di una finestra in cui abbiamo oggetti gestiti da un sizer?    Questo parametro regola il comportamento degli stessi in questo caso.</p> </li> </ul> <p>La libreria wxPython offre i seguenti oggetti per gestire il layout:</p> Sizer Descrizione wx.BoxSizer Contenitore per una riga (o una colonna) di widget wx.StaticBoxSizer Come il Box Sizer ma con un contorno evidenziato (una StaticBox) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - wx.GridSizer Contenitore a tabella per le widget wx.FlexGridSizer Contenitore a tabella per le widget con dimensioni variabili wx.GridBagSizer Contenitore a tabella con spanning <p>Prima di iniziare a preoccuparvi, sappiate che i contenitori sono solo di 2 tipi:</p> <ol> <li>Contenitori a fila, come il Sizer <code>wx.BoxSizer</code> che pu\u00f2 essere impostato in senso orizzontale oppure verticale o come     <code>wx.StaticBoxSizer</code>, che funziona esattamente come il precedente con la differenza di avere un contorno evidenziato intorno: un     abbellimento e nulla pi\u00f9.</li> <li>Contenitori a griglia, che determinano una organizzazione tabellare (pensate ad una calcolatrice, o a un form da compilare).     Il primo, <code>wx.GridSizer</code> \u00e8 quello pi\u00f9 semplice; gli altri due aggiungono alcune caratteristiche avanzate di cui ci renderemo conto     negli esempi sotto.</li> </ol> <p>Ok, proviamo a vedere come funziona ognuno di questi, partendo dalle loro caratteristiche e vedendoli all'opera con qualche esempio di codice.</p>"},{"location":"wx/120_layout/#boxsizer","title":"BoxSizer","text":"<p>Documentazione ufficiale wx.BoxSizer</p> <p>Contenitore per una riga (o una colonna) di widget</p> <p>La classe <code>wx.BoxSizer</code> pu\u00f2 essere utilizzata per creare un layout orizzontale oppure verticale.</p> <pre><code># se vuoi un layout orizzontale\nhBox = wx.BoxSizer( wx.HORIZONTAL )   \n\n# se vuoi un layout verticale\nvBox = wx.BoxSizer( wx.VERTICAL )   \n</code></pre> <p>E fino a qui \u00e8 molto semplice.</p> <p>Per aggiungere widget al layout bisogna utilizzare la funzione Add che presenta una serie di opzioni che determinano come le widget si allargheranno nello spazio disponibile e metteranno bordo fra di loro. Vediamo la sintassi:</p> <pre><code>box.Add(widget, proportion = 0, flag = 0, border = 0)\n</code></pre> <p>Vediamo i parametri:</p> <ul> <li> <p>widget \u00e8 la widget da inserire</p> </li> <li> <p>proportion pu\u00f2 essere 0,1,2</p> <ul> <li>0 (valore di default) significa che la widget non si ridimensioner\u00e0</li> <li>1 significa che la widget si ridimensioner\u00e0 nella direzione del layout proporzionalmente al suo contenitore</li> <li>2 significa che la widget cercher\u00e0 di occupare il doppio del posto di quelle con valore 1</li> </ul> </li> <li> <p>flag permette di decidere come la widget deve comportarsi all'interno del layout.</p> <p>Diciamo subito che esistono 3 tipi di flag: il flag di espansione, i flag di allineamento e i flag di bordo.</p> <p>Il flag di espansione \u00e8 alternativo ai flag di allineamento: entrambi governano il posizionamento dell'oggetto nella direzione ortogonale al layout. Il flag di espansione dice alla widget di occupare tutto lo spazio; i flag di allineamento la posizionano senza espansione ortogonale.  Vediamo i flag:</p> <ul> <li>wx.EXPAND: widget espansa su tutto lo spazio disponibile (ortogonalmente nel caso di un sizer lineare, nelle due direzioni per un sizer a griglia)</li> </ul> <p></p> <p>Ecco invece i flag di allineamento:</p> <p></p> <p>In un layout orizzontale, gli allineamenti disponibili sono:</p> <ul> <li>wx.ALIGN_TOP, incolonnata in alto</li> <li>wx.ALIGN_BOTTOM, incolonnata in basso</li> <li>wx.ALIGN_CENTER_VERTICAL, allineamento verticale al centro</li> </ul> <p></p> <p>In un layout verticale, gli allineamenti disponibili sono:</p> <ul> <li>wx.ALIGN_LEFT, allineata a sinistra</li> <li>wx.ALIGN_RIGHT, allineata a destra</li> <li>wx.ALIGN_CENTER_HORIZONTAL, allineamento orizzontale al centro</li> </ul> <p></p> <p>In un layout a griglia funzionano tutti gli allineamenti indicati e in pi\u00f9 il seguente:</p> <ul> <li>wx.ALIGN_CENTER, allineamento centrato orizzontalmente e verticalmente</li> </ul> <p></p> <p>I flag di bordo possono decidere la direzione del bordo fra una widget e l'altra:</p> <ul> <li>wx.TOP: bordo verso l'alto</li> <li>wx.RIGHT: bordo verso destra</li> <li>wx.BOTTOM: bordo verso il basso</li> <li>wx.LEFT: bordo verso sinistra</li> <li>wx.ALL: bordo in tutte le direzioni</li> </ul> <p></p> <p>Va detto che \u00e8 possibile combinare 2 o pi\u00f9 flag con il simbolo \"|\" (la barra verticale, si chiama pipe). Vediamo qualche esempio:</p> </li> </ul> <pre><code># bordo in alto e a sinistra con la widget in espansione\n... flag = wx.TOP | wx.LEFT | wx.EXPAND ... \n\n# widget allineata a destra con 10 pixel di bordo\n... flag = wx.ALIGN_RIGHT | wx.RIGHT, border = 10 )\n</code></pre> <ul> <li>border rappresenta la dimensione in pixel del bordo della widget, nelle direzioni indicate dai flag di bordo    (se non ci sono flag di bordo, \u00e8 un parametro inutile).</li> </ul> <p>Quando hai finito di lavorare con layout e widget devi applicare il layout al suo contenitore,  che nei nostri esempi sar\u00e0 sempre un pannello, quindi dovrai fare una cosa del genere:</p> <pre><code># ...\n# per inserire il BoxSizer come layout del Panel\npanel.SetSizer(box)\n</code></pre> <p>Importante!!!</p> <p>Questa cosa qui sopra di collegare il layout principale al pannello contenitore \u00e8 molto molto molto molto molto molto importante. Del tipo... o ti ricordi, o non funziona nulla.</p> <p>Fai tu...</p> <p>Sono tante piccole cose insieme... necessitano di qualche esempio e qualche esercizio per chiarirci le idee.</p> <p>Il prossimo codice crea un layout orizzontale con 2 pulsanti che vogliamo ridimensionarsi con la finestra (quindi proportion = 1)  e con un pochino di bordo in tutte le direzioni.</p> Layout Orizzontale<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"BoxSizer Orizzontale\")\n        panel = wx.Panel(self)\n        box = wx.BoxSizer(wx.HORIZONTAL)\n        p1 = wx.Button(panel, label=\"testo1\")\n        p2 = wx.Button(panel, label=\"testo2\")\n\n        # i 2 pulsanti si espandono allo stesso modo\n        # e hanno 5 pixel di bordo (fisso) in tutte le direzioni.\n        box.Add(p1, proportion=1, flag=wx.ALL, border=5)\n        box.Add(p2, proportion=1, flag=wx.ALL, border=5)\n\n        panel.SetSizer(box)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Il risultato del codice precedente \u00e8 questo:</p> <p></p> <p>Attenzione!</p> <p>Prima di andare avanti, proviamo a capire quello che abbiamo visto e fatto fino ad ora!  Prova a fare le seguenti modifiche al codice precedente:</p> <ul> <li>metti a 0 il valore di proportion di uno dei due pulsanti</li> <li>metti a 2 il valore di proportion di uno dei due pulsanti</li> <li>aggiungi wx.EXPAND ai flag dei pulsanti</li> <li>modifica il valore del bordo per uno dei pulsanti.</li> <li>togli wx.ALL dai flag e metti qualcuno degli altri flag disponibili</li> </ul> <p>Fatte queste prove potrai apprezzare meglio quanto appreso finora ;)</p> <p>Il prossimo esempio \u00e8 leggermente pi\u00f9 complicato (soprattutto perch\u00e9 \u00e8 pi\u00f9 lungo): mette insieme vari layout orizzontali e verticali combinandoli assieme fino ad ottenere ci\u00f2 che vedete nella prossima immagine.</p> <p>Si parte da un pannello e un layout verticale. Poi si crea man mano un layout orizzontale, si mettono le widget in esso e infine si inserisce il layout orizzontale in quello verticale principale. Ad un certo punto ho aggiunto anche degli spazi, che ho spiegato con un commento.</p> <p></p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Prova layout con BoxSizer\")\n\n        panel = wx.Panel(self)\n        vbox = wx.BoxSizer(wx.VERTICAL)\n\n        hbox1 = wx.BoxSizer(wx.HORIZONTAL)\n        st1 = wx.StaticText(panel, label=\"Cerca: \")\n        self.tc1 = wx.TextCtrl(panel)\n        hbox1.Add(st1, proportion = 0 , flag = wx.ALL, border = 5)\n        hbox1.Add(self.tc1, proportion = 1, flag = wx.ALL, border = 5)\n        vbox.Add(hbox1,proportion = 0 , flag = wx.ALL | wx.EXPAND, border = 5)\n\n        hbox2 = wx.BoxSizer(wx.HORIZONTAL)\n        st2 = wx.StaticText(panel, label=\"Risultati della ricerca\")\n        hbox2.Add(st2, proportion = 0, flag = wx.ALL | wx.ALIGN_BOTTOM, border = 5)\n        vbox.Add(hbox2,proportion = 0, flag = wx.ALL | wx.EXPAND, border = 5)\n\n        hbox3 = wx.BoxSizer(wx.HORIZONTAL)\n        self.tc2 = wx.TextCtrl(panel, style=wx.TE_MULTILINE)\n        hbox3.Add(self.tc2, proportion = 1, flag = wx.ALL | wx.EXPAND, border = 5)\n        vbox.Add(hbox3, proportion = 1, flag = wx.ALL | wx.EXPAND, border = 5)\n\n        hbox4 = wx.BoxSizer(wx.HORIZONTAL)\n        pulsanteOk = wx.Button(panel, label=\"OK\")\n        pulsanteCancel = wx.Button(panel, label=\"CANCEL\")\n        hbox4.Add(pulsanteOk, proportion = 0, flag = wx.ALL, border = 5)\n        hbox4.Add(pulsanteCancel, proportion = 0, flag = wx.ALL, border = 5)\n        vbox.Add(hbox4, proportion = 0, flag = wx.ALL | wx.ALIGN_RIGHT, border = 5)\n\n        panel.SetSizer(vbox)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Suggerimento</p> <p>Capisco perfettamente che non vi sentiate ancora in grado di implementare layout cos\u00ec complicati!  Scrivo per\u00f2 alcuni suggerimenti banali:</p> <ol> <li>scrivete sempre tutti i parametri nella funzione Add: sizer.Add(widget, proportion = 0, flag = wx.ALL, border = 5)</li> <li>partiamo da una situazione semplice: proporzione ZERO, e bordo 5 da tutti i lati.</li> <li>se qualcosa non quadra, fate una modifica per volta e guardate subito cosa succede!</li> </ol>"},{"location":"wx/120_layout/#staticboxsizer","title":"StaticBoxSizer","text":"<p>Documentazione ufficiale wx.StaticBoxSizer</p> <p>Contenitore per una riga (o una colonna) di widget con contorno evidenziato</p> <p>Lo StaticBoxSizer \u00e8 esattamente identico al BoxSizer se non per il fatto  che contiene al suo interno gi\u00e0 una StaticBox per decorare ed evidenziare il layout creato.</p> <p>A livello operativo bisogna dunque fornire, in fase di definizione, anche un genitore (per la StaticBox, solitamente un pannello) e il testo della stessa.</p> <pre><code># se vuoi una BoxSizer\nbox = wx.BoxSizer( wx.HORIZONTAL )\n\n# se vuoi una StaticBoxSizer\nsbox = wx.StaticBoxSizer( wx.HORIZONTAL, panel, \"titolo\" )\n</code></pre> <p>Negli esempi relativi al BoxSizer provate a cambiarne qualcuno con uno StaticBoxSizer per apprezzare la differenza. E poi passate al prossimo layout!</p>"},{"location":"wx/120_layout/#esercizi-boxsizer","title":"Esercizi *BoxSizer","text":"<p>Esercizio 2201 (line)</p> <p></p> <p>Esercizio 2202 (line)</p> <p></p>"},{"location":"wx/120_layout/#gridsizer","title":"GridSizer","text":"<p>Documentazione ufficiale wx.GridSizer</p> <p>Contenitore a tabella per le widget</p> <p>La classe <code>wx.GridSizer</code> pu\u00f2 essere utilizzata per creare un layout a griglia uniforme, ovvero con lo stesso spazio (pi\u00f9 o meno)  per tutte le caselle della griglia. Quando si definisce, \u00e8 possibile anche specificare un margine orizzontale e verticale  fra gli elementi della griglia.</p> <pre><code>wx.GridSizer(rows = 1, cols = 0, vgap = 0, hgap = 0)\n\n# esempio di layout a griglia con 4 righe e 3 colonne e 5 pixel di margine orizzontale e verticale\ngrid = wx.GridSizer( rows = 4 , cols = 3, vgap = 5 , hgap = 5 )\n</code></pre> <p>Applicazioni della OOP</p> <p>Ok, adesso proviamo a guadagnare punti a favore della OOP. Come si fa ad aggiungere widgets ad un GridSizer?  Esattamente con la stessa identica funzione della BoxSizer. Perch\u00e8? Beh... perch\u00e9 derivano entrambe dalla stessa classe (la classe <code>wx.Sizer</code>, che non studieremo) ed ereditano entrambe la funzione Add. </p> <p>L'unica cosa da sapere, oltre alla OOP, \u00e8 il fatto che le widget vengono aggiunte alla GridSizer tramite la funzione Add in fila,  a partire da in alto a sinistra, poi si procede in riga e terminata la riga in alto si continua sotto.</p> <p>Alla luce delle nuove conoscenze acquisite, facciamo subito una prova semplice semplice:</p> Esempio GridSizer<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"GridSizer\")\n\n        panel = wx.Panel(self)\n\n        grid = wx.GridSizer(rows = 2, cols = 2, vgap = 10, hgap = 10)\n\n        label = wx.StaticText(panel, label=\"Sono qui\")\n        pulsante = wx.Button(panel, label=\"pulsante\")\n        checkbox = wx.CheckBox(panel, label=\"Non toccarmi\")\n        radio = wx.RadioButton(panel, label=\"Ho capito\")\n\n        grid.Add(label, proportion = 0, flag=wx.ALIGN_TOP, border = 0)\n        grid.Add(pulsante, proportion = 0, flag=wx.ALIGN_CENTER, border = 0)\n        grid.Add(checkbox, proportion = 0, flag=wx.ALIGN_LEFT, border = 0)\n        grid.Add(radio, proportion = 0, flag=wx.ALIGN_BOTTOM, border = 0)\n\n        panel.SetSizer(grid)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Risultato:</p> <p></p> <p>Attenzione!</p> <p>Anche qui, prima di andare avanti, copia e incolla il primo esempio e fai i seguenti tentativi:</p> <ul> <li>metti proportion = 1 sui 4 oggetti (nella GridSizer il concetto della proporzione non funziona! Non cambia nulla!)</li> <li>sostituisci il flag del pulsante con wx.EXPAND</li> <li>aggiungi un bordo a tutti gli oggetti</li> <li>cambia gli allineamenti per tutti gli oggetti!</li> </ul> <p>Come gi\u00e0 sperimentato precedentemente, passiamo a visionare il codice e il risultato relativo ad un esempio un pochino pi\u00f9 complicato, in cui il GridSizer viene inserito dentro un layout verticale, fino a formare una pseudo calcolatrice.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"GridSizer\")\n\n        panel = wx.Panel(self)\n        vbox = wx.BoxSizer(wx.VERTICAL)\n\n        hbox1 = wx.BoxSizer(wx.HORIZONTAL)\n        self.line = wx.TextCtrl(panel)\n        hbox1.Add(self.line, proportion = 1, flag = wx.ALL, border = 5)\n        vbox.Add(hbox1, proportion = 1, flag = wx.ALL | wx.EXPAND, border = 5)\n\n        grid = wx.GridSizer(rows = 4, cols = 4, vgap = 5, hgap = 5)\n        self.labels = \"789/456*123-.0=+\"\n        for lab in self.labels:\n            btn = wx.Button(panel, label=lab)\n            grid.Add(btn, proportion = 0, flag = wx.ALL | wx.EXPAND, border = 5)\n\n        vbox.Add(grid, proportion = 0, flag = wx.ALL | wx.EXPAND, border = 5)\n\n        panel.SetSizer(vbox)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Copiate il codice, eseguite, dovreste vedere una window tipo questa.</p> <p></p> <p>Adesso per\u00f2 tornate su e ricontrollate il codice che avete copiato cercando di comprendere l'organizzazione del layout.</p>"},{"location":"wx/120_layout/#flexgridsizer","title":"FlexGridSizer","text":"<p>Documentazione ufficiale wx.FlexGridSizer</p> <p>Contenitore a tabella per le widget con dimensioni variabili</p> <p>La classe <code>wx.FlexGridSizer</code> pu\u00f2 essere utilizzata per creare un layout a griglia flessibile, ovvero con righe o colonne di dimensione diversa. Questo pu\u00f2 ritornare utile soprattutto in alcuni casi specifici, che vedremo fra un attimo.</p> <p>La definizione di un FlexGridSizer \u00e8 identica a quella di un GridSizer:</p> <pre><code>wx.FlexGridSizer(rows = 1, cols = 0, vgap = 0, hgap = 0)\n\n# esempio di layout con FlexGridSizer con 4 righe e 3 colonne e 5 pixel di margine orizzontale e verticale\ngrid = wx.FlexGridSizer( rows = 4 , cols = 3, vgap = 5 , hgap = 5 )\n</code></pre> <p>La differenza fondamentale fra un GridSizer e un FlexGridSizer \u00e8 che il GridSizer subisce un espansione in quei campi in cui le widget vengono inserite con flag wx.EXPAND, mentre il FlexGridSizer all'inizio non \u00e8 per niente allungabile: inutile mettere wx.EXPAND!</p> <p>Per permettere ad un FlexGridSizer di espandere una riga o una colonna bisogna indicarlo esplicitamente con una delle seguenti funzioni:</p> <pre><code># Permette di allungare una riga\nAddGrowableRow(rowNumber)\n\n# Permette di allungare una colonne\nAddGrowableCol(colNumber)\n</code></pre> <p>Nell'esempio che segue viene utilizzato un FlexGridSizer per permettere di allungare la seconda colonna e la terza riga (ricordate che si inizia a contare da ZERO!!!)</p> <p></p> Esempio FlexGridSizer (notate l'utilizzo delle Growable...)<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"FlexGridSizer\")\n\n        panel = wx.Panel(self)\n\n        flex = wx.FlexGridSizer(rows=4, cols=2, vgap=5, hgap=5)\n\n        mailText = wx.StaticText(panel, label=\"Mail\")\n        flex.Add(mailText, proportion=0, flag=wx.ALL, border=5)\n\n        mailTextControl = wx.TextCtrl(panel)\n        flex.Add(mailTextControl, proportion=0, flag=wx.EXPAND|wx.ALL, border=5)\n\n        titolo = wx.StaticText(panel, label=\"Titolo\")\n        flex.Add(titolo, proportion=0, flag=wx.ALL, border=5)\n\n        titoloTextControl = wx.TextCtrl(panel)\n        flex.Add(titoloTextControl, proportion=0, flag=wx.EXPAND|wx.ALL, border=5)\n\n        testo = wx.StaticText(panel, label=\"Testo\")\n        flex.Add(testo, proportion=0, flag=wx.ALL, border=5)\n\n        testoTextControl = wx.TextCtrl(panel, style=wx.TE_MULTILINE)\n        flex.Add(testoTextControl, proportion=0, flag=wx.EXPAND|wx.ALL, border=5)\n\n        vuota = wx.StaticText(panel, label=\"\")\n        flex.Add(vuota,proportion=0, flag=wx.ALL, border=5)\n\n        pulsante = wx.Button(panel, label=\"INVIA\")\n        flex.Add(pulsante,proportion=0, flag=wx.EXPAND|wx.ALL, border=5)\n\n        flex.AddGrowableRow(2)\n        flex.AddGrowableCol(1)\n\n        self.SetMinSize( (200,300) )\n        panel.SetSizer(flex)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/120_layout/#gridbagsizer","title":"GridBagSizer","text":"<p>Documentazione ufficiale wx.GridBagSizer</p> <p>Contenitore a tabella con spanning</p> <p>La classe <code>wx.GridBagSizer</code> implementa il contenitore pi\u00f9 flessibile in wxPython e un concetto analogo risulta presente in molti altri toolkit grafici: in questo Sizer infatti, le widget possono occupare qualunque posizione e comprendere anche pi\u00f9 di una riga o una colonna.</p> <p>Si definisce senza precisare il numero di righe e colonne, ma solo lo spazio fra queste:</p> <pre><code>wx.GridBagSizer( vgap , hgap )\n</code></pre> <p>In questo Sizer \u00e8 stato reimplementato il metodo Add, l'unico utilizzabile per inserirvi elementi</p> <pre><code>bag = wx.GridBagSizer( vgap=5, hgap=5 )\nbag.Add ( widget , pos = (row,column) , span = wx.DefaultSpan, flag = 0, border = 0)\n</code></pre> <p>Vediamo i parametri:</p> <ul> <li>widget \u00e8 la widget da inserire</li> <li>pos \u00e8 la posizione della widget nella griglia. Ricordate che si     inizia a contare da ZERO.</li> <li>span indica di quanto la widget si deve allargare. Di default     occupa solo la sua casella. Prende una tupla 2D. Ad esempio     inserendo span = (2,3) dite che la widget deve allargarsi di 2 righe     e 3 colonne.</li> <li>flag e border sono gli stessi del solito.</li> </ul> <p>Di default le caselle della griglia mantengono la loro proporzione se la finestra viene ridimensionata. Se volete invece fare in modo che una riga o una colonna si comporti come nel FlexGridSizer, usate i seguenti metodi:</p> <pre><code>bag = wx.GridBagSizer( vgap=5, hgap=5 )\n\n# ...\n# numero di riga\nbag.AddGrowableRow (row)\n# ...\n# numero di colonna\nbag.AddGrowableCol (col)\n</code></pre> <p>Per concludere arriviamo finalmente all'ultimo esempio con un layout GridBagSizer. Stavolta parto dall'immagine del layout da disegnare:</p> <p></p> <p>L'idea con cui realizzarlo \u00e8 abbastanza semplice: provate a dividere con qualche linea immaginaria il layout in questione e a formulare un piano d'azione. In questo primo esempio ho provato io a darvi un'idea di come potete organizzare.</p> <p></p> <p>Concludo con qualche appunto prima di farvi vedere il codice (che a questo punto dovreste gi\u00e0 immaginare):</p> <ul> <li>gli oggetti che non hanno span o che non capitano in righe o colonne growable non hanno bisogno di wx.EXPAND</li> <li>gli oggetti che hanno span o che capitano in righe o colonne growable, per essere loro stessi espandibili, hanno bisogno di wx.EXPAND</li> <li>la riga e la colonna growable (almeno una per dimensione) rendono il layout fluido: per verificarlo, provate a commentare quelle righe</li> </ul> <p>Ecco il codice che implementa quest'ultimo esempio:</p> Esempio GridBagSizer<pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"GridBagSizer\")\n\n        panel = wx.Panel(self)\n        bag = wx.GridBagSizer(vgap=5, hgap=5)\n\n        text = wx.StaticText(panel, label=\"Inserisci nome: \")\n        bag.Add(text, pos=(0,0), flag=wx.ALL, border=5)\n\n        tc = wx.TextCtrl(panel)\n        bag.Add(tc, pos=(1,0), span=(1,4), flag=wx.ALL | wx.EXPAND, border=5)\n\n        buttonOk = wx.Button(panel, label=\"Ok\")\n        buttonClose = wx.Button(panel, label=\"Close\")\n        bag.Add(buttonOk, pos=(3,2), flag=wx.ALL, border=5)\n        bag.Add(buttonClose, pos=(3,3), flag=wx.ALL, border=5)\n\n        # commenta via una di queste per volta per vedere la differenza!!!\n        bag.AddGrowableCol(1)\n        bag.AddGrowableRow(2)\n\n        panel.SetSizer(bag)\n        self.Centre()\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Suggerimenti per la creazione del layout</p> <p>Ok, state provando a creare un layout, partendo da una idea che avete e non state riuscendo... Ci sono due suggerimenti che posso darvi.</p> <p>Il primo \u00e8 quello di disegnare prima su carta il layout che volete ottenere, in modo da poter ragionare su quale Sizers possono realizzarlo pi\u00f9 correttamente.</p> <p>In questo modo dovreste riuscire ad avere l'idea giusta su come realizzare il layout. Poi scrivete il codice, lo testate... e non funziona ancora :(</p> <p>Il secondo suggerimento \u00e8 quello di utilizzare uno strumento di debug, fornito direttamente da wxPython: The Widget Inspection Tool (WIT). Ne parlo un pochino in questa pagina</p> <p>Buona lettura!</p>"},{"location":"wx/120_layout/#esercizi-gridsizer","title":"Esercizi *GridSizer","text":"<p>Esercizio 2251 (grid)</p> <p></p> <p>Esercizio 2252 (grid)</p> <p></p> <p>Esercizio 2253 (grid)</p> <p></p>"},{"location":"wx/120_layout/#layout-sizing","title":"Layout Sizing","text":"<p>Per concludere il discorso del layout non posso non dedicare qualche riga al (ri)dimensionamento delle finestre. Niente di complicato, per carit\u00e0... il ridimensionamento iniziale di una widget dovrebbe essere gestito automaticamente (cio\u00e8... senza fare nulla) se il layout viene implementato correttamente. Anzi... quando la dimensione iniziale non ci soddisfa, il pi\u00f9 delle volte significa che abbiamo sbagliato qualche parametro nel layout!</p> <p>Ci sono per\u00f2 alcune scelte (poche... tranquilli) che possiamo indurre tramite codice e che possono migliorare il comportamento della nostra finestra. Vediamole una per una!</p> <p></p> wx.Window.SetMinSize &amp;&amp; wx.Window.SetMaxSize <p>Imposta la dimensione minima/massima della finestra. </p> <p>Esempio banale:</p> <pre><code># ...\nself.SetMinSize( (400,250) )\npanel.SetSizer(vbox)\n# ...\n</code></pre> <p></p> wx.Sizer.Fit(self, window) &amp;&amp; wx.Window.SetSizerAndFit(wx.Sizer) <p>La funzione Fit, disponibile in tutti i sizer, dice al sizer di ridimensionare la finestra per aderire alla dimensione minima del sizer. Va ovviamente chiamata dopo aver impostato un sizer in una finestra con SetSizer.</p> <p>\u00c8 possibile ovviare alla chiamata delle due funzioni consecutive inserendo il sizer nella finestra con SetSizerAndFit. </p> <p>Esempi banali:</p> <pre><code># ...\n# utilizza prima SetSizer e dopo Fit...\npanel.SetSizer(vbox)\nvbox.Fit(self)\n# ...\n# oppure insieme, con SetSizerAndFit\npanel.SetSizerAndFit(vbox)\n# ...\n</code></pre> <p>Volendo approfondire il comportamento dei sizer nel ridimensionamento delle finestre vi consiglio di dare un occhio alle funzioni wx.Window.ClientToWindowSize e wx.Window.WindowToClientSize. </p> <p>In generale, c'\u00e8 una parte specifica della documentazione a proposito di questo problema: https://docs.wxpython.org/window_sizing_overview.html</p> <p>Se invece pensate sia sufficiente quello che avete visto qui... passate agli esercizi del prossimo capitolo!!!</p> <p> </p>"},{"location":"wx/130_full_ex/","title":"Esercizi strutturati","text":"<p>Negli esercizi che seguono dovete implementare layout e funzionalit\u00e0: nessuno di questi \u00e8 un esercizio banale, ma sono tutti pi\u00f9 che fattibili con un minimo di organizzazione: pensate prima (magari su un foglio di carta) a come strutturare la vostra soluzione, poi dedicatevi esclusivamente a \"disegnare\" l'interfaccia, infine implementate le funzionalit\u00e0 richieste.</p> <p>Buon lavoro!</p> <p>Esercizio 2301 (Sommatore)</p> <p></p> <p>In questa applicazione bisogna implementare una widget per fare le somme. Sar\u00e0 l'occasione per ragionare un p\u00f2 sui layout e per curiosare un pochino nella documentazione degli oggetti utilizzati.</p> <p>Come vedete, si parte con un layout verticale in cui sono inseriti una serie di layout orizzontali contenenti gli oggetti... Per quanto riguarda l'implementazione, vi voglio far notare che i dati nelle TextCtrl sono comunque stringhe, quindi quando li prendete dovete convertirli in int (oppure in float), poi potete sommarli e infine, per visualizzarli dovete ritrasformare il risultato in una stringa.</p> <p>Esercizio 2302 (Calcolatrice)</p> <p></p> <p>Evoluzione del programma sommatore. Nella calcolatrice \u00e8 presente anche un layout a griglia. La TextCtrl \u00e8 impostata in modalit\u00e0 READONLY e ogni pulsante ha la sua ovvia funzione. Copiate il funzionamento da una calcolatrice tradizionale. La nostra dovr\u00e0 comportarsi in maniera esattamente identica!!</p> <p>Esercizio 2303 (Lista spesa)</p> <p></p> <p>La lista della spesa \u00e8 poco pi\u00f9 di un semplice esercizio sulla ListBox. Menzione particolare al layout, nel mio caso implementato con un'unica BagSizer. Attenzione alle righe e alle colonne da far allargare!</p> <ul> <li>pulsante INSERISCI: aggiunge la voce presente nella TextCtrl (se non     vuota) e la pulisce.</li> <li>pulsante CANCELLA: elimina la voce selezionata della ListBox (oppure     nulla, se nulla \u00e8 selezionato)</li> <li>pulsante CHIUDI: chiude l'applicazione</li> </ul> <p>Aggiungo 2 livelli di difficolt\u00e0 (opzionali):</p> <ol> <li>il pulsante CANCELLA disabilitato all'inizio e abilitato solo se     c'\u00e8 una voce selezionata nella ListBox.</li> <li>Invece di CHIUDI, implementare SALVA E CHIUDI che prima di chiudere     l'applicazione salva i dati nel file lista_della_spesa.txt sul     Desktop dell'utente. I dati vanno salvati uno per riga.</li> </ol> <p>Esercizio 2304 (Tic Tac Toe)</p> <p></p> <p>Il Tic Tac Toe non \u00e8 nient'altro che il gioco del Tris! Implementate una griglia di 9 pulsanti con etichetta nulla. Cliccando su un pulsante con etichetta nulla appare la X o la O. Se scegliete un font importante sar\u00e0 molto carino!</p> <p>Per implementare la vittoria, disabilitate tutti i pulsanti e scrivete sul titolo \"HAI VINTO\" oppure \"HAI PERSO\".</p> <p>Potete implementarne due versioni (in due programmi diversi):</p> <ul> <li> <p>User vs User (pi\u00f9 facile): in questa versione si gioca in due. Il primo che     clicca mette una \"X\", quello dopo una \"O\". Ogni volta il     programma valuta chi vince!</p> </li> <li> <p>User vs CPU (pi\u00f9 complicatino...): in questa versione l'utente inizia sempre a giocare;     quando clicca su un pulsante appare la \"X\" e subito dopo il     programma valuta se l'utente ha vinto e se no fa giocare la CPU,     aggiungendo una \"O\" in una casella libera. Pi\u00f9 implementate la CPU     in maniera intelligente, pi\u00f9 sar\u00e0 divertente giocare :)</p> </li> </ul> <p>Esercizio 2305 (Fifteen puzzle)</p> <p></p> <p>Il Fifteen Puzzle o gioco del 15 si implementa con una semplice griglia in cui inserire 15 pulsanti. Per quanto riguarda le regole del gioco... faccio finta che tutti sappiate giocare e abbiate giocato almeno una volta...</p> <p>L'implementazione di ognuno pu\u00f2 essere diversa e comunque corretta, ma io voglio darvi un suggerimento: inserite non 15 ma 16 pulsanti nella griglia, riempiendola completamente! Il 16-esimo pulsante non ha etichetta e va nascosto. Ogni volta che si clicca sul pulsante vicino, quello in realt\u00e0 non si sposta, ma lo si nasconde, si fa apparire il pulsante nascosto e si copia l'etichetta dal primo sul secondo.</p> <p>Dovete implementare una funzione mischia che all'inizio prepara il gioco, far muovere i pulsanti al click e una funzione controllaSeHaiVinto che appunto ti dice se sei riuscito a riordinare il puzzle!</p> <p> </p>"},{"location":"wx/140_dialogs/","title":"Dialogs","text":"<p>Le finestre di dialogo sono strumenti indispensabili della programmazione con GUI attuale. Esse permettono una comunicazione bidirezionale fra l'applicazione e l'utente con la prima che tramite esse mostra all'ultimo informazioni ritenute importanti o richiede scelte senza le quali non si pu\u00f2 procedere oltre.</p> <p>Suggerimento</p> <p>La caratteristica delle finestre che le porta ad essere considerate finestre di dialogo \u00e8 quella di essere finestre modali, ovvero finestre che si sovrappongono alle finestre principali e non possono in alcun modo essere ignorate.</p> <p>Questa condizione si ottiene utilizzando in una finestra la funzione ShowModal() al posto della classica funzione Show().</p> <p>Esempi banali di finestre di dialogo sono la finestra di errore, la finestra di selezione file, quella per selezionare i font oppure i colori. Vediamole una per una, con un piccolo esempio per comprenderne al meglio il funzionamento.</p>"},{"location":"wx/140_dialogs/#message-dialogs","title":"Message Dialogs","text":"<p>Documentazione ufficiale wx.MessageDialog</p> <p>Finesta di dialogo per un messaggio, un avvertimento o una domanda da porre all'utente.</p> <p>Sevono per inviare un messaggio esclamativo, di avvertimento, di richiesta o di errore. Tramite la selezione di pulsanti sotto, si pu\u00f2 ottenere un feedback dall'utente per assicurarsi abbia recepito il messaggio.</p> <p></p> <pre><code>MessageDialog( parent , message , caption=TITOLO , style=STILE )\n</code></pre> <p></p> <p>I pulsanti di una MessageDialog possono essere i seguenti:</p> Valore Descrizione Valore di ritorno wx.OK Pulsante OK. Combinabile con CANCEL wx.ID_OK wx.CANCEL Pulsante CANCEL. Combinabile con OK o YES_NO wx.ID_CANCEL wx.YES_NO Pulsanti S\u00ec e No. Combinabile con CANCEL wx.ID_YES oppure wx.ID_NO wx.HELP Mostra il pulsante AIUTO wx.ID_HELP <p>Se non si preme nessun pulsante, ad esempio uscendo dalla finestra di dialogo con <code>ESC</code>, oppure con l'icona di chiusura, essa ritorna il valore <code>wx.ID_NONE</code>.</p> <p></p> <p>Lo stile pu\u00f2 contenere uno dei seguenti valori. Essi sono sovrapponibili ai pulsanti con la tecnica del pipe (il simbolo <code>|</code>), come per i flag dei Sizer.</p> Stile Descrizione wx.ICON_EXCLAMATION Mostra un icona di allerta wx.ICON_ERROR Mostra una icona di errore wx.ICON_HAND Come wx.ICON_ERROR wx.ICON_INFORMATION Mostra una icona informativa wx.ICON_QUESTION Mostra una icona a un punto di domanda <p>Vediamo qualche esempio semplice semplice:</p> <pre><code>#  Messaggio informativo\ndial = wx.MessageDialog(None, \"Ora della merenda\", \"Info\", wx.OK | wx.CANCEL)\nif dial.ShowModal() == wx.ID_OK:\n    # fai merenda\n\n# Messaggio di errore\ndial = wx.MessageDialog(None, \"Biscotti non disponibili\", \"Errore\", wx.OK | wx.ICON_ERROR)\ndial.ShowModal()\n\n# Messaggio di domanda\ndial = wx.MessageDialog(None, \"Ti andrebbe un mandarino?\", \"Domanda\", wx.YES_NO | wx.ICON_QUESTION)\nif dial.ShowModal() == wx.ID_YES:\n    # mangia il mandarino\n\n# Messaggio di avvertimento\ndial = wx.MessageDialog(None, \"Troppa nutella all'orizzonte\", \"Esclamazione\", wx.OK | wx.ICON_EXCLAMATION)\ndial.ShowModal()\n</code></pre> <p></p> <p>Attenzione!</p> <p>Ovviamente va individuato il giusto momento per visualizzare una MessageDialog:  abusare di finestre modali \u00e8 considerato fastidioso e maleducato.</p> <p></p> <p>Esercizio 2401</p> <p>Visualizzate una finestra con un pulsante che quando premuto visualizza un messaggio informativo a vostro piacere.</p> <p>Esercizio 2402</p> <p>Visualizzate una finestra vuota. Quando si clicca per chiuderla appare il messaggio di domanda \"Sicuro di voler chiudere?\". Se l'utente risponde No, la finestra non si chiude.</p> <p>Esercizio 2403</p> <p>Visualizzare una finestra con una SpinCtrl con valori da -10 a +10. Se l'utente seleziona 0, appare un messaggio di avvertimento.</p> <p></p>"},{"location":"wx/140_dialogs/#dir-dialogs","title":"Dir Dialogs","text":"<p>Documentazione ufficiale wx.DirDialog</p> <p>Finesta di dialogo per selezionare una cartella.</p> <p>Servono per selezionare una cartella (presente o no) nel proprio computer.</p> <pre><code># seleziona una dir e poi visualizza la scelta\ndlg = wx.DirDialog(None, 'Seleziona la cartella delle immagini')\nif dlg.ShowModal() != wx.ID_OK:\n    return\n\n# la stringa che contiene il percorso della cartella selezionata\npercorso = dlg.GetPath()\n# ...\n</code></pre> <p></p> <p>Esercizio 2411</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre la DirDialog che permette di selezionare la cartella. Se l'utente preme OK nella etichetta di testo si visualizzi il percorso selezionato.</p> <p>Esercizio 2412</p> <p>Visualizzare una finestra con un pulsante. Cliccando il pulsante si apre una DirDialog con la possibilit\u00e0 di selezionare cartelle non esistenti. Se l'utente ne seleziona una non esistente, il programma la crea (Sugg: ricordate il modulo Pathlib???)</p> <p></p>"},{"location":"wx/140_dialogs/#file-dialogs","title":"File Dialogs","text":"<p>Documentazione ufficiale wx.FileDialog</p> <p>Finesta di dialogo per la selezione file, in apertura o salvataggio.</p> <p>La classe FileDialog crea una finestra di selezione file. Analogamente alle DirDialog, servono per selezionare un file (esistente o no) nel proprio computer.</p> ESEMPIO 1: SELEZIONA FILE DA APRIRE<pre><code>dlg = wx.FileDialog(None, \"Apri File\", style=wx.FD_OPEN)\nif dlg.ShowModal() == wx.ID_CANCEL:\n    return\n\n# la stringa che contiene il percorso del file da aprire\npercorso = dlg.GetPath()\n</code></pre> ESEMPIO 2: SELEZIONA PERCORSO FILE SU CUI SALVARE<pre><code>dlg = wx.FileDialog(None, \"Salva File\", style=wx.FD_SAVE)\nif dlg.ShowModal() == wx.ID_CANCEL:\n    return\n\n# la stringa che contiene il percorso del file su cui fare salva\npercorso = dlg.GetPath()\n</code></pre> <p></p> <p>Esercizio 2421</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre la FileDialog che permette di selezionare un file per l'apertura. Se l'utente preme OK nella etichetta di testo si visualizzi il percorso del file selezionato.</p> <p>Esercizio 2422</p> <p>Visualizzare una finestra con un pulsante. Cliccando il pulsante si apre una FileDialog in modalit\u00e0 salva. Se l'utente ne seleziona uno non esistente, il programma lo crea vuoto (Sugg: ricordate il modulo Pathlib???)</p> <p>Esercizio 2423</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre una FileDialog in modalit\u00e0 apri. Se l'utente seleziona un file di testo e preme OK, il contenuto del file viene visualizzato nell'etichetta.</p> <p></p>"},{"location":"wx/140_dialogs/#colour-dialogs","title":"Colour Dialogs","text":"<p>Documentazione ufficiale classi per la gestione dei colori:</p> <p>wx.ColourDialog: Finesta di dialogo per selezionare un colore dalla tavolozza nativa del SO. wx.ColourData: Informazioni sui colori in utilizzo su una applicazione.</p> <p>Le finestre di dialogo per la selezione dei colori si utilizzano tramite la loro classe ausiliaria <code>wx.ColourData</code> che mantiene le informazioni iniziali necessarie per la selezione dei colori e (dopo l'esecuzione della dialog) il colore selezionato dall'utente.</p> <pre><code># ...\ndatiIniziali = wx.ColourData()\ndialog = wx.ColourDialog(self, datiIniziali)\nif dialog.ShowModal() != wx.ID_OK:\n    return\n\ndatiFinali = dialog.GetColourData()\ncoloreSelezionato = datiFinali.GetColour()\n# ...\n</code></pre> <p></p> <p>Esercizio 2431</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre una ColourDialog che permette di selezionare un colore. Visualizzarlo come stringa nella etichetta.</p> <p>Esercizio 2432</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre una ColourDialog che permette di selezionare un colore. Colorare lo sfondo dell'etichetta del colore selezionato.</p> <p>Esercizio 2433</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo con la scritta \"Colore selezionato\". Cliccando il pulsante si apre una ColourDialog che permette di selezionare un colore. Colorare il testo dell'etichetta con il colore selezionato.</p> <p></p>"},{"location":"wx/140_dialogs/#font-dialogs","title":"Font Dialogs","text":"<p>Documentazione ufficiale classi per i font:</p> <p>wx.FontDialog: Finesta di dialogo per selezionare un font dalla finestra nativa del SO. wx.FontData: Informazioni sui Font in utilizzo su una applicazione.</p> <p>Le finestre di dialogo per la selezione dei font si utilizzano tramite la loro classe ausiliaria <code>wx.FontData</code> che mantiene le informazioni iniziali necessarie per la selezione dei font e (dopo l'esecuzione della dialog) il font selezionato dall'utente. (Questa frase mi sembra di averla gi\u00e0 sentita...)</p> <pre><code># ...\ndatiIniziali = wx.FontData()\ndialog = wx.FontDialog(self, datiIniziali)\nif dialog.ShowModal() != wx.ID_OK:\n    return\n\ndatiFinali = dialog.GetFontData()\nfontSelezionato = datiFinali.GetChosenFont()\n# ...\n</code></pre> <p></p> <p>Esercizio 2441</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo inizialmente vuota. Cliccando il pulsante si apre una FontDialog che permette di selezionare un font. Visualizzarlo come stringa nella etichetta.</p> <p>Esercizio 2442</p> <p>Visualizzare una finestra con un pulsante ed una etichetta di testo con la scritta \"Font selezionato\". Cliccando il pulsante si apre una FontDialog che permette di selezionare un font. Utilizzarlo come font dell'etichetta.</p> <p>Suggerimento</p> <p>Se volete una presentazione generica di tutte le finestre di dialogo comuni presenti nella libreria wxPython ecco il link che fa per voi: https://docs.wxpython.org/common_dialogs_overview.html.</p> <p> </p>"},{"location":"wx/150_images/","title":"Immagini &amp; Icone","text":"<p>wxPython gestisce le immagini a vari livelli a seconda di quello che ci vuoi fare:</p> <ol> <li> <p>Se vuoi visualizzare una o pi\u00f9 immagini, magari con piccole funzionalit\u00e0 tipo la scala di grigi o il copia e incolla... il capitolo Immagini \u00e8 per te!!!</p> </li> <li> <p>Se vuoi visualizzare una icona da abbinare ad un pulsante, un men\u00f9 o una toolbar...  vai al capitolo Icone!!! </p> </li> <li> <p>Se vuoi realizzare un software per l'elaborazione grafica delle immagini (tipo PhotoShop)... sei nel posto sbagliato!!!</p> </li> </ol> <p>Attenzione!</p> <p>Per l'elaborazione delle immagini, wxPython si appoggia sulla libreria <code>pillow</code> (Python Image Library). </p> <p>Verifica che sia correttamente installata, ad esempio tramite l'interfaccia di gestione dei pacchetti di Thonny.</p>"},{"location":"wx/150_images/#immagini","title":"Immagini","text":"<p>Documentazione ufficiale classi per le immagini:</p> <p>wx.Bitmap: Classe per la gestione delle immagini (OOP). wx.Image: Classe per la manipolazione delle immagini (OOP). wx.StaticBitmap: Classe grafica per la visualizzazione delle immagini.</p> <p>wxPython gestisce l'interazione con le immagini tramite l'ausilio di 3 classi principali. </p> <p>La prima classe si chiama <code>wx.Bitmap</code> e una sua istanza rappresenta il cosiddetto oggetto immagine. Questa classe si occupa della relazione fra il file che contiene l'immagine, da qualche parte nel filesystem e un oggetto immagine della classe wx.</p> <p>Se vogliamo manipolare questa immagine dobbiamo generare, a parte da una Bitmap, il corrispondente oggetto <code>wx.Image</code>. Un oggetto di questa classe permette di manipolare un oggetto immagine (non il file... l'oggetto! La rappresentazione logica della stessa). Possiamo modificare cose come la dimensione, il colore, renderla in scala di grigi, abilitarla o disabilitarla, modificare il livello di trasparenza, etc... Fatto questo possiamo ricreare una Bitmap a partire da una Image modificata!</p> <p>L'ultimo oggetto, l'unico con capacit\u00e0 grafiche, si chiama <code>wx.StaticBitmap</code>: \u00e8 l'oggetto grafico da inserire in uno dei nostri layout e da abbinare alla Bitmap da visualizzare. Facile!!!</p> <p>Partiamo da qualche esempio ben commentato per prendere confidenza con il codice!</p> <p> </p> Esempio 1: visualizzare una immagine<pre><code># ...\npanel = wx.Panel(self)\n\noggettoImmagine = wx.Bitmap(\"foto.jpg\")\nwidgetImageViewer = wx.StaticBitmap(panel, bitmap=oggettoImmagine) \n# ...\n</code></pre> <p> </p> Esempio 2: visualizzare una immagine in scala di grigi<pre><code># ...\npanel = wx.Panel(self)\nwidgetImageViewer = wx.StaticBitmap(panel)\n\noggettoImmagine = wx.Bitmap(\"foto.jpg\")\nimmagine = oggettoImmagine.ConvertToImage()\nimmagineBN = immagine.ConvertToGreyscale()\noggettoImmagineBN = wx.Bitmap(immagineBN)\n\nwidgetImageViewer.SetBitmap(oggettoImmagineBN)\n# ...\n</code></pre> <p>La base ce l'avete... adesso occorre buttarsi un p\u00f2 con qualche esercizio!!!</p>"},{"location":"wx/150_images/#esercizi","title":"Esercizi","text":"<p>Esercizio 2501</p> <p>Crea una semplice interfaccia con un pannello e un StaticBitmap per visualizzare una immagine presente nella stessa cartella ove salverete il codice dell'esercizio.</p> <p>Esercizio 2502</p> <p>Crea una applicazione con 2 pulsanti allineati sopra e una StaticBitmap sotto. Con il primo pulsante si apre una finestra di selezione file per selezionare una immagine che andr\u00e0 mostrata nella StaticBitmap. Il secondo pulsante \u00e8 un ToggleButton che abilita/disabilita l'immagine selezionata.</p>"},{"location":"wx/150_images/#icone","title":"Icone","text":"<p>Documentazione ufficiale wx.ArtProvider</p> <p>Classe per la gestione dei file multimediali predefiniti del SO (immagini, icone, video, suoni, etc..)</p> <p>Se la necessit\u00e0 relativa alle immagini \u00e8 quella di visualizzare le icone nei pulsanti (e nei men\u00f9 e nelle barre degli strumenti, come impareremo fra breve) oltre a caricare le immagini direttamente tramite le Bitmap, come abbiamo appena visto, c'\u00e8 un'altra interessante soluzione: la classe <code>wx.ArtProvider</code>. </p> <p>Lungi da me tediarvi sull'idea dietro la realizzazione di una tale classe e come essa possa essere derivata per creare il proprio personale set di icone... sappiate semplicemente quello che serve: per ogni icona abbinata ad una azione comune abbiamo un ID e tramite quello possiamo creare automaticamente una Bitmap.</p> <pre><code># la variabile \"bitmap\" \u00e8 un oggetto della classe wx.Bitmap\nbitmap = wx.ArtProvider.GetBitmap( id = wx.UN_ID_FRA_QUELLI_ELENCATI_SOTTO , client=wx.UN_VALORE_PER_ILPOSIZIONAMENTO, size = wx.DefaultSize )\n</code></pre> <p>Vediamo l'elenco delle icone automaticamente supportate (in rigoroso ordine sparso):</p> Elenco Art Provider ID Disponibili wx.ART_LIST_VIEW wx.ART_NEW wx.ART_TICK_MARK wx.ART_REPORT_VIEW wx.ART_NEW_DIR wx.ART_CROSS_MARK wx.ART_FIND wx.ART_MINUS wx.ART_FOLDER wx.ART_FIND_AND_REPLACE wx.ART_PLUS wx.ART_FOLDER_OPEN wx.ART_CDROM wx.ART_EXECUTABLE_FILE wx.ART_FILE_OPEN wx.ART_FLOPPY wx.ART_MISSING_IMAGE wx.ART_FILE_SAVE wx.ART_HARDDISK wx.ART_NORMAL_FILE wx.ART_FILE_SAVE_AS wx.ART_HELP wx.ART_ERROR wx.ART_UNDO wx.ART_HELP_BOOK wx.ART_QUESTION wx.ART_REDO wx.ART_HELP_FOLDER wx.ART_WARNING wx.ART_CUT wx.ART_HELP_PAGE wx.ART_INFORMATION wx.ART_COPY wx.ART_HELP_SETTINGS wx.ART_TIP wx.ART_PASTE wx.ART_HELP_SIDE_PANEL wx.ART_GOTO_FIRST wx.ART_PRINT wx.ART_GOTO_LAST wx.ART_GO_TO_PARENT wx.ART_ADD_BOOKMARK wx.ART_GO_UP wx.ART_DEL_BOOKMARK wx.ART_GO_DOWN wx.ART_GO_BACK wx.ART_CLOSE wx.ART_GO_FORWARD wx.ART_QUIT wx.ART_GO_HOME wx.ART_GO_DIR_UP <p>E' inoltre possibile aggiungere una descrizione della posizione che l'icona dovr\u00e0 andare ad occupare. Questa scelta determiner\u00e0 anche la dimensione iniziale.</p> <p>Vediamo i valori possibili:</p> Tipi ArtProvider ID Descrizione wx.ART_TOOLBAR Icone per le toolbar (media dimensione) wx.ART_MENU Icone per i menu (piccole) wx.ART_BUTTON icone per i pulsanti (grandine) wx.ART_FRAME_ICON Icone per ... Boh! wx.ART_CMN_DIALOG Icone per le finestre di dialogo (medie) wx.ART_HELP_BROWSER Icone per i messaggi di aiuto (grandine) wx.ART_MESSAGE_BOX Icone per le message box (medie) wx.ART_OTHER Altre icone (Default) <p>Per finire, vediamo un pezzettino di codice in cui inseriamo un icona su un pulsante.</p> <pre><code># ...\npulsanteIndietro = wx.Button(panel)\npulsanteIndietro.SetLabel(\"Precedente\")\npulsanteIndietro.SetBitmap( wx.ArtProvider.GetBitmap( wx.ART_GO_BACK , wx.ART_MENU ) )\n# ...\n</code></pre> <p>Per ottenere questo:</p> <p></p> <p>Spero sia tutto chiaro!!! Chiedetemi pure... sar\u00f2 lieto di farvi fare qualche esercizio di comprensione </p> <p> </p>"},{"location":"wx/160_timer/","title":"Timer(s)","text":"<p>Documentazione ufficiale wx.Timer</p> <p>Classe per gestire i timer (con cui implementare semplici temporizzazioni)</p> <p>I Timer sono oggetti molto comuni in ogni libreria OOP. Per la scansione del tempo si appoggiano tipicamente al clock di sistema, che teoricamente scandisce il milionesimo di secondo, ma che per motivi tecnici che non sto a spiegarvi (a lezione me lo chiederete, lo so: il bello dell'inutile) \u00e8 affidabile appena al millesimo di secondo. Per quello che serve a noi, basta e avanza...</p> <p>Un Timer \u00e8 un oggetto della classe <code>wx.Timer</code> che gestisce appunto una scansione del tempo in millisecondi. Poich\u00e9 ha gi\u00e0 il suo bel daffare con questa questione del tempo vive sospeso rispetto al Main Event Loop e quindi non gestisce direttamente i suoi eventi, ma si appoggia alla sua widget parent. Detto cos\u00ec sembra complicato... vediamo un esempio commentato e capirete subito come funziona.</p> <pre><code># dichiariamo un oggetto della classe wx.Timer\n# con la nostra widget come parent\n# Manteniamo un riferimento ad esso con una variabile membro (una del tipo self.var)\n# Se nella vostra app avete 2 timer, inserite un ID\nself.timer = wx.Timer(self)\n\n# facciamo il BIND tramite la parent widget: BIND(evento, funzione, oggetto)\nself.Bind(wx.EVT_TIMER, self.funzioneDaEseguire, self.timer)\n</code></pre> <p>Ecco qua! Come avete visto non \u00e8 particolarmente complicato. Adesso il timer \u00e8 pronto e collegato alla funzione da eseguire al timeout. Ma come si fa a far partire il timer? E a fermarlo? E...</p> <p>Come vediamo fra un attimo, per attivare un timer, basta invocare la funzione Start(millisecondi). Se ad esempio invochiamo Start(100), ogni 100 millisecondi il timer generer\u00e0 un evento wx.EVT_TIMER che nel nostro esempio, scatener\u00e0 la funzioneDaEseguire.</p> <p>Se avete necessit\u00e0 di fermare questa ripetizione infinita, usate la funzione Stop(). Ultima, ma non meno importante, se avete bisogno di eseguire una sola volta la funzione dilazionata nel tempo, ad esempio fra 10 secondi, avviate il timer con la funzione StartOnce(10000).</p> <pre><code># AVVIA il TIMER\n# Il parametro \u00e8 in millisecondi. \n# Significa che questo timer generer\u00e0 un evento EVT_TIMER ogni secondo finch\u00e8 non verr\u00e0 fermato\ntimer.Start(1000)\n\n# FERMA IL TIMER\ntimer.Stop()\n\n# AVVIA IL TIMER per un'unica esecuzione\n# come Start() ma termina il timer al primo timeout\ntimer.StartOnce(millisecondi)\n</code></pre> <p>Spero sia tutto chiaro :)</p>"},{"location":"wx/160_timer/#wxgauge","title":"wx.Gauge","text":"<p>Documentazione ufficiale wx.Gauge</p> <p>Classe grafica per implementare una barra di avanzamento (orizzontale o verticale)</p> <p>La classe <code>wx.Gauge</code> rappresenta una widget che implementa una barra di avanzamento.</p> <p></p> <p>La barra di avanzamento va impostata indicando il range predefinito. In questo esempio ho messo range=10 e questo significa che la barra si caricher\u00e0 come fosse divisa in 10 pezzi. Nell'esempio presentato abbiamo un timer per far avanzare la barra di uno step automaticamente ogni secondo e 2 pulsanti per fare OK e STOP.</p> <p>Nell'esempio proposto quando si clicca OK la barra comincia a caricarsi e pu\u00f2 essere fermata cliccando STOP. Quando la barra \u00e8 carica il programma si chiude.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Quando la barra \u00e8 carica, il programma si chiude\")\n\n        self.timer = wx.Timer(self,1)\n        self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)        \n        self.conta = 0\n\n        panel = wx.Panel(self)\n        vbox = wx.BoxSizer(wx.VERTICAL)\n\n        self.barra = wx.Gauge(panel, range=10)\n        vbox.Add(self.barra, proportion=0, flag=wx.ALL|wx.EXPAND, border=10)\n\n        hbox = wx.BoxSizer(wx.HORIZONTAL)\n\n        pulsanteStart = wx.Button(panel, label=\"START\")\n        pulsanteStart.Bind(wx.EVT_BUTTON, self.OnOk)\n        hbox.Add(pulsanteStart, proportion=1, flag=wx.ALL|wx.EXPAND, border=5)\n\n        pulsanteStop = wx.Button(panel, label=\"STOP\")\n        pulsanteStop.Bind(wx.EVT_BUTTON, self.OnStop)\n        hbox.Add(pulsanteStop, proportion=1, flag=wx.ALL|wx.EXPAND, border=5)\n\n        vbox.Add(hbox, proportion=1, flag=wx.ALL|wx.EXPAND, border=5)\n        panel.SetSizer(vbox)\n        self.SetMinSize( (600,200) )\n\n    def OnTimer(self, event):\n        self.conta += 1\n        if self.conta &gt; 10:\n            self.Close(True)\n            return\n        self.barra.SetValue(self.conta)\n        return\n\n    def OnOk(self, event):\n        self.timer.Start(1000)\n        return\n\n    def OnStop(self, event):\n        self.timer.Stop()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/160_timer/#esercizi","title":"Esercizi","text":"<p>Esercizio 2601 (orologio)</p> <p>Implementare una semplice finestra con un'unica etichetta che visualizza un orologio funzionante (che scorre) con ore, minuti, secondi.</p> <p>Esercizio 2602 (cronometro)</p> <p>Implementare un cronometro con una etichetta con valore iniziale \"00:00:00\" rappresentanti rispettivamente minuti, secondi e centesimi di secondo e tre pulsanti per le funzioni START, STOP, RESET.</p> <ul> <li>START fa (ri)partire il cronometro</li> <li>STOP lo ferma.</li> <li>RESET lo (ri)imposta a ZERO</li> </ul> <p>Esercizio 2603 (semaforo)</p> <p>Applicazione con 4 immagini per 3 caselle: luce rossa, luce gialla, luce verde, luce grigia (luce spenta). Il semaforo inizia con la luce verde attiva e le altre due grigie. Ogni 5 secondi si passa allo stadio successivo (luce gialla, poi luce rossa, poi si ritorna a luce verde, all'infinito).</p> <p> </p>"},{"location":"wx/170_full_gui/","title":"GUI complete","text":"<p>In questo capitolo cercheremo di introdurre tutti quegli elementi grafici che implementano una GUI moderna: </p> <ul> <li>le azioni</li> <li>la barra dei men\u00f9</li> <li>la barra degli strumenti</li> <li>la barra di stato</li> <li>il men\u00f9 contestuale</li> <li>le impostazioni delle applicazioni</li> </ul>"},{"location":"wx/170_full_gui/#skeleton-full-gui","title":"Skeleton Full GUI","text":"<p>Lo Skeleton \u00e8 un file che contiene la struttura di base dalla quale partire per costruire qualcosa.</p> <p>Lo skeleton qui sotto descrive chiaramente una struttura da cui partire per alloggiare in maniera chiara e ben strutturata tutti gli elementi di una app Full GUI, ovvero comprensiva di azioni, men\u00f9, barre degli strumenti, etc...</p> Skeleton Full GUI<pre><code>import wx\n\nAPP_NAME = \"Il nome della vostra App\"\n\nclass Finestra(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=APP_NAME)\n\n        # La MainView\n        panel = wx.Panel(self)\n\n        vbox = wx.BoxSizer(wx.VERTICAL)\n        self.mainview = wx.StaticText(panel, label = \"cambiami con il tuo oggetto principale!!!\")\n        vbox.Add(self.mainview, proportion=1, flag=wx.EXPAND)\n\n        panel.SetSizer(vbox)\n\n        # Spazio per le variabili membro della classe\n\n\n        # Chiamata alle funzioni che generano la UI\n        self.creaMenubar()\n        self.creaToolbar()\n\n        # la statusbar \u00e8 semplice...\n        self.bar = self.CreateStatusBar()\n\n        # le ultime cose, ad esempio, i Bind, le impostazioni iniziali, etc...\n        self.Bind(wx.EVT_CLOSE, self.funzioneEsci)\n\n        # chiamata alla funzione di caricamento impostazioni\n        self.loadConfig()\n        return\n\n    # in questa funzione andremo a creare e popolare la menubar\n    def creaMenubar(self):\n        return\n\n    # in questa funzione andremo a creare e popolare la toolbar\n    def creaToolbar(self):\n        return\n\n    def loadConfig(self):\n        config = wx.FileConfig(APP_NAME)\n\n        # dimensione\n        w = int(config.Read(\"width\", \"800\")) # 678 \u00e8 la larghezza INIZIALE\n        h = int(config.Read(\"height\", \"600\")) # 432 \u00e8 la altezza  INIZIALE\n        self.SetSize(w,h)\n\n        # posizione\n        x = int(config.Read(\"x\", \"-1\")) \n        y = int(config.Read(\"y\", \"-1\")) \n        if (x,y) == (-1,-1):   # se la posizione \u00e8 (-1,-1) lo metto al centro!\n            self.Centre()\n        else:\n            self.Move(x,y)\n        return\n\n    def saveConfig(self):\n        config = wx.FileConfig(APP_NAME)\n\n        # dimensione\n        (w,h) = self.GetSize()\n        config.Write(\"width\", str(w))\n        config.Write(\"height\", str(h))\n\n        # posizione\n        (x,y) = self.GetPosition()\n        config.Write(\"x\", str(x))\n        config.Write(\"y\", str(y))\n        return\n\n    def funzioneEsci(self,evt):\n        self.saveConfig()\n        self.Destroy()\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    app.SetAppName(APP_NAME)\n    window = Finestra()\n    window.Show()\n    app.MainLoop()\n</code></pre> <p>Ok... abbiamo una struttura di base come ottimo punto di partenza per creare una applicazione con tutti gli oggetti grafici di base!</p> <p>Vediamo pezzo per pezzo come integrare cose in essa!</p>"},{"location":"wx/170_full_gui/#azioni-predefinite","title":"Azioni predefinite","text":"<p>In quanti modi diversi si pu\u00f2 fare copia e incolla?</p> <p>Con la combinazione CTRL + C... con l'icona copia sulla barra degli strumenti, con il men\u00f9 del tasto destro, con la barra in alto... Mi vengono in mente almeno 4 metodi. Probabilmente ne esistono anche altri.</p> <p>Adesso pensate un momento come foste veri programmatori:</p> <p>Ma... per ognuna di queste modalit\u00e0 occorre reimplementare un oggetto grafico e una funzione evento???</p> <p>Fortunatamente la risposta a quest'ultima domanda \u00e8 no! </p> <p>In questo contesto rientra un concetto tipico della programmazione grafica: il concetto di azione. E cosa \u00e8 un'azione?</p> <p>Una azione \u00e8 un'astrazione di una funzionalit\u00e0 che il nostro programma vuole offrire all'utente.  Viene identificata univocamente tramite:</p> <ul> <li>un nome (ad esempio: COPIA) </li> <li>una descrizione (ad esempio, COPIA il CONTENUTO NEGLI APPUNTI)</li> <li>un'icona (l'icona COPIA)</li> <li>una scorciatoia (CTRL + C)</li> </ul> <p>La libreria wxPython per assicurare uniformit\u00e0 nelle azioni pi\u00f9 comuni ha pensato bene di identificarle tramite degli ID fissi:  ad esempio l'ID per l'azione SALVA si chiama <code>wx.ID_SAVE</code>. </p> <p>Ecco l'elenco completo degli ID delle azioni comuni in wxPython:</p> Elenco ACTION ID Disponibili wx.ID_ABOUT wx.ID_EDIT wx.ID_JUMP_TO wx.ID_PRINT wx.ID_STRIKETHROUGH wx.ID_ADD wx.ID_EXECUTE wx.ID_JUSTIFY_CENTER wx.ID_PROPERTIES wx.ID_APPLY wx.ID_EXIT wx.ID_JUSTIFY_FILL wx.ID_TOP wx.ID_JUSTIFY_LEFT wx.ID_REDO wx.ID_BACKWARD wx.ID_FILE wx.ID_JUSTIFY_RIGHT wx.ID_REFRESH wx.ID_UNDELETE wx.ID_BOLD wx.ID_FIND wx.ID_REMOVE wx.ID_UNDERLINE wx.ID_BOTTOM wx.ID_FIRST wx.ID_LAST wx.ID_REPLACE wx.ID_UNDO wx.ID_FLOPPY wx.ID_REVERT_TO_SAVED wx.ID_UNINDENT wx.ID_CANCEL wx.ID_FORWARD wx.ID_NETWORK wx.ID_UP wx.ID_CDROM wx.ID_NEW wx.ID_SAVE wx.ID_CLEAR wx.ID_HARDDISK wx.ID_NO wx.ID_SAVEAS wx.ID_YES wx.ID_CLOSE wx.ID_HELP wx.ID_SELECTALL wx.ID_CONVERT wx.ID_HOME wx.ID_OK wx.ID_SELECT_COLOR wx.ID_ZOOM_100 wx.ID_COPY wx.ID_OPEN wx.ID_SELECT_FONT wx.ID_ZOOM_FIT wx.ID_CUT wx.ID_INDENT wx.ID_SORT_ASCENDING wx.ID_ZOOM_IN wx.ID_INDEX wx.ID_PASTE wx.ID_SORT_DESCENDING wx.ID_ZOOM_OUT wx.ID_DELETE wx.ID_INFO wx.ID_PREFERENCES wx.ID_SPELL_CHECK wx.ID_DOWN wx.ID_ITALIC wx.ID_PREVIEW wx.ID_STOP <p>A breve vedremo anche come utilizzarle in maniera pi\u00f9 che semplice!!!</p>"},{"location":"wx/170_full_gui/#menubar","title":"Menubar","text":"<p>Documentazione ufficiale classi MenuBar, Menu, MenuItem</p> <p>wx.MenuBar: Classe per implementare la barra dei Men\u00f9. wx.Menu: Classe per implementare un Men\u00f9. wx.MenuItem: Classe per implementare un elemento di Men\u00f9</p> <p>I men\u00f9 sono oggetti grafici che tutti conosciamo e a cui tutti siamo abituati, non c'\u00e8 bisogno di fare grandi introduzioni! </p> <p>Per aggiungere una menubar:</p> <ol> <li>lavoriamo nella funzione <code>creaMenubar</code> dello skeleton.</li> <li>prima creiamo un oggetto Menubar</li> <li>poi creiamo ogni men\u00f9 che andremo ad aggiungervi (es: File, Modifica, Visualizza, etc...)</li> <li>aggiungiamo le azioni necessarie ai nostri men\u00f9</li> <li>aggiungiamo i men\u00f9 creati alla menubar</li> <li>applichiamo la menubar alla nostra applicazione</li> </ol> <p>Vediamo degli esempi di codice:</p> Esempi di inserimento voci di men\u00f9<pre><code># creiamo un oggetto Menubar\nmb = wx.MenuBar()\n\n# crea un men\u00f9...\nfileMenu = wx.Menu()\n\n# POI aggiungi alcune azioni...\nfileMenu.Append(wx.ID_NEW)\nfileMenu.Append(wx.ID_OPEN)\n\n# altro esempio: inserimento DIRETTO di azione predefinita con TESTO e DESCRIZIONE personalizzati\nfileMenu.Append(wx.ID_SAVE, \"Salva bene :)\", \"Salva il documento corrente\")\n\n# riga di separazione: serve solo come abbellimento\nfileMenu.AppendSeparator()\n\n# creazione di un menuItem da azione predefinita, inserimento icona, aggiunta al men\u00f9\ncloseItem = wx.MenuItem(fileMenu, wx.ID_CLOSE)\ncloseItem.SetBitmap(wx.ArtProvider.GetBitmap(wx.ART_CLOSE))\nfileMenu.Append(closeItem)\n\n# altro men\u00f9...\ntoolsMenu = wx.Menu()\n\n# creazione di una azione personalizzata con ID=35\ncustomItem = wx.MenuItem(toolsMenu, 35, \"Fai qualcosa\")\ntoolsMenu.Append(customItem)\n\n# CHECK ITEM\nfullScreenItem = wx.MenuItem(toolsMenu, id=100, text=\"FullScreen\", kind=wx.ITEM_CHECK)\ntoolsMenu.Append(fullScreenItem)\n\n# PENULTIMA COSA: aggiungi i men\u00f9 alla menubar\nmb.Append(fileMenu, '&amp;File') # (La &amp; prima della F di File attiva la scorciatoia ALT + F)\nmb.Append(toolsMenu, '&amp;Tools')\n\n# INFINE!!!\nself.SetMenuBar(mb)\n</code></pre> <p>Se avete sistemato tutto al posto giusto, dovreste ottenere qualcosa di simile a questo:</p> <p></p> <p></p> <p></p> <p>Per collegare le azioni create ad una funzione (Binding) va intercettato l'evento <code>wx.EVT_MENU</code> abbinato all'ID della voce di men\u00f9 in questione:</p> <pre><code># per fare Bind dell'azione con ID = wx.ID_EXIT ad una funzione chiamata funzioneEsci\nself.Bind(wx.EVT_MENU, self.funzioneEsci, id=wx.ID_EXIT)\n\n# per fare Bind dell'azione con ID = 35 ad una funzione chiamata faiQualcosa\nself.Bind(wx.EVT_MENU, self.faiQualcosa, id=35)\n</code></pre>"},{"location":"wx/170_full_gui/#toolbar","title":"Toolbar","text":"<p>Documentazione ufficiale wx.ToolBar</p> <p>Classe grafica per implementare una barra degli strumenti</p> <p>Se le barre dei men\u00f9 dovrebbero permettere l'accesso a tutte le funzioni disponibili in una applicazione, le barre degli strumenti dovrebbero permettere l'accesso alle azioni veloci, ovvero a quelle di maggior utilizzo per gli utenti.</p> <p>Per aggiungere una Toolbar alla nostra Frame Widget dobbiamo utilizzare la funzione <code>CreateToolBar</code> a cui poi potremo aggiungere le azioni che ci interessano.</p> <pre><code>toolbar = self.CreateToolBar()\n\n# toolbar.AddTool(...e qui si aggiungono le azioni una ad una...)\ntoolbar.AddTool(wx.ID_OPEN, \"Apri\",  wx.ArtProvider.GetBitmap(wx.ART_FOLDER_OPEN))\ntoolbar.AddTool(wx.ID_SAVE, \"Salva\", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE))\n\n# un separatore: come abbellimento e per vedere come si fa :)\ntoolbar.AddSeparator()\n\ntoolbar.AddTool(wx.ID_EXIT, \"Esci\",  wx.ArtProvider.GetBitmap(wx.ART_QUIT) )\n\n\n# riempita la toobar, va eseguito il metodo Realize()\ntoolbar.Realize()\n</code></pre> <p>A questo punto, se volete collegare i pulsanti della Toolbar ad una funzione,  basta eseguire il solito Bind() con l'evento <code>wx.EVT_TOOL</code>.</p> <pre><code>self.Bind(wx.EVT_TOOL, self.funzioneEsci, id = wx.ID_EXIT )\nself.Bind(wx.EVT_TOOL, self.funzioneApri, id = wx.ID_OPEN )\n</code></pre> <p>Attenzione!</p> <p>L'evento <code>wx.EVT_TOOL</code> \u00e8 automaticamente abbinato ad un evento <code>wx.EVT_MENU</code> e viceversa. Questo significa che se, ad esempio, avete gi\u00e0 implementato tutte le vostre azioni nella MenuBar e fatto il Binding con i loro ID con le opportune funzioni, tutte le azioni che aggiungerete alla toolbar con ID gi\u00e0 utilizzati funzioneranno automaticamente senza bisogno di un ulteriore binding!!!</p> <p>Vediamo una semplicissima dimostrazione di ci\u00f2 con una finestra avente una sola azione, presente sia nella menubar che nella toolbar.</p> <pre><code># Esempio banale con una sola azione su menu e toolbar, UN UNICO BINDING\nimport wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Stessa azione: menu &amp; toolbar\")\n\n        menubar = wx.MenuBar()\n        fileMenu = wx.Menu()\n        fileItem = fileMenu.Append(wx.ID_EXIT)\n        menubar.Append(fileMenu, '&amp;File')\n        self.SetMenuBar(menubar)\n\n        self.Bind(wx.EVT_MENU, self.esci, id=wx.ID_EXIT)\n\n        toolbar = self.CreateToolBar()\n        toolbar.AddTool( wx.ID_EXIT, \"ESCI\", wx.ArtProvider.GetBitmap(wx.ART_QUIT) )\n        toolbar.Realize()\n\n    def esci(self, event):\n        self.Close(True)\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    window = Esempio()\n    window.Show()\n    app.MainLoop()\n</code></pre>"},{"location":"wx/170_full_gui/#wxstatusbar","title":"wx.StatusBar","text":"<p>Documentazione ufficiale wx.StatusBar</p> <p>Classe grafica per implementare una barra di stato</p> <p>La classe <code>wx.StatusBar</code> rappresenta una widget che implementa la barra di stato delle applicazioni.</p> <p></p> <p>E' possibile creare una barra di stato in due modi: o dichiarando un oggetto di tipo wx.StatusBar e poi inserendolo nella finestra tramite il metodo SetStatusBar() oppure chiamando direttamente dalla finestra il metodo CreateStatusBar(). Se dovete solo visualizzare informazioni il secondo metodo \u00e8 una bomba! Se dovete modificare la StatusBar aggiungendovi widget e icone serve il primo metodo, eventualmente creando una classe derivata da wx.StatusBar.</p> <p>Nell'esempio proposto si crea automaticamente una StatusBar e si visualizza la posizione del puntatore non appena questo entra nella finestra.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Muovi il mouse sopra la finestra\")        \n        self.bar = self.CreateStatusBar()\n        self.Bind(wx.EVT_MOTION, self.controllaMouse)\n\n    def controllaMouse(self, event):\n        pos = event.GetPosition()\n        info = \"x: \" + str(pos[0]) + \" y: \" + str(pos[1])\n        self.bar.SetStatusText(info)\n        return\n\n# ----------------------------------------\napp = wx.App()\nwindow = Esempio()\nwindow.Show()\napp.MainLoop()\n</code></pre>"},{"location":"wx/170_full_gui/#context-menu","title":"Context Menu","text":"<p>I Context Menus ovvero i men\u00f9 contestuali sono quei men\u00f9 che appaiono quando si fa click con il tasto destro in determinate posizione della nostra applicazione. Risulta chiaro a mio avviso che i Context Menu dipendono dalla widget sopra la quale si fa click con il tasto destro. Un immagine vale pi\u00f9 di 1000 parole:</p> <p></p> <p>Per capire come si pu\u00f2 implementare un Context Menu tramite la libreria wxPython proviamo ad implementarne uno su una widget con dentro un check item che abilita o disabilita la toolbar, rendendo possibile in quest'ultimo caso utilizzare i suoi strumenti.</p> <pre><code>import wx\n\nclass Esempio(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=\"Context Menu\")\n\n        self.toolbar = self.CreateToolBar()        \n        exitTool = self.toolbar.AddTool( wx.ID_EXIT, \"ESCI\", wx.ArtProvider.GetBitmap(wx.ART_QUIT) )\n        self.toolbar.Realize()\n\n        self.Bind(wx.EVT_TOOL, self.esci, exitTool)\n\n        # serve ad attivare il Context Menu\n        self.Bind(wx.EVT_RIGHT_DOWN, self.OnRightDown)\n\n        # Crea il men\u00f9, pronto per essere attivato!\n        self.contextMenu = wx.Menu()\n        self.fsItem = wx.MenuItem(self.contextMenu, id=100, text=\"Toolbar abilitata\", kind=wx.ITEM_CHECK)\n        self.contextMenu.Append(self.fsItem)\n        self.contextMenu.Check(100, True)\n        self.Bind(wx.EVT_MENU, self.ManageToolBar, self.fsItem)\n\n    def esci(self, event):\n        self.Close(True)\n        return\n\n    def OnRightDown(self, event):\n        self.PopupMenu(self.contextMenu, event.GetPosition())\n\n    def ManageToolBar(self,event):\n        if self.fsItem.IsChecked():\n            self.toolbar.Enable(True)\n        else:\n            self.toolbar.Enable(False)\n\n# ----------------------------------------\napp = wx.App()\nwindow = Esempio()\nwindow.Show()\napp.MainLoop()\n</code></pre> <p>Il risultato di questo codice \u00e8 il seguente:</p> <p></p> <p>Spero che osservare e riprodurre l'esempio sia sufficiente per capire il funzionamento :)</p>"},{"location":"wx/170_full_gui/#impostazioni","title":"Impostazioni","text":"<p>Documentazione ufficiale wx.FileConfig</p> <p>Classe per la gestione delle configurazioni utente di una applicazione</p> <p>Pu\u00f2 essere interessante e/o addirittura necessario per una applicazione salvare da qualche parte alcune impostazioni da ricaricare al prossimo riavvio. Ad esempio potrebbe essere interessante tracciare la posizione e la dimensione della finestra principale nello schermo, per riproporla identica... oppure nel caso di una applicazione che permette ad esempio di cambiare la dimensione del font, di memorizzare questa impostazione e riproporla anche nelle successive esecuzioni, senza dover ogni volta costringere l'utente a cambiarla di nuovo.</p> <p>Certo siete gi\u00e0 in grado di fare questo tipo di lavoro salvando ad esempio su file di testo queste informazioni... ma dove lo mettiamo questo file per essere ragionevolmente sicuri di ritrovarlo alla prossima esecuzione? A tutte queste domande risponde con semplicit\u00e0 disarmante la classe wx.FileConfig che deriva dalla classe astratta wx.ConfigBase (uhm... forse non sapete cosa significa astratta... pazienza!!!).</p> <p>La classe wx.FileConfig richiede come informazioni solo il nome dell'applicazione, poi per ogni sistema operativo sceglie il posto riservato alle impostazioni delle applicazioni e scrive l\u00ec dentro un file di testo con una sequenza di coppie VARIABILE = VALORE.</p> <p>Quindi riassumendo:</p> STEP 1 <p>Dare un nome alla propria App. Questo si fa nella classe App, prima di creare una finestra, con la funzione SetAppName. Ad esempio:</p> <pre><code>app = wx.App()\napp.SetAppName(\"Ciccio\")\nwindow = Esempio()\nwindow.Show()\napp.MainLoop()\n</code></pre> STEP 2 <p>Dove ti serve di salvare alcune impostazioni, crea un oggetto della classe wx.FileConfig e salva i tuoi dati con la funzione <code>Write(\"variabile\", valore)</code>. Nell'esempio sotto proviamo a salvare la variabile \"colore\" che contiene il valore \"red\" e la variabile \"dimensioneFont\" che contiene il valore 18. Attenzione ad assicurarsi di salvare sempre e solo stringhe:</p> <pre><code>config = wx.FileConfig(\"Ciccio\")\nconfig.Write( \"colore\" , \"red\" )\n\n# l'int va convertito in stringa\nconfig.Write( \"dimensioneFont\" , str(18) )\n\n# basta... tutto qui!\n</code></pre> STEP 3 <p>Quando ti serve di sapere i valori abbinati alle variabili \"colore\" e \"dimensioneFont\", che evidentemente per il tuo programma sono importanti, ti baster\u00e0 andare a controllarne il valore con le funzioni Read (che restituisce sempre stringhe, quindi converti i valori se ne hai bisogno).</p> <pre><code>config = wx.FileConfig(\"Ciccio\")\n\n# \"black\" \u00e8 il valore di default, viene usato se non \u00e8 stato salvato nulla\ncolore = config.Read( \"colore\" , \"black\" ) \n\n# trasformo in int. 12 default.\ndimensioneFont = int( config.Read( \"dimensioneFont\" , \"12\" ) ) \n</code></pre> <p>Come vedete salvare le configurazioni della propria App diventa semplicissimo, a patto di saper scegliere bene i valori da salvare come impostazioni e di fare in modo che i dati da salvare siano semplicemente convertibili in stringhe.</p> <p> </p>"},{"location":"wx/171_advanced/","title":"Widgets avanzate","text":"<p>In questo capitolo andiamo ad introdurre alcune widgets molto potenti per realizzare programmi specializzati in determinati ambiti! </p> <p>Iniziamo a gustare la potenza della OOP e delle librerie integrate!!!</p>"},{"location":"wx/171_advanced/#griglia-per-foglio-di-calcolo","title":"Griglia per foglio di calcolo","text":"<p>Modulo wx.grid</p> <p>Esercizio: Foglio Elettronico</p> <p>blah blah</p> <p>Esercizio: Battleship</p> <p>blah blah</p>"},{"location":"wx/171_advanced/#editor-di-documenti-stiloso","title":"Editor di documenti stiloso","text":"<p>Modulo wx.stc</p> <p>Esercizio: Blocco Note con wx.stc</p> <p>blah blah</p>"},{"location":"wx/171_advanced/#browser-per-la-navigazione-internet","title":"Browser per la navigazione internet","text":"<p>Modulo wx.html2</p> MiniBrowser<pre><code>import wx\nimport wx.html2\n\nAPP_NAME = \"Mini Browser\"\n\nclass Finestra(wx.Frame):\n\n    def __init__(self):\n        super().__init__(None, title=APP_NAME)\n        panel = wx.Panel(self)\n\n        mainLayout = wx.BoxSizer(wx.VERTICAL)\n\n        # La WEBVIEW\n        self.browser = wx.html2.WebView.New(panel)\n        self.browser.Bind(wx.html2.EVT_WEBVIEW_LOADED, self.hoCaricato)\n        mainLayout.Add(self.browser, proportion=1, flag=wx.ALL|wx.EXPAND, border=5)\n\n        # la pagina iniziale\n        self.browser.LoadURL(\"https://www.adjam.org/\")\n\n        panel.SetSizer(mainLayout)\n        self.SetSize(1200,800)\n        self.Centre()\n\n    def hoCaricato(self, evt):\n        self.SetTitle(APP_NAME + \" - \" + self.browser.GetCurrentTitle())\n        return\n\n# ----------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App()\n    app.SetAppName(APP_NAME)\n\n    window = Finestra()\n    window.Show()\n\n    app.MainLoop()\n</code></pre> <p>Esercizio: Browser completo, con cronologia e bookmarks</p> <p>blah blah</p> <p>Esercizio: PDFViewer</p> <p>blah blah</p>"},{"location":"wx/171_advanced/#media-player","title":"Media Player","text":"<p>Modulo wx.media</p> <p>Esercizio: Video Player</p> <p>blah blah</p> <p>Esercizio: Audio Player</p> <p>blah blah</p>"},{"location":"wx/171_advanced/#rich-text-ctrl","title":"Rich Text Ctrl","text":"<p>Modulo wx.richtext</p> <p>Esercizio: Word :)</p> <p>blah blah</p>"},{"location":"wx/171_advanced/#da-sistemare","title":"DA SISTEMARE","text":"<ul> <li> <p>wx.ListCtrl</p> <ul> <li>File manager ??</li> </ul> </li> </ul> <ul> <li> <p>DateTime Widgets</p> <ul> <li>calendario</li> <li>orologio</li> <li>agenda</li> </ul> </li> </ul> <ul> <li> <p>Visualizzatore Immagini</p> <ul> <li>GIF Viewer (con play/pause/stop)</li> <li>SlideShow (temporizzato)</li> <li>SlideShow (con pulsanti AVANTI/INDIETRO)</li> </ul> </li> </ul> <p> </p>"},{"location":"wx/172_printing/","title":"Printing support","text":"<p>esempio gi\u00e0 preparato</p>"},{"location":"wx/180_network/","title":"Programmazione di rete","text":"<p>Esempi di software con supporto per la rete:</p> <ul> <li>Fortune</li> <li>Downloader</li> <li>Chat</li> <li>tris on line</li> <li>battaglia navale on line</li> </ul>"},{"location":"wx/299_tools/","title":"wx tools","text":"<p>La libreria wxPython fornisce alcuni semplici strumenti di supporto alla programmazione. Nell'ordine andremo a vedere i seguenti:</p> <ul> <li>wxdocs: un semplice eseguibile in grado di scaricare una copia locale della documentazione wxPython, disponibile online qui.</li> <li>wxdemo: una applicazione che fornisce una lunga serie di esempi di codice per prendere spunto e/o approfondire le proprie conoscenze</li> <li>widget inspection tool: un debugger grafico in grado di darci una piccola mano con i problemi di layout e malfunzionamento grafici.</li> </ul> <p>Vediamo adesso uno per uno!</p>"},{"location":"wx/299_tools/#wxdocs","title":"wxdocs","text":"<p>La libreria wxPython fornisce alcuni semplici strumenti di supporto alla programmazione. Il primo che andiamo ad incontrare \u00e8 il tool denominato wxdocs: esso permette di scaricare sul proprio dispositivo una copia della documentazione ufficiale, per la consultazione off-line.</p> <p>Se avete gi\u00e0 installato wxPython potete scaricare una copia locale della documentazione intera senza faticare tramite lo strumento chiamato wxdocs. Aprite un terminale ed eseguitelo:</p> <pre><code>$ wxdocs\n</code></pre> <p>Questo aprir\u00e0 sul vostro browser di default la copia locale della documentazione, scaricandola prima se non la trova disponibile.</p> <p></p> <p>Cos\u00ec potete consultarla comodamente offline in qualsiasi momento. Analoga soluzione sar\u00e0 utilizzata durante le verifiche di laboratorio!</p>"},{"location":"wx/299_tools/#wxdemo","title":"wxdemo","text":"<p>La libreria wxPython fornisce una serie incredibile di esempi di codice ben documentato per imparare dagli esempi come si implementano determinate soluzioni: due semplici strumenti per reperire localmente la documentazione e gli esempi principali della libreria stessa. Utilizzandoli avrete la comodit\u00e0 di avere tutta la documentazione disponibile offline, oltre che la possibilit\u00e0 di accedere ad una miriade di esempi di codice gi\u00e0 scritti e pronti all'uso e alla consultazione.</p> <p>In maniera analoga, se volete vedere esempi di codice e vedere il risultato di quello che riescono a produrre potete scaricare tutti quelli disponibili nella documentazione tramite lo strumento wxdemo. Aprite un terminale ed eseguitelo:</p> <pre><code>$ wxdemo\n</code></pre> <p>Questo aprir\u00e0 una applicazione wxPython (come vedete nella figura sotto) con tutti gli esempi catalogati per gruppi di interesse, scaricandoli da Internet se essi non sono presenti nel vostro sistema.</p> <p></p> <p>Cliccate su uno dei gruppi che vi interessano, date un occhio al codice e assolutamente eseguitelo per vederne il risultato!</p>"},{"location":"wx/299_tools/#widget-inspection-tool","title":"widget inspection tool","text":"<p>La libreria wxPython fornisce uno strumento molto interessante per l'analisi delle widget in fase di creazione: lo Widget Inspection Tool. Questo strumento pu\u00f2 essere utilizzato per analizzare il layout definito in una widget e le funzionalit\u00e0 grafiche implementate in essa (eventi, main loop, etc...).</p> <p>Per utilizzarlo \u00e8 necessario aggiungere semplicemente 2 righe di codice al main di una applicazione e rieseguire il suo codice:</p> <pre><code>import wx.lib.inspection\nwx.lib.inspection.InspectionTool().Show()\n</code></pre> <p>Come vedete non \u00e8 nulla di complicato. Cerchiamo per\u00f2 di capire quale pu\u00f2 essere l'utilit\u00e0 di utilizzare uno strumento del genere, come al solito partendo da un esempio.</p> <p>Questo stupido esempio qui sotto non funziona bene. Perch\u00e9? Il Widget Inspection Tool potrebbe aiutarci a capirlo...</p> <pre><code>import wx\n\nclass Prova(wx.Frame):\n    def __init__(self, title):\n        super().__init__(None,title=title)\n        panel = wx.Panel(self)\n\n        testo = wx.StaticText(panel,label=\"Scrivi:\")\n        self.riga = wx.TextCtrl(panel)\n        hbox = wx.BoxSizer(wx.HORIZONTAL)\n        hbox.Add(testo, flag=wx.ALL, border=10)\n        hbox.Add(self.riga, proportion=1)\n\n        box = wx.BoxSizer(wx.VERTICAL)\n        box.Add(hbox)\n\n        panel.SetSizer(box)\n\napp = wx.App()\nw = Prova(\"prova WIT\")\nw.Show()\napp.MainLoop()\n</code></pre> <p>Se analizzate un pochino l'esempio sopra, vi accorgerete che ho inserito un testo statico e una linea di testo in un sizer orizzontale. Ho messo un p\u00f2 di bordo nel primo per allinearlo al meglio, ho messo proportion=1 al secondo per farlo ingrandire con la finestra... insomma tutto ok. Poi ho inserito il layout in un sizer verticale che ho applicato al pannello. In questo modo potr\u00f2 semplicemente aggiungere righe di oggetti alla mia applicazione.</p> <p>Il risultato che ottengo \u00e8 visualizzato qui sotto:</p> <p></p> <p>Come si vede non ho ottenuto un layout bello esteso ma piccolo e non ridimensionabile. L'esempio \u00e8 semplice e i pi\u00f9 intuituivi avranno gi\u00e0 capito il problema. Per tutti gli altri si pu\u00f2 utilizzare uno strumento in pi\u00f9: il Widget Inspection Tool.</p> <p>Come detto sopra, per utilizzarlo basta modificare il codice sopra aggiungendo le due righe indicate prima di far partire il mainloop. Io ho fatto cos\u00ec:</p> <pre><code># ... modifico il codice vicino alle chiamate principali ...\napp = wx.App()\nw = Prova(\"prova WIT\")\nw.Show()\nimport wx.lib.inspection\nwx.lib.inspection.InspectionTool().Show()\napp.MainLoop()\n</code></pre> <p>ottenendo questo:</p> <p></p> <p>Come vedete lo strumento chiamato Widget Inspection Tool fa quello che promette: permette di analizzare le finestre a cui viene abbinato, elencando tutti gli oggetti con i relativi attributi presenti.</p> <p>Come vedete per\u00f2, non ci sono i sizer(s): se li volete visualizzare, vanno abilitati cliccando sull'opportuno pulsante Sizers sullo strumento:</p> <p></p> <p>Adesso che li vedete sullo strumento e volete controllare come si comportano nella widget, vi basta cliccare sul pulsante Highlight per farlo.</p> <p></p> <p>Questo ci fa capire immediatamente che il problema del nostro layout \u00e8 il sizer orizzontale che non va ad occupare tutto lo spazio disponibile nel sizer verticale. Si risolve modificando il codice come segue:</p> <pre><code># ...\nbox.Add(hbox, proportion=1)\n# ...\n</code></pre> <p>Un ultima cosa molto importante del Widget Inspection Tool \u00e8 che pu\u00f2 aiutarci a tracciare il comportamento anche degli eventi che accadono alle finestre che implementiamo. Per vedere questa sua funzionalit\u00e0 bisogna prima selezionare la widget che ci interessa, poi premere il pulsante Events che mostrer\u00e0 una nuova finestra con un elenco degli eventi disponibili per quell'oggetto.</p> <p>A questo punto ci basta provare ad utilizzare la nostra finestra:</p> <p></p> <p>Adesso il segreto non tanto segreto \u00e8 provare ad utilizzare questo strumento ogni volta che qualcosa non quadra per provare a ispezionare i nostri capolavori :)</p>"}]}